//------------------------------------------------
//--- 010 Editor v15.0 Binary Template
//
//      File: Sony PSP GE Enums
//   Authors: Nenkai
//   Version:
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#ifndef SCE_GE_H
#define SCE_GE_H

enum SCE_GE_CMD
{
    SCE_GE_CMD_NOP = 0x00, /*E No operation           */
    SCE_GE_CMD_VADR = 0x01, /*E Set vertex data        */
    SCE_GE_CMD_IADR = 0x02, /*E Set index data         */
    SCE_GE_CMD_PRIM = 0x04, /*E Draw primitive         */
    SCE_GE_CMD_BEZIER = 0x05, /*E Draw Bezier surface    */
    SCE_GE_CMD_SPLINE = 0x06, /*E Draw spline surface    */
    SCE_GE_CMD_BBOX = 0x07, /*E Set bounding box       */
    SCE_GE_CMD_JUMP = 0x08, /*E Jump                   */
    SCE_GE_CMD_BJUMP = 0x09, /*E Conditional jump       */
    SCE_GE_CMD_CALL = 0x0A, /*E List call              */
    SCE_GE_CMD_RET = 0x0B, /*E List return            */
    SCE_GE_CMD_END = 0x0C, /*E End reading            */
    SCE_GE_CMD_SIGNAL = 0x0E, /*E Signal interrupt       */
    SCE_GE_CMD_FINISH = 0x0F, /*E Finish drawing         */
    SCE_GE_CMD_BASE = 0x10, /*E Set address base       */
    SCE_GE_CMD_VTYPE = 0x12, /*E Set vertex type        */
    SCE_GE_CMD_OFFSET = 0x13, /*E Set offset address     */
    SCE_GE_CMD_ORIGIN = 0x14, /*E Set origin address     */
    SCE_GE_CMD_REGION1 = 0x15, /*E Set drawing region     */
    SCE_GE_CMD_REGION2 = 0x16, /*E Set drawing region     */
    
    SCE_GE_CMD_LTE = 0x17, /*E Lighting enable                  */
    SCE_GE_CMD_LE0 = 0x18, /*E Light enable                     */
    SCE_GE_CMD_LE1 = 0x19, /*E Light enable                     */
    SCE_GE_CMD_LE2 = 0x1A, /*E Light enable                     */
    SCE_GE_CMD_LE3 = 0x1B, /*E Light enable                     */
    SCE_GE_CMD_CLE = 0x1C, /*E Clipping enable                  */
    SCE_GE_CMD_BCE = 0x1D, /*E Culling enable                   */
    SCE_GE_CMD_TME = 0x1E, /*E Texture enable                   */
    SCE_GE_CMD_FGE = 0x1F, /*E Fog enable                       */
    SCE_GE_CMD_DTE = 0x20, /*E Dither enable                    */
    SCE_GE_CMD_ABE = 0x21, /*E Alpha blending enable            */
    SCE_GE_CMD_ATE = 0x22, /*E Alpha test enable                */
    SCE_GE_CMD_ZTE = 0x23, /*E Depth test enable                */
    SCE_GE_CMD_STE = 0x24, /*E Stencil test enable              */
    SCE_GE_CMD_AAE = 0x25, /*E Antialiasing enable              */
    SCE_GE_CMD_PCE = 0x26, /*E Patch culling enable             */
    SCE_GE_CMD_CTE = 0x27, /*E Patch culling enable             */
    SCE_GE_CMD_LOE = 0x28, /*E Logical operation enable         */
    
    SCE_GE_CMD_BONEN = 0x2A, /*E Set bone matrix number */
    SCE_GE_CMD_BONED = 0x2B, /*E Set bone matrix data   */
    SCE_GE_CMD_WEIGHT0 = 0x2C, /*E Set vertex weight      */
    SCE_GE_CMD_WEIGHT1 = 0x2D, /*E Set vertex weight      */
    SCE_GE_CMD_WEIGHT2 = 0x2E, /*E Set vertex weight      */
    SCE_GE_CMD_WEIGHT3 = 0x2F, /*E Set vertex weight      */
    SCE_GE_CMD_WEIGHT4 = 0x30, /*E Set vertex weight      */
    SCE_GE_CMD_WEIGHT5 = 0x31, /*E Set vertex weight      */
    SCE_GE_CMD_WEIGHT6 = 0x32, /*E Set vertex weight      */
    SCE_GE_CMD_WEIGHT7 = 0x33, /*E Set vertex weight      */
    
    SCE_GE_CMD_DIVIDE = 0x36, /*E Set patch division count */
    SCE_GE_CMD_PPM = 0x37, /*E Set patch primitive      */
    SCE_GE_CMD_PFACE = 0x38, /*E Set patch face           */
    
    SCE_GE_CMD_WORLDN = 0x3A, /*E Set world matrix number              */
    SCE_GE_CMD_WORLDD = 0x3B, /*E Set world matrix data                */
    SCE_GE_CMD_VIEWN = 0x3C, /*E Set view matrix number               */
    SCE_GE_CMD_VIEWD = 0x3D, /*E Set view matrix data                 */
    SCE_GE_CMD_PROJN = 0x3E, /*E Set perspective matrix number        */
    SCE_GE_CMD_PROJD = 0x3F, /*E Set perspective matrix data          */
    SCE_GE_CMD_TGENN = 0x40, /*E Set texture generation matrix number */
    SCE_GE_CMD_TGEND = 0x41, /*E Set texture generation matrix data   */
    
    SCE_GE_CMD_SX = 0x42, /*E Set viewport         */
    SCE_GE_CMD_SY = 0x43, /*E Set viewport         */
    SCE_GE_CMD_SZ = 0x44, /*E Set viewport         */
    SCE_GE_CMD_TX = 0x45, /*E Set viewport         */
    SCE_GE_CMD_TY = 0x46, /*E Set viewport         */
    SCE_GE_CMD_TZ = 0x47, /*E Set viewport         */
    SCE_GE_CMD_SU = 0x48, /*E Set texture scale    */
    SCE_GE_CMD_SV = 0x49, /*E Set texture scale    */
    SCE_GE_CMD_TU = 0x4A, /*E Set texture offset   */
    SCE_GE_CMD_TV = 0x4B, /*E Set texture offset   */
    SCE_GE_CMD_OFFSETX = 0x4C, /*E Set screen offset    */
    SCE_GE_CMD_OFFSETY = 0x4D, /*E Set screen offset    */
    
    SCE_GE_CMD_SHADE = 0x50, /*E Set shading mode         */
    SCE_GE_CMD_NREV = 0x51, /*E Normal reverse           */
    SCE_GE_CMD_MATERIAL = 0x53, /*E Material                 */
    SCE_GE_CMD_MEC = 0x54, /*E Set model emission color */
    SCE_GE_CMD_MAC = 0x55, /*E Set model amibient color */
    SCE_GE_CMD_MDC = 0x56, /*E Set model diffuse color  */
    SCE_GE_CMD_MSC = 0x57, /*E Set model specular color */
    SCE_GE_CMD_MAA = 0x58, /*E Set model amibent alpha  */
    SCE_GE_CMD_MK = 0x5B, /*E Set model specular power */
    SCE_GE_CMD_AC = 0x5C, /*E Set ambient light color  */
    SCE_GE_CMD_AA = 0x5D, /*E Set ambient light color  */
    SCE_GE_CMD_LMODE = 0x5E, /*E Set light mode           */
    
    
    SCE_GE_CMD_LTYPE0 = 0x5F, /*E Set light type   */
    SCE_GE_CMD_LTYPE1 = 0x60, /*E Set light type   */
    SCE_GE_CMD_LTYPE2 = 0x61, /*E Set light type   */
    SCE_GE_CMD_LTYPE3 = 0x62, /*E Set light type   */
    SCE_GE_CMD_LX0 = 0x63, /*E Set light vector */
    SCE_GE_CMD_LY0 = 0x64, /*E Set light vector */
    SCE_GE_CMD_LZ0 = 0x65, /*E Set light vector */
    SCE_GE_CMD_LX1 = 0x66, /*E Set light vector */
    SCE_GE_CMD_LY1 = 0x67, /*E Set light vector */
    SCE_GE_CMD_LZ1 = 0x68, /*E Set light vector */
    SCE_GE_CMD_LX2 = 0x69, /*E Set light vector */
    SCE_GE_CMD_LY2 = 0x6A, /*E Set light vector */
    SCE_GE_CMD_LZ2 = 0x6B, /*E Set light vector */
    SCE_GE_CMD_LX3 = 0x6C, /*E Set light vector */
    SCE_GE_CMD_LY3 = 0x6D, /*E Set light vector */
    SCE_GE_CMD_LZ3 = 0x6E, /*E Set light vector */
    
    SCE_GE_CMD_LDX0 = 0x6F, /*E Set light direction */
    SCE_GE_CMD_LDY0 = 0x70, /*E Set light direction */
    SCE_GE_CMD_LDZ0 = 0x71, /*E Set light direction */
    SCE_GE_CMD_LDX1 = 0x72, /*E Set light direction */
    SCE_GE_CMD_LDY1 = 0x73, /*E Set light direction */
    SCE_GE_CMD_LDZ1 = 0x74, /*E Set light direction */
    SCE_GE_CMD_LDX2 = 0x75, /*E Set light direction */
    SCE_GE_CMD_LDY2 = 0x76, /*E Set light direction */
    SCE_GE_CMD_LDZ2 = 0x77, /*E Set light direction */
    SCE_GE_CMD_LDX3 = 0x78, /*E Set light direction */
    SCE_GE_CMD_LDY3 = 0x79, /*E Set light direction */
    SCE_GE_CMD_LDZ3 = 0x7A, /*E Set light direction */
    
    SCE_GE_CMD_LKA0 = 0x7B, /*E Set light distance attenuation factor */
    SCE_GE_CMD_LKB0 = 0x7C, /*E Set light distance attenuation factor */
    SCE_GE_CMD_LKC0 = 0x7D, /*E Set light distance attenuation factor */
    SCE_GE_CMD_LKA1 = 0x7E, /*E Set light distance attenuation factor */
    SCE_GE_CMD_LKB1 = 0x7F, /*E Set light distance attenuation factor */
    SCE_GE_CMD_LKC1 = 0x80, /*E Set light distance attenuation factor */
    SCE_GE_CMD_LKA2 = 0x81, /*E Set light distance attenuation factor */
    SCE_GE_CMD_LKB2 = 0x82, /*E Set light distance attenuation factor */
    SCE_GE_CMD_LKC2 = 0x83, /*E Set light distance attenuation factor */
    SCE_GE_CMD_LKA3 = 0x84, /*E Set light distance attenuation factor */
    SCE_GE_CMD_LKB3 = 0x85, /*E Set light distance attenuation factor */
    SCE_GE_CMD_LKC3 = 0x86, /*E Set light distance attenuation factor */
    
    SCE_GE_CMD_LKS0 = 0x87, /*E Set light convergence factor */
    SCE_GE_CMD_LKS1 = 0x88, /*E Set light convergence factor */
    SCE_GE_CMD_LKS2 = 0x89, /*E Set light convergence factor */
    SCE_GE_CMD_LKS3 = 0x8A, /*E Set light convergence factor */
    
    SCE_GE_CMD_LKO0 = 0x8B, /*E Set light distance attenuation factor */
    SCE_GE_CMD_LKO1 = 0x8C, /*E Set light distance attenuation factor */
    SCE_GE_CMD_LKO2 = 0x8D, /*E Set light distance attenuation factor */
    SCE_GE_CMD_LKO3 = 0x8E, /*E Set light distance attenuation factor */
    
    SCE_GE_CMD_LAC0 = 0x8F, /*E Set light color */
    SCE_GE_CMD_LDC0 = 0x90, /*E Set light color */
    SCE_GE_CMD_LSC0 = 0x91, /*E Set light color */
    SCE_GE_CMD_LAC1 = 0x92, /*E Set light color */
    SCE_GE_CMD_LDC1 = 0x93, /*E Set light color */
    SCE_GE_CMD_LSC1 = 0x94, /*E Set light color */
    SCE_GE_CMD_LAC2 = 0x95, /*E Set light color */
    SCE_GE_CMD_LDC2 = 0x96, /*E Set light color */
    SCE_GE_CMD_LSC2 = 0x97, /*E Set light color */
    SCE_GE_CMD_LAC3 = 0x98, /*E Set light color */
    SCE_GE_CMD_LDC3 = 0x99, /*E Set light color */
    SCE_GE_CMD_LSC3 = 0x9A, /*E Set light color */
    
    SCE_GE_CMD_CULL = 0x9B, /*J ?????? */
    
    SCE_GE_CMD_FBP = 0x9C, /*E Set frame buffer */
    SCE_GE_CMD_FBW = 0x9D, /*E Set frame buffer */
    SCE_GE_CMD_ZBP = 0x9E, /*E Set depth buffer */
    SCE_GE_CMD_ZBW = 0x9F, /*E Set depth buffer */
    
    SCE_GE_CMD_TBP0 = 0xA0, /*E Set texture buffer */
    SCE_GE_CMD_TBP1 = 0xA1, /*E Set texture buffer */
    SCE_GE_CMD_TBP2 = 0xA2, /*E Set texture buffer */
    SCE_GE_CMD_TBP3 = 0xA3, /*E Set texture buffer */
    SCE_GE_CMD_TBP4 = 0xA4, /*E Set texture buffer */
    SCE_GE_CMD_TBP5 = 0xA5, /*E Set texture buffer */
    SCE_GE_CMD_TBP6 = 0xA6, /*E Set texture buffer */
    SCE_GE_CMD_TBP7 = 0xA7, /*E Set texture buffer */
    SCE_GE_CMD_TBW0 = 0xA8, /*E Set texture buffer */
    SCE_GE_CMD_TBW1 = 0xA9, /*E Set texture buffer */
    SCE_GE_CMD_TBW2 = 0xAA, /*E Set texture buffer */
    SCE_GE_CMD_TBW3 = 0xAB, /*E Set texture buffer */
    SCE_GE_CMD_TBW4 = 0xAC, /*E Set texture buffer */
    SCE_GE_CMD_TBW5 = 0xAD, /*E Set texture buffer */
    SCE_GE_CMD_TBW6 = 0xAE, /*E Set texture buffer */
    SCE_GE_CMD_TBW7 = 0xAF, /*E Set texture buffer */
    
    SCE_GE_CMD_CBP = 0xB0, /*E Set CLUT buffer */
    SCE_GE_CMD_CBW = 0xB1, /*E Set CLUT buffer */
    
    SCE_GE_CMD_XBP1 = 0xB2, /*E Set transfer buffer (source)       */
    SCE_GE_CMD_XBW1 = 0xB3, /*E Set transfer buffer (source)       */
    SCE_GE_CMD_XBP2 = 0xB4, /*E Set transfer buffer (destination)  */
    SCE_GE_CMD_XBW2 = 0xB5, /*E Set transfer buffer (destination)  */
    
    SCE_GE_CMD_TSIZE0 = 0xB8, /*E Set texture size */
    SCE_GE_CMD_TSIZE1 = 0xB9, /*E Set texture size */
    SCE_GE_CMD_TSIZE2 = 0xBA, /*E Set texture size */
    SCE_GE_CMD_TSIZE3 = 0xBB, /*E Set texture size */
    SCE_GE_CMD_TSIZE4 = 0xBC, /*E Set texture size */
    SCE_GE_CMD_TSIZE5 = 0xBD, /*E Set texture size */
    SCE_GE_CMD_TSIZE6 = 0xBE, /*E Set texture size */
    SCE_GE_CMD_TSIZE7 = 0xBF, /*E Set texture size */
    
    SCE_GE_CMD_TMAP = 0xC0, /*E Set texture map mode           */
    SCE_GE_CMD_TSHADE = 0xC1, /*E Set shade mapping              */
    SCE_GE_CMD_TMODE = 0xC2, /*E Set texture mode               */
    SCE_GE_CMD_TPF = 0xC3, /*E Set texture pixel format       */
    SCE_GE_CMD_CLOAD = 0xC4, /*E CLUT load                      */
    SCE_GE_CMD_CLUT = 0xC5, /*E Set CLUT                       */
    SCE_GE_CMD_TFILTER = 0xC6, /*E Set texture filter             */
    SCE_GE_CMD_TWRAP = 0xC7, /*E Set texture wrap mode          */
    SCE_GE_CMD_TLEVEL = 0xC8, /*E Set texture level mode         */
    SCE_GE_CMD_TFUNC = 0xC9, /*E Set texture function           */
    SCE_GE_CMD_TEC = 0xCA, /*E Set texture environment color  */
    SCE_GE_CMD_TFLUSH = 0xCB, /*E Texture flush                  */
    SCE_GE_CMD_TSYNC = 0xCC, /*E Texture synchronization        */
    
    SCE_GE_CMD_FOG1 = 0xCD, /*E Set fog parameter  */
    SCE_GE_CMD_FOG2 = 0xCE, /*E Set fog parameter  */
    SCE_GE_CMD_FC = 0xCF, /*E Set fog color      */
    SCE_GE_CMD_TSLOPE = 0xD0, /*E Set texture slope  */
    
    SCE_GE_CMD_FPF = 0xD2, /*E Set frame pixel format       */
    SCE_GE_CMD_CMODE = 0xD3, /*E Set clear mode               */
    SCE_GE_CMD_SCISSOR1 = 0xD4, /*E Set scissoring area          */
    SCE_GE_CMD_SCISSOR2 = 0xD5, /*E Set scissoring area          */
    
    SCE_GE_CMD_MINZ = 0xD6, /*E Set depth range               */
    SCE_GE_CMD_MAXZ = 0xD7, /*E Set depth range               */
    SCE_GE_CMD_CTEST = 0xD8, /*E Set color test parameter      */
    SCE_GE_CMD_CREF = 0xD9, /*E Set color test reference      */
    SCE_GE_CMD_CMSK = 0xDA, /*E Set color test mask           */
    SCE_GE_CMD_ATEST = 0xDB, /*E Set alpha test parameters     */
    SCE_GE_CMD_STEST = 0xDC, /*E Set stencil test parameters   */
    SCE_GE_CMD_SOP = 0xDD, /*E Set stencil operation         */
    SCE_GE_CMD_ZTEST = 0xDE, /*E Set depth test parameter      */
    SCE_GE_CMD_BLEND = 0xDF, /*E Set alpha blending parameters */
    SCE_GE_CMD_FIXA = 0xE0, /*E Set fixed color A             */
    SCE_GE_CMD_FIXB = 0xE1, /*E Set fixed color B             */
    SCE_GE_CMD_DITH1 = 0xE2, /*E Set dither coefficients       */
    SCE_GE_CMD_DITH2 = 0xE3, /*E Set dither coefficients       */
    SCE_GE_CMD_DITH3 = 0xE4, /*E Set dither coefficients       */
    SCE_GE_CMD_DITH4 = 0xE5, /*E Set dither coefficients       */
    
    SCE_GE_CMD_LOP = 0xE6, /*E Set logical operation parameter  */
    SCE_GE_CMD_ZMSK = 0xE7, /*E Depth mask                       */
    SCE_GE_CMD_PMSK1 = 0xE8, /*E Set plane mask                   */
    SCE_GE_CMD_PMSK2 = 0xE9, /*E Set plane mask                   */
    
    SCE_GE_CMD_XSTART = 0xEA, /*E Inter-buffer transfer start              */
    SCE_GE_CMD_XPOS1 = 0xEB, /*E Set source buffer transfer position      */
    SCE_GE_CMD_XPOS2 = 0xEC, /*E Set destination buffer transfer position */
    SCE_GE_CMD_XSIZE = 0xEE, /*E Set transfer size                        */
    
    SCE_GE_CMD_DUMMY = 0xFF, /*E dummy command (insert before BONED,WEIGHT?) */   
};

enum SCE_GE_TMAP_TMN
{
    SCE_GE_TMAP_TMN_UV			= 0,
    SCE_GE_TMAP_TMN_PROJECTION	= 1,
    SCE_GE_TMAP_TMN_SHADE		= 2,
};

enum SCE_GE_TMAP_TMI
{
    SCE_GE_TMAP_TMI_XYZ			           = 0,
    SCE_GE_TMAP_TMI_UV	                   = 1,
    SCE_GE_TMAP_TMI_NORMALIZED_NORMAL	   = 2,
    SCE_GE_TMAP_TMI_NORMAL	               = 3,
};

enum eSCE_GE_TPF
{
    SCE_GE_TPF_5650		= 0,
    SCE_GE_TPF_5551		= 1,
    SCE_GE_TPF_4444		= 2,
    SCE_GE_TPF_8888		= 3,
    SCE_GE_TPF_IDTEX4	= 4,
    SCE_GE_TPF_IDTEX8	= 5,
    SCE_GE_TPF_IDTEX16	= 6,
    SCE_GE_TPF_IDTEX32	= 7,
    SCE_GE_TPF_DXT1		= 8,
    SCE_GE_TPF_DXT3		= 9,
    SCE_GE_TPF_DXT5		= 10,
};

enum SCE_GE_TMODE_HSM
{
    SCE_GE_TMODE_HSM_NORMAL = 0,
    SCE_GE_TMODE_HSM_HIGHSPEED = 1,
};

enum SCE_GE_CLUT_CPF
{
    SCE_GE_CLUT_CPF_5650 = 0,
    SCE_GE_CLUT_CPF_5551 = 1,
    SCE_GE_CLUT_CPF_4444 = 2,
    SCE_GE_CLUT_CPF_8888 = 3,
};

enum eSCE_GE_TFILTER
{
    SCE_GE_TFILTER_NEAREST					= 0,
    SCE_GE_TFILTER_LINEAR					= 1,
    SCE_GE_TFILTER_NEAREST_MIPMAP_NEAREST	= 4,
    SCE_GE_TFILTER_LINEAR_MIPMAP_NEAREST	= 5,
    SCE_GE_TFILTER_NEAREST_MIPMAP_LINEAR	= 6,
    SCE_GE_TFILTER_LINEAR_MIPMAP_LINEAR		= 7,
};

enum eSCE_GE_TWRAP
{
    SCE_GE_TWRAP_REPEAT = 0,
    SCE_GE_TWRAP_CLAMP = 1,
};

enum eSCE_GE_TLEVEL
{
    SCE_GE_TLEVEL_AUTO		= 0,
    SCE_GE_TLEVEL_CONSTANT	= 1,
    SCE_GE_TLEVEL_SLOPE		= 2,
    SCE_GE_TLEVEL_VARIABLE1	= SCE_GE_TLEVEL_AUTO,
    SCE_GE_TLEVEL_FIX		= SCE_GE_TLEVEL_CONSTANT,
    SCE_GE_TLEVEL_VARIABLE2	= SCE_GE_TLEVEL_SLOPE,
};

enum SCE_GE_TFUNC_TCC
{
    SCE_GE_TFUNC_RGB  = 0,
    SCE_GE_TFUNC_RGBA = 1,
};

enum SCE_GE_TFUNC_TXF
{
    SCE_GE_TFUNC_MODULATE	= 0,
    SCE_GE_TFUNC_DECAL		= 1,
    SCE_GE_TFUNC_BLEND		= 2,
    SCE_GE_TFUNC_REPLACE	= 3,
    SCE_GE_TFUNC_ADD		= 4,
};

enum eSCE_GE_PRIM
{
    SCE_GE_PRIM_POINTS			= 0,
    SCE_GE_PRIM_LINES			= 1,
    SCE_GE_PRIM_LINE_STRIP		= 2,
    SCE_GE_PRIM_TRIANGLES		= 3,
    SCE_GE_PRIM_TRIANGLE_STRIP	= 4,
    SCE_GE_PRIM_TRIANGLE_FAN	= 5,
    SCE_GE_PRIM_RECTANGLES		= 6,
};

enum eSCE_GE_ZTEST
{
    SCE_GE_ZTEST_NEVER	  = 0,
    SCE_GE_ZTEST_ALWAYS	  = 1,
    SCE_GE_ZTEST_EQUAL	  = 2,
    SCE_GE_ZTEST_NOTEQUAL = 3,
    SCE_GE_ZTEST_LESS	  = 4,
    SCE_GE_ZTEST_LEQUAL	  = 5,
    SCE_GE_ZTEST_GREATER  = 6,
    SCE_GE_ZTEST_GEQUAL	  = 7,
};

enum SCE_GE_BLEND_A
{
    SCE_GE_BLEND_A_CD	   = 0,
    SCE_GE_BLEND_A_255_CD  = 1,
    SCE_GE_BLEND_A_AS	   = 2,
    SCE_GE_BLEND_A_255_AS  = 3,
    SCE_GE_BLEND_A_AD	   = 4,
    SCE_GE_BLEND_A_255_AD  = 5,
    SCE_GE_BLEND_A_2AS	   = 6,
    SCE_GE_BLEND_A_255_2AS = 7,
    SCE_GE_BLEND_A_2AD	   = 8,
    SCE_GE_BLEND_A_255_2AD = 9,
    SCE_GE_BLEND_A_FIXA	   = 10,
};

enum SCE_GE_BLEND_B
{
    SCE_GE_BLEND_B_CD	   = 0,
    SCE_GE_BLEND_B_255_CD  = 1,
    SCE_GE_BLEND_B_AS	   = 2,
    SCE_GE_BLEND_B_255_AS  = 3,
    SCE_GE_BLEND_B_AD	   = 4,
    SCE_GE_BLEND_B_255_AD  = 5,
    SCE_GE_BLEND_B_2AS	   = 6,
    SCE_GE_BLEND_B_255_2AS = 7,
    SCE_GE_BLEND_B_2AD	   = 8,
    SCE_GE_BLEND_B_255_2AD = 9,
    SCE_GE_BLEND_B_FIXB	   = 10,
};

enum SCE_GE_BLEND_EQU
{
    SCE_GE_BLEND_CSA_PLUS_CDB  = 0,
    SCE_GE_BLEND_CSA_MINUS_CDB = 1,
    SCE_GE_BLEND_CDB_MINUS_CSA = 2,
    SCE_GE_BLEND_MIN_CS_CD	   = 3,
    SCE_GE_BLEND_MAX_CS_CD	   = 4,
    SCE_GE_BLEND_ABS_CS_CD	   = 5,
};

enum eSCE_GE_VTYPE
{
    SCE_GE_VTYPE_NONE	= 0,
    SCE_GE_VTYPE_CHAR	= 1,
    SCE_GE_VTYPE_UCHAR	= 1,
    SCE_GE_VTYPE_SHORT	= 2,
    SCE_GE_VTYPE_USHORT	= 2,
    SCE_GE_VTYPE_FLOAT	= 3,
    
    SCE_GE_VTYPE_TTNONE	  = SCE_GE_VTYPE_NONE,
    SCE_GE_VTYPE_TTUCHAR  = SCE_GE_VTYPE_UCHAR,
    SCE_GE_VTYPE_TTUSHORT = SCE_GE_VTYPE_USHORT,
    SCE_GE_VTYPE_TTFLOAT  = SCE_GE_VTYPE_FLOAT,

    SCE_GE_VTYPE_CTNONE	  = 0,
    SCE_GE_VTYPE_CT5650	  = 4,
    SCE_GE_VTYPE_CT5551	  = 5,
    SCE_GE_VTYPE_CT4444	  = 6,
    SCE_GE_VTYPE_CT8888	  = 7,

    SCE_GE_VTYPE_NTNONE	  = SCE_GE_VTYPE_NONE,
    SCE_GE_VTYPE_NTCHAR	  = SCE_GE_VTYPE_CHAR,
    SCE_GE_VTYPE_NTSHORT  = SCE_GE_VTYPE_SHORT,
    SCE_GE_VTYPE_NTFLOAT  = SCE_GE_VTYPE_FLOAT,

    SCE_GE_VTYPE_VTCHAR	  = SCE_GE_VTYPE_CHAR,
    SCE_GE_VTYPE_VTSHORT  = SCE_GE_VTYPE_SHORT,
    SCE_GE_VTYPE_VTFLOAT  = SCE_GE_VTYPE_FLOAT,

    SCE_GE_VTYPE_WTNONE	  = SCE_GE_VTYPE_NONE,
    SCE_GE_VTYPE_WTUCHAR  = SCE_GE_VTYPE_UCHAR,
    SCE_GE_VTYPE_WTUSHORT = SCE_GE_VTYPE_USHORT,
    SCE_GE_VTYPE_WTFLOAT  = SCE_GE_VTYPE_FLOAT,

    SCE_GE_VTYPE_ITNONE	  = SCE_GE_VTYPE_NONE,
    SCE_GE_VTYPE_ITUCHAR  = SCE_GE_VTYPE_UCHAR,
    SCE_GE_VTYPE_ITUSHORT = SCE_GE_VTYPE_USHORT,
};

//________/ Structs \_______________________________

typedef struct
{
    int            : 24 <format=hex>;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_NOP;

typedef struct
{
    int _adr : 24 <format=hex>;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_VADR;

typedef struct
{
    int       : 16;
    byte _base : 4;
    byte       : 4;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_BASE;

typedef struct
{
    eSCE_GE_VTYPE tt : 2 <comment="Texture format">;
    eSCE_GE_VTYPE ct : 3 <comment="Color format">;
    eSCE_GE_VTYPE nt : 2 <comment="Normal format">;
    eSCE_GE_VTYPE vt : 2 <comment="Vertex format">;
    eSCE_GE_VTYPE wt : 2 <comment="Weight format">;
    eSCE_GE_VTYPE it : 3;
    byte wc : 4 <comment="Weight count">;
    byte mc : 5;
    byte tru : 1;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_VTYPE;

typedef struct
{
    byte _lte : 8;
    int       : 16;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_LTE;

typedef struct
{
    byte _tme : 8;
    int       : 16;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TME;

typedef struct
{
    byte _fge : 8;
    int       : 16;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_FGE;

typedef struct
{
    byte _abe : 8;
    int       : 16;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_ABE;

typedef struct
{
    byte _ate : 8;
    int       : 16;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_ATE;

typedef struct
{
    byte _atf;
    byte _aref;
    byte _amsk;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_ATEST;

typedef struct
{
    byte ac : 1;
    byte dc : 1;
    byte sc : 1;
    int     : 21;
} SCE_GE_MATERIAL;

typedef struct
{
    int count: 16;
    eSCE_GE_PRIM prim : 8;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_PRIM;

typedef struct
{
    SCE_GE_TMAP_TMN tmn : 2; // texcoords, texgen matrix, env map, invalid
    byte     : 6;
    SCE_GE_TMAP_TMI tmi : 2; // pos, uv, normalized normal, normal
    short     : 14;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TMAP;

typedef struct
{
    byte u : 2;
    byte   : 6;
    byte v : 2;
    short  : 14;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TSHADE;

typedef struct
{
    SCE_GE_TMODE_HSM hsm : 1; // Storage mode (normal or fast/swizzle)
    byte     : 7;
    byte mc  : 1;  // Multi clut
    byte     : 7;
    byte mxl : 3; // Maximum level mip
    byte     : 5;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TMODE;

typedef struct
{
    eSCE_GE_TPF tpf : 8; // Texture pixel format
    short ext : 16; // DXT format extension format 
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TPF;

typedef struct
{
    byte np : 8; // Num clut/palettes
    byte    : 8;
    byte    : 8;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_CLOAD;

typedef struct
{
    SCE_GE_CLUT_CPF cpf : 2; // Clut buffer pixel format
    byte sft : 6; // Shift value
    byte msk : 8; // Mask value
    byte csa : 8; // Load start location
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_CLUT;

typedef struct
{
    eSCE_GE_TFILTER min : 3;
    byte     : 5;
    eSCE_GE_TFILTER mag : 1; // Only nearest or linear
    short     : 15;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TFILTER;

typedef struct
{
    eSCE_GE_TWRAP wms : 1;
    byte              : 7;
    eSCE_GE_TWRAP wmt : 1;
    short             : 15;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TWRAP;

typedef struct
{
    eSCE_GE_TLEVEL lcm : 2; // Mipmap level mode
    short             : 14;
    byte offl : 8; // Bias
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TLEVEL;

typedef struct
{
    SCE_GE_TFUNC_TXF txf : 3; // Texture function
    byte     : 5;
    SCE_GE_TFUNC_TCC tcc : 1;
    byte     : 7;
    byte cd  : 1; // Color double
    byte     : 7;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TFUNC;

typedef struct
{
    byte r : 8;
    byte g : 8;
    byte b  : 8;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TEC;
    
typedef struct
{
    int cbp        : 24;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_CBP;

typedef struct
{
    int cbw        : 24;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_CBW;

typedef struct
{
    int TBP        : 24;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TBP0;

typedef struct
{
    int TBW        : 24;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TBW0;

typedef struct
{
    byte tw        : 8;
    byte th        : 8;
    byte           : 8;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TSIZE0;

typedef struct
{
    int su         : 24;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_SU;

typedef struct
{
    int sv         : 24;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_SV;

typedef struct
{
    int tu         : 24;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TU;

typedef struct
{
    int tv         : 24;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TV;

typedef struct
{
    eSCE_GE_ZTEST ztf : 8;
    ushort       : 16;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_ZTEST;

typedef struct
{
    SCE_GE_BLEND_A a : 4;
    SCE_GE_BLEND_B b : 4;
    SCE_GE_BLEND_EQU equ : 8;
    byte     : 8;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_BLEND;

#endif
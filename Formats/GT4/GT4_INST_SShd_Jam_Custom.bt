//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

LittleEndian();
BitfieldDisablePadding();

/* gt4sys:
 *  buy
 *  cancel
 *  cursor
 *  disable
 *  next
 *  oil
 *  ok
 *  param
 *  return
 *  select
 *  license_cursor
 *  license_ok
 */


typedef struct
{
    
    /* Variable 7bit read
    int Sequencer_readVariable(byte* buf)
    {
      int result = 0;
      do
      {
        var v3 = *buf;
        result = (result << 7) + (v3 & 0x7F);
      }
      while ( (v3 & 0x80) != 0 );
      return result;
    */

    local int j = 0;
    byte v;
    
    while (v[j++] & 0x80)
        byte v;
} _7bitVariable;

struct GTSOUNDINSTRUMENT
{
    struct
    {
        char Magic[4] <fgcolor=cPurple>;
        int RelocRuntimePtr <format=hex>;
        int HeaderSize <format=hex, fgcolor=cGreen>;
        int RuntimePtr2;
        int DataSize <format=hex, fgcolor=cGreen>;
        int DataOffset <format=hex, fgcolor=cRed>;
    
        struct
        {
            int EntryCount;
            int Offset <format=hex, fgcolor=cRed>;
        } SampleEntryInfo;
       
    } EsHeader <bgcolor=cPurple>;

    local int jamHeaderPos = FTell();
    struct
    {
        int JamHeaderSize <format=hex, fgcolor=cRed>;
        int BdSize <format=hex, comment="Presumably bank data size">;
        int _empty_;
        char Magic[4] <comment="Presumably Se Sequence Header">;

        int ProgDataPhysicalOffset <format=hex, fgcolor=cRed>;
        int VelocityChunkPhysicalOffset <format=hex, fgcolor=cRed>;
        int LfoTableChunkPhysicalOffset <format=hex, fgcolor=cRed>;
        int SeSeqChunkPhysicalOffset <format=hex, fgcolor=cRed>;
        int UnkChunkPhysicalOffset <format=hex, fgcolor=cRed>;
        int SeProgChunkPhysicalOffset <format=hex, fgcolor=cRed>;
        int reserved_physoffsets[2];

        int ProgDataMemoryOffset <format=hex, fgcolor=cLtRed>;
        int VelocityChunkMemoryOffset <format=hex, fgcolor=cLtRed>;
        int LfoTableChunkMemoryOffset <format=hex, fgcolor=cLtRed>;
        int SeSeqChunkMemoryOffset <format=hex, fgcolor=cLtRed>;
        int UnkChunkMemoryOffset <format=hex, fgcolor=cLtRed>;
        int SeProgChunkMemoryOffset <format=hex, fgcolor=cLtRed>;
        int reserved_memoffsets[2];

        int unks[11];
        int LastUnk;
        
    } JamHeader;

    if (JamHeader.ProgDataPhysicalOffset != -1)
    {
        FSeek(jamHeaderPos + JamHeader.ProgDataPhysicalOffset);
        struct
        {
            short EntryCount;
            short Offsets[EntryCount + 1] <format=hex>;
    
            local int i = 0;
            for (i = 0; i < EntryCount; i++)
            {
                if (Offsets[i] == -1)
                    continue;
    
                struct
                {
                    byte unk;
                    byte unkUsedInMultiplication;
                    byte unkWasntUsed_[2];
                    int unkWasntused <format=hex>;
                    byte unk;
                    byte unkk;
                    byte _0x10StrideCount;
                    byte emptyMaybe;
               
                    byte UnkFlag <format=hex>;
               
                    BigEndian();
                    int unk : 24 <format=hex, fgcolor=cRed>;
                    LittleEndian();
               
                    short unk;
                    short unk2SizeMaybe;
                    byte unk;
                    byte unk;
                    byte unk;
                    byte unk;
                } ProgChunk;
            }
        } ProgData <bgcolor=cBlue>;
    }

    if (JamHeader.VelocityChunkPhysicalOffset != -1)
    {
        FSeek(jamHeaderPos + JamHeader.VelocityChunkPhysicalOffset);
        struct
        {
            short unk;
            byte data[0x80];
        } VelocityChunk <bgcolor=cYellow>;

        FSeek(0xF0);
    }

    if (JamHeader.SeSeqChunkPhysicalOffset != -1)
    {
        FSeek(jamHeaderPos + JamHeader.SeSeqChunkPhysicalOffset);
        struct
        {
            local int baseChunkOffset = FTell();

            short LastIndex;
            short DataOffsets[LastIndex + 1]  <format=hex, fgcolor=cRed>;

            struct
            {
                short LastIndex;
                short Offset  <format=hex, fgcolor=cRed>;
            } EntryOffsets2[LastIndex + 1];

            local int i = 0;
            for (i = 0; i < LastIndex + 1; i++)
            {
                FSeek(baseChunkOffset + EntryOffsets2[i].Offset);
                struct
                {
                    local int dataCount = 0;
                    local int process = 1;
                    while (process)
                    {
                        // SDDRV::SqSequencer::statusEventCaller(void)::event_table
                        // Not completed/implemented, mostly did for GT4
                        struct
                        {
                            ubyte evType <format=hex>;
                            if (SeProgEntry[dataCount].evType >> 4 == 0x0F)
                            {
                                // SDDRV::SqSequencer::ev_Fx(void)
                                if (SeProgEntry[dataCount].evType == 0xFF)
                                {
                                    byte unk;
                                    if (unk == 47)
                                    {
                                        process = false;
                                        break;
                                    }
    
                                    if (unk == 81)
                                        int microSecPerBeat : 24;
                                }
                            }
                            else if (SeProgEntry[dataCount].evType >> 4 == 0x0A)
                            {
                                // SDDRV::SqSequencer::ev_Ax
                                byte seProgChunkEntryUnk <comment="this minus count in the entry of the se prog chunk">;
                                byte unk_A0;
                                byte seProgChunkIndex;
                                _7bitVariable var;
                            }
                            else if (SeProgEntry[dataCount].evType >> 4 == 0x0B)
                            {
                                // SDDRV::SqSequencer::ev_Bx
                                byte unkType;
                                byte unkValue;
                                byte unkValue;
                                byte unkValue;
    
                                if (unkType == 96)
                                {
                                    _7bitVariable unk_96;
                                }
                                else if (unkType >= 3)
                                {
                                    byte unk_3;
                                    _7bitVariable unk_3_var;
                                    if (unkType == 7)
                                    {
                                        // SDDRV::VoiceFilter::setAutoVolume
                                    }
                                    else if (unkType == 10)
                                    {
                                        // SDDRV::VoiceFilter::setAutoPan
                                    }
                                    else
                                    {
                                        // SDDRV::VoiceFilter::setAutoPitch
                                    }
                                }
                                else
                                {
                                }
                            }
    
                            dataCount++;
                        } SeProgEntry;
                    }
                } EntryData <bgcolor=cGray>;
            }
            
        } SeSeqChunk;

        if (JamHeader.UnkChunkPhysicalOffset != -1)
        {
            FSeek(jamHeaderPos + JamHeader.UnkChunkPhysicalOffset);
            struct
            {
                byte _;
            } UnkUnusedMaybeChunk;
        }

        if (JamHeader.SeProgChunkPhysicalOffset != -1)
        {
            FSeek(jamHeaderPos + JamHeader.SeProgChunkPhysicalOffset);
            struct
            {
                short MaxIndex;
                short EntryOffsets[MaxIndex + 1] <format=hex, fgcolor=cRed>;
                
                byte unk;
                byte unk;
                byte unk;
                byte unk;
                byte unk;
                byte unk;
                byte unkUsedWithSeSeqAsMinusValue <comment="seProgChunkEntryUnk - this?">;
                byte unk;

                // 0x10 strides ahead?

            } SeSeqProgChunk <bgcolor=cBlack>;
        }
    }

} Instrument;
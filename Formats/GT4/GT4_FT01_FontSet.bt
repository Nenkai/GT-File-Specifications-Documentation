//------------------------------------------------
//--- 010 Editor v10.0.2 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "GT4_Tex1_TexSet_Headless.bt"

typedef struct
{
    int textureOffset <format=hex, fgcolor=cRed>;
    FSeek(textureOffset);
    Tex1 texture;
} Texture;

typedef struct
{
    int colorMaybe <format=hex>;
    int defaultSpaceWidth; // Needs to be divided by 2?
    short unks;
    short unk2s;
    int d <format=hex, fgcolor=cRed>;
    int e <format=hex, fgcolor=cRed>;
} PDISTD_FontFace;

typedef struct
{
    int fontOffset <format=hex, fgcolor=cRed>;
    FSeek(fontOffset);
    int fontNameOffset <format=hex, fgcolor=cRed>;
    int fontFacesOffset <format=hex, fgcolor=cRed>;
    short fontFaceStartIndex <fgcolor=cGreen>;
    short fontFaceIndex <fgcolor=cGreen>; 
    byte u1;
    byte u2;
    byte u3;
    byte unkCount4; 
    int unk2;
    int unk3;
    int unkOffset;
    int relocPtr;

    FSeek(fontNameOffset);
    string name;

    FSeek(fontFacesOffset);
    local int i = 0;
    for (i; i < fontFaceIndex - fontFaceStartIndex + 1; i++) // + 1 = default
    {
        FSeek(fontFacesOffset + (i * 0x14));
        PDISTD_FontFace faces;
    }
    
} PDISTD_Font;


struct FT01
{
    char Magic[4];
    int relocPtr;
    int unkPtr;
    int empty;

    short fontCount <format=hex, fgcolor=cGreen>;
    short unkCount2 <format=hex, fgcolor=cGreen>;
    uint fontMapOffset <format=hex, fgcolor=cRed>;
    uint textureSetOffset <format=hex, fgcolor=cRed>;

    local int i = 0;
    for (i; i < fontCount; i++)
    {
        FSeek(fontMapOffset + (i * 4));
        PDISTD_Font font;

        FSeek(textureSetOffset + (i * 4));
        Texture texture;
    }
} PDISTD_FontSet;
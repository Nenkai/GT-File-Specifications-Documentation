//------------------------------------------------
//--- 010 Editor v10.0.2 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------


typedef struct (byte isIndexingBlock)
{
    short entryMetaOffset <format=hex, fgcolor=cRed>;
    short entryMetaLength <format=hex, fgcolor=cGreen>; // int + string

    if (isIndexingBlock)
        int BlockIndexForEntry;
    else
    {
        short entryTypeMetaOffset <format=hex, fgcolor=cRed>;
        short entryTypeMetaLength <format=hex, fgcolor=cGreen>;
    }
} TocBlockTableEntry <optimize=false>;

typedef struct (int entryCount, byte isIndexingBlock)
{
    local int i = 0;
    for (i; i < entryCount; i++)
       TocBlockTableEntry entry(isIndexingBlock);
} TocBlockTable;

typedef struct (int baseBlockOffset, TocBlockTableEntry &entry, byte isIndexingBlock)
{
    local int cPos = FTell(); // Needed, else: Invalid structure. Ending position was in front of starting position. ??????
    FSeek(baseBlockOffset + entry.entryMetaOffset);
    
    if (isIndexingBlock)
        byte Entry[entry.entryMetaLength] <fgcolor=0xAAAA00>;
    else
    {
        LittleEndian();
        uint ParentNode;
        BigEndian();

        char Name[entry.entryMetaLength - 4] <fgcolor=0xAAAA00>;
    }

    if (!isIndexingBlock)
    {
        FSeek(baseBlockOffset + entry.entryTypeMetaOffset);
        enum<byte> { Directory, File, CompressedFile } Type <fgcolor=cGreen>;

    if (Type == Directory)
    {
        LittleEndian();
        int NodeId;
    }
    else if (Type == File)
    {
        int PageOffset <format=hex>;
        time_t ModifiedDate <format=hex>;
        int RealSize <format=hex>;
    }
    else if (Type == CompressedFile)
    {
        int PageOffset <format=hex, fgcolor=cRed>;
        time_t ModifiedDate <fgcolor=0xFFFFFF>;
        int CompressedFile <format=hex>;
        int RealSize <format=hex>;
    }
    }
    FSeek(cPos);

    // Entry is aligned to 0x04

} TocMetaEntry <optimize=false>;


typedef struct (int blockSize, int index)
{
    BigEndian();
    int CompressedBlockOffset <format=hex, fgcolor=cRed>;

    local int baseBlockOffset = 0x708 + (blockSize * index);
    FSeek(baseBlockOffset);

    local int cPos = FTell();

    LittleEndian();
    short IsIndexingBlock <fgcolor=cYellow>;
    short EntryCount <fgcolor=cGreen>;
    int NextPage <fgcolor=cWhite>;
    int PreviousPage <fgcolor=cWhite>;
    
    FSeek((baseBlockOffset + blockSize) - (0x08 * (EntryCount / 2)));
    if (IsIndexingBlock == 1)
        TocBlockTable entryTable(EntryCount / 2, 1) <bgcolor=cGray>;
    else
        TocBlockTable entryTable(EntryCount / 2, 0) <bgcolor=cGray>;

    BigEndian();
    local int i = (EntryCount / 2) - 1;
    for (i; i >= 0; i--)
        TocMetaEntry entry(baseBlockOffset, entryTable.entry[i], IsIndexingBlock);

} TocBlock <optimize=false>;

struct RoFS
{
    LittleEndian();
    char Magic[4];
    short VersionHigh;
    short VersionLow;
    int PageCount;
    int PageLength;
    ushort BlockSize;
    ushort EntryCount;

    FSeek(0x40);

    local int i = 0;
    for (i; i < EntryCount; i++)
    {
        FSeek(0x40 + (i * 4));
        TocBlock block (BlockSize, i);
    }
} rofs <optimize=false>;
//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: NVec
//   Authors: Nenkai#9075
//   Version: 
//   Purpose: Vector Font definitions
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

BigEndian();
BitfieldDisablePadding();

local int entryBitSize;

typedef struct (int charCount)
{
   wchar_t fontChar[charCount];
} CharDefMap <bgcolor=cYellow>;

typedef struct
{
    wchar_t fontChar <fgcolor=cYellow>;
    short flags;
    int disabled : 1;
    int unk : 10;
    int xOffset : 9;
    int yOffset : 10;
    int pad : 2;
    int DataLen <format=hex, fgcolor=cGreen>;
    
    int unk12 : 12 <format=hex>;
    int unk20 : 20;
    /*
    byte a;
    byte b;
    byte c;
    byte d; // Confirmed
    */

    int OffsetWithinData <format=hex, fgcolor=cRed>;

} CharInfos <bgcolor=cPurple>;


string ReadAsFloat12Bits( int value )
{
    int maxVal = Pow(2, 12);

    string s;   
    if (value > (maxVal / 2))
        value = value - maxVal;

    SPrintf( s, "%f", (float)value );
    return s;
}

string ReadAsFloatVariable( int value )
{
    int maxVal = Pow(2, 9);

    string s;   
    if (value > (maxVal / 2))
        value = value - maxVal;

    Printf("%d bits: %d %d\n", entryBitSize, value, maxVal);

    SPrintf( s, "%f", (float)value );
    return s;
}

string ReadAsFloatVariablePlus2( int value )
{
    int maxVal = Pow(2, entryBitSize + 2);

    string s;   
    if (value > (maxVal / 2))
        value = value - maxVal;

    SPrintf( s, "%f", (float)value );
    return s;
}

typedef struct 
{
    
    uint x : 12 <comment=ReadAsFloat12Bits>;
    uint y : 12 <comment=ReadAsFloat12Bits>;

    struct
    {
        int flags : 6 <format=hex>;
        if (flags == 0)
            break;

        if (flags & 0x20)
        {
            if (flags & 0x10 == 0)
            {

            }
            else
            {
                int flags2 : 2;
                
                entryBitSize = flags & 0x0F;

                if (flags2 & 0x02)
                {
                    int x : (entryBitSize + 2) - 1;
                    int y : (entryBitSize + 2);
                }
                else
                {
                    int unkValue : (entryBitSize + 2) <comment=ReadAsFloatVariablePlus2>;
                    if (flags2 & 0x01)
                    {
                    
                    }
                }
            }
        }
        else if (flags & 0x01)
        {
            int size : 5;

            int x : size <comment=ReadAsFloatVariable>;
            int y : size <comment=ReadAsFloatVariable>;

            if (flags & 0x02)
                int b : 1;
    
            if (flags & 0x04)
                int b : 1;
        }
   
    } vecdataentry[12] <optimize=false>;

} CharData;

typedef struct (int dataOffset, int size)
{
    local int i = 0;
    local int charDataOffset;
    for (i; i < charCount; i++)
    {
        charDataOffset = dataOffset + charInfos[i].OffsetWithinData;
        FSeek(charDataOffset);
        CharData data;
    }
} CharDataMap;

struct 
{
    char Magic[4];
    byte u1;
    byte u2;
    byte u3;
    byte u4;

    short charCount <fgcolor=cGreen>;

    FSeek(0x10);
    int CharDefMapOffset <format=hex, fgcolor=cRed>;
    int unkOffset <format=hex, fgcolor=cRed>;
    int dataOffset <format=hex, fgcolor=cRed>;

    FSeek(CharDefMapOffset);
    CharDefMap charTable (charCount);

    FSeek(unkOffset);
    CharInfos charInfos[charCount];
    
    CharDataMap map(dataOffset, charCount);
    
} FontSet;

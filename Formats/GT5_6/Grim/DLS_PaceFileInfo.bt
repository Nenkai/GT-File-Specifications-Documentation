//------------------------------------------------
//--- 010 Editor v12.0 Binary Template
//
//      File: PaceFileInfo_DLS.bt
//   Authors: Nenkai
//   Version: 
//   Purpose: Sony libpace Pace File Info (Torrent/Tracker File) - GT5P has some as .dls files (NPEA00050, NPUA80075)
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// Documentation at the bottom of the template

BigEndian();
BitfieldDisablePadding();

typedef struct PieceHash
{
    byte hashData[0x20] <comment="SHA-256">;
};

struct DLS
{
    byte VersionMajor : 4 <comment="Must be 0 otherwise error 0x80008001 (metadata version)">;
    byte VersionMinor : 4 <comment="Must be 0 otherwise error 0x80008001 (metadata version)">;
    int              : 20;
    int MetadataUnk : 4 <comment="Must be 0 otherwise error 0x80008007 (metadata not valid)">;

    int SizeToEndOfFileFromHere <format=hex>;
    
    local int stop = false;
    while (!stop)
    {
        struct
        {
            int FieldType : 16 <format=hex, fgcolor=cPurple>;
            int FieldSize : 16 <format=hex, fgcolor=cYellow>;
    
            if ((FieldType & 0x8000) != 0)
            {
                int NumPieces <comment="In 0x80000 chunks of the target file (at least for GT5)">;
                PieceHash Pieces[NumPieces] <bgcolor=cDkGray, comment="In GT5, hashes of chunks of the PAM which has ALREADY been salsa encrypted">; // hash bytes must be present - stream reads just to check if they exist
                stop = true;
                return;
            }

            switch (FieldType)
            {
                case 1:
                    int64 TargetFileSize <fgcolor=cGreen>;
                    break;

                case 2:
                    char FileId[FieldSize] <comment="Max 63 chars (null terminator non included) in that context">;
                    break;

                case 3:
                    char TrackerUrl[FieldSize] <comment="Max 511 chars (null terminator non included) in that context">;
                    break;
            
                case 4:
                    int64 Unk4;
                    break;

                case 0x4001:
                    char Unk4001[FieldSize] <comment="Max 1023 chars (null terminator non included) in that context">;
                    break;

                case 0x4002:
                    char Unk4002[FieldSize] <comment="Max 1023 chars (null terminator non included) in that context">;
                    break;
                    
                case 0x4003:
                    char Unk4003[FieldSize] <comment="Max 511 chars (null terminator non included) in that context">;
                    break;
            }
        } FileInfoField;
    }

    PieceHash ThisFileInfoHash <bgcolor=cRed, comment="Calculated from offset 0 to (SizeToEndOfFileFromHere - 0x18)">;
} dls;

/*
 * The library used for this is libpace - which is an undocumented SCE library
 * and not provided by the PS3 (or other) SDKs. Seems to be mostly used by
 * games which Sony is the developer, or publisher.

 * DLS files/Pace System are like torrent files, they allow peers and seeders 
 * to send files between each other - using a tracker URL. libpace is more or less a P2P file share/torrent client.

 * SOCOM 4 does use it along with some other internal SCE libraries (under the SCEA namespace).
 * (there are some other libraries used like libcrashreport, libbinxml, scert, libmovie (uses cellSurMixer), libmalloc,
 * SCEA::PSArc::ArchiveParser, edgezlib (SPURS based zlib decompressor), SCEA::Recap)

 * List of Pace APIs:
 *  cellPaceIndexGetFirst
 *  cellPaceGetClientStatistics
 *  cellPaceIndexGetNext
 *  cellPaceFileId2String
 *  cellPaceDeactivate
 *  cellPaceIndexAddFile
 *  cellPaceIndexSuspendFile
 *  cellPaceGetFileInfoContent
 *  cellPaceInitializeActivateParams
 *  cellPaceActivate
 *  cellPaceDestroyClient
 *  cellPaceCreateClient
 *  cellPaceInit
 *  cellPaceInitializeTransferParams
 *  cellPaceEnd
 *  cellPaceIndexResumeFile
 *  cellPaceInitializeClientParams
 *  cellPaceIndexRemoveFile
 *  cellPaceGetFileStatus

 * GT5P/5/6 uses perhaps a modified version of libpace (statically linked)

 * Some structs:

   struct CellPaceTransferParams
   {
     uint32_t cookie;
     int32_t maxUploadRate;
     int32_t minDownloadRate;
     int32_t maxDownloadRate;
     int32_t maxPeers;
     int32_t maxCdnDownloadRate;
     int32_t maxPeerDownloadRate;
     float uploadSizeRatio;
     int64_t uploadSizeLimit;
     uint64_t cursor;
     int32_t targetCdnOffloadRate;
     int32_t interestThreshold;
     uint32_t options;
   };
   
   struct CellPaceConnInfo
   {
     uint8_t state;
     CellPacePeerId id;
     char onlineId[65];
     uint32_t rtt;
     float packetLossRatio;
   };
   
   struct CellPacePeerId
   {
     uint8_t peerId[32];
   };
   
   struct CellPaceClientStatistics
   {
     uint64_t since;
     uint64_t cumulativePeerUploadedBytes;
     uint64_t cumulativePeerDownloadedBytes;
     uint64_t cumulativeCdnDownloadedBytes;
     uint64_t totalPeerUploadedBytes;
     uint64_t totalPeerDownloadedBytes;
     uint64_t totalCdnDownloadedBytes;
     uint32_t peerUploadRate;
     uint32_t peerDownloadRate;
     uint32_t cdnDownloadRate;
     uint32_t totalInboundPeerConnections;
     uint32_t totalOutboundPeerConnections;
     uint32_t totalFailedPeerConnections;
     uint32_t currentPeerConnections;
     uint32_t totalCdnConnections;
     uint32_t currentTcpConnections;
     uint32_t totalFailedCdnConnections;
     uint32_t totalTrackerConnections;
     uint32_t totalFailedTrackerConnections;
     uint32_t currentMemoryUsage;
     uint32_t peakMemoryUsage;
     uint32_t memoryAllocations;
     uint32_t memoryFrees;
     uint32_t metadataDiskUsage;
     uint64_t contentDiskUsage;
     uint32_t totalFileOpens;
     uint32_t totalFileCloses;
     uint32_t totalFileSeeks;
     uint64_t totalFileBytesWritten;
     uint64_t totalFileBytesRead;
     uint32_t totalFileOpenErrors;
     uint32_t totalFileCloseErrors;
     uint32_t totalFileReadErrors;
     uint32_t totalFileWriteErrors;
     uint32_t totalFileSeekErrors;
     uint32_t numActiveFiles;
     uint32_t numInactiveFiles;
     uint64_t sizeRemaining;
     uint32_t numPieces;
     uint32_t numPiecesRemaining;
     uint32_t numUploadSlotsUsed;
     uint32_t totalNumPeerEnobufs;
     uint32_t totalNumHttpEnobufs;
     uint64_t totalBlockWriteTime;
     uint32_t totalBlockWriteCount;
     uint32_t peakBlockWriteTime;
     uint64_t totalBlockReadTime;
     uint32_t totalBlockReadCount;
     uint32_t peakBlockReadTime;
     uint64_t totalBlockHashTime;
     uint32_t totalBlockHashCount;
     uint32_t peakBlockHashTime;
     CellPaceConnInfo peers[64];
     size_t numPeers;
   };
   
   struct CellPaceFileId
   {
     uint8_t fileId[32];
   };
   
   struct CellPaceFileInfoContent
   {
     char name[64];
     char trackerUrl[512];
     CellPaceFileId fileId;
     uint64_t size;
     uint32_t numPieces;
   };
   
   typedef unsigned int *CellPaceHttpClientId;
   typedef int32_t CellPaceClientId;
   
    // GT5 2.11 EU RE-ing Hints (symbols guessed):

    0x761214 'Pace::ReadDLSFile'
    0x7601c0 'Pace::CalculatePaceFileInfoHash'
    0x754A24 'Pace::FileSeek(ctx, size, whence)'
    0x754bd0 'Pace::FileRead(ctx, size, ?)
    0x755164 'Pace::SHA256Matches'
    0x78333c 'Pace::AllocateFileInfoPieces'
    0x7879c8 'Pace::HashBlock'
    0x78799c 'Pace::HashFinalBlock'
    0x782aa0 'DLSFileInfo::GetNumPieces'
    0x782cd0 'DLSFileInfo::GetPiece'
    0x7537d8 'DLSFileInfo::DLSHashPiece'
    0x180673c 'g_PaceMemAllocator'
    
    Error codes (from socom 4's Debug Symbols - zNetwork::DLSImpl::PrintDLSError) (debugging.games website for symbols)
    - 0x80008001 - Metadata version error
    - 0x80008003 - Metadata read error
    - 0x80008004 - Metadata seek error
    - 0x80008007 - Metadata not valid error
    - 0x8000801e - Memory Error
*/

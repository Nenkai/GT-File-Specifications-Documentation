//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "TXS3_TextureSet3.bt"

BitfieldDisablePadding();

typedef enum <uint>
{


    // SetBlendFunc
	CELL_GCM_ZERO						= (0),
	CELL_GCM_ONE						= (1),
	CELL_GCM_SRC_COLOR					= (0x0300),
	CELL_GCM_ONE_MINUS_SRC_COLOR		= (0x0301),
	CELL_GCM_SRC_ALPHA					= (0x0302),
	CELL_GCM_ONE_MINUS_SRC_ALPHA		= (0x0303),
	CELL_GCM_DST_ALPHA					= (0x0304),
	CELL_GCM_ONE_MINUS_DST_ALPHA		= (0x0305),
	CELL_GCM_DST_COLOR					= (0x0306),
	CELL_GCM_ONE_MINUS_DST_COLOR		= (0x0307),
	CELL_GCM_SRC_ALPHA_SATURATE			= (0x0308),
	CELL_GCM_CONSTANT_COLOR				= (0x8001),
	CELL_GCM_ONE_MINUS_CONSTANT_COLOR	= (0x8002),
	CELL_GCM_CONSTANT_ALPHA				= (0x8003),
	CELL_GCM_ONE_MINUS_CONSTANT_ALPHA	= (0x8004),

    // SetAlphaFunc, DepthFunc, StencilFunc
    CELL_GCM_NEVER		= (0x0200),
	CELL_GCM_LESS		= (0x0201),
	CELL_GCM_EQUAL		= (0x0202),
	CELL_GCM_LEQUAL		= (0x0203),
	CELL_GCM_GREATER	= (0x0204),
	CELL_GCM_NOTEQUAL	= (0x0205),
	CELL_GCM_GEQUAL		= (0x0206),
	CELL_GCM_ALWAYS		= (0x0207),

    // SetLogicOp
	CELL_GCM_CLEAR			= (0x1500),
	CELL_GCM_AND			= (0x1501),
	CELL_GCM_AND_REVERSE	= (0x1502),
	CELL_GCM_COPY			= (0x1503),
	CELL_GCM_AND_INVERTED	= (0x1504),
	CELL_GCM_NOOP			= (0x1505),
	CELL_GCM_XOR			= (0x1506),
	CELL_GCM_OR				= (0x1507),
	CELL_GCM_NOR			= (0x1508),
	CELL_GCM_EQUIV			= (0x1509),
	CELL_GCM_INVERT			= (0x150A),
	CELL_GCM_OR_REVERSE		= (0x150B),
	CELL_GCM_COPY_INVERTED	= (0x150C),
	CELL_GCM_OR_INVERTED	= (0x150D),
	CELL_GCM_NAND			= (0x150E),
	CELL_GCM_SET			= (0x150F),

    // SetStencilOp
	CELL_GCM_KEEP		= (0x1E00),
	CELL_GCM_REPLACE	= (0x1E01),
	CELL_GCM_INCR		= (0x1E02),
	CELL_GCM_DECR		= (0x1E03),
	CELL_GCM_INCR_WRAP	= (0x8507),
	CELL_GCM_DECR_WRAP	= (0x8508),

    // SetBlendEquation
	CELL_GCM_FUNC_ADD				= (0x8006),
	CELL_GCM_MIN					= (0x8007),
	CELL_GCM_MAX					= (0x8008),
	CELL_GCM_FUNC_SUBTRACT			= (0x800A),
	CELL_GCM_FUNC_REVERSE_SUBTRACT	= (0x800B),
	CELL_GCM_FUNC_REVERSE_SUBTRACT_SIGNED	= (0x0000F005),
	CELL_GCM_FUNC_ADD_SIGNED				= (0x0000F006),
	CELL_GCM_FUNC_REVERSE_ADD_SIGNED		= (0x0000F007),

    // SetShadeMode
	CELL_GCM_FLAT	= (0x1D00),
	CELL_GCM_SMOOTH	= (0x1D01),
} CELL_GCM_ENUM;

typedef struct
{
    int StringOffset <fgcolor=cRed, format=hex>;
    int ImageMetadataIndex <fgcolor=cYellow>;
    FSeek(BasePos + StringOffset);
    string Name;
} ImageMetadataKey;

typedef struct
{
    int NameOffset <fgcolor=cRed, format=hex>;
    ushort MaterialDataID <fgcolor=cYellow, bgcolor=cDkYellow>;
    ushort CellGcmParamID <fgcolor=cYellow, bgcolor=cDkYellow>;
    short Flags <bgcolor=cDkYellow>;
    short KeyCount <fgcolor=cGreen, bgcolor=cDkYellow, comment="If Flag & 1 then count is > 1">;
    int KeysOffset <format=hex, fgcolor=cRed, bgcolor=cDkYellow, comment="If Flag & 1 then count exists, 0x08 Stride">;
    byte padding[0x24] <bgcolor=cDkYellow>;


    local int n = 0;
    for (n = 0; n < KeyCount; n++)
    {
        FSeek(BasePos + KeysOffset + (n * 8));
        ImageMetadataKey Key;
    }

    if (NameOffset != 0)
    {
        FSeek(NameOffset);
        string Name;
    }
} MaterialDefinition;

typedef struct
{
    int StringOffset <fgcolor=cRed, format=hex>;
    int UnkIndex <fgcolor=cYellow, comment="0 to 1?">;
    FSeek(BasePos + StringOffset);
    string Name;
} Material2Name;

typedef struct
{
    int ShaderEntrySearchNameOffset <comment="For Shaders offset 0x3C", fgcolor=cRed, format=hex, bgcolor=cLtGray>;
    int ShaderEntryIndex <comment="For Shaders offset 0x3C", fgcolor=cYellow, bgcolor=cLtGray>;
    int _empty_ <bgcolor=cLtGray>;
    int UnkOffset <format=hex, fgcolor=cRed, bgcolor=cLtGray>;
    short CountForParent0x24 <bgcolor=cLtGray>;
    short UnkCount2 <bgcolor=cLtGray>;
    int UnkOffset <format=hex, fgcolor=cRed, bgcolor=cLtGray>;
    int KeyCount <bgcolor=cLtGray>;
    int KeyOffset <format=hex, fgcolor=cRed, bgcolor=cLtGray>;

    FSeek(BasePos + ShaderEntrySearchNameOffset);
    string ShaderRefName;
} MaterialData0x14;

typedef struct
{
    int DataCount;
    int DataOffset <fgcolor=cRed, format=hex>;
} Material2Unk;

typedef struct
{
    int NameOffset <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="Own Thing">;
    int UnkIndex <fgcolor=cYellow, bgcolor=cDkGray>;  
    byte Unk <bgcolor=cDkGray>;
    byte Version <bgcolor=cDkGray>;
    short KeysCount <fgcolor=cGreen, bgcolor=cDkGray>;
    int UnkOffset0x0C <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="Own Thing">;
    if (Version == 0)
    {
        int UnkOffset0x10 <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="If Version == 0, 0x08 Strides">;
        FSkip(0x10);
        int UnkOffset0x24 <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="If Version == 0, 0x20 Strides">;
        /**(undefined2 *)(this->field_0x24 + 0x14) = 0xffff;
          *(undefined2 *)(this->field_0x24 + 0x16) = 0xffff;
          *(undefined2 *)(this->field_0x24 + 0x18) = 0xffff; */
    }
    else if (Version == 1)
    {
        int UnkOffset0x10 <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="If Version == 1, 0x08 Strides">;
        FSkip(0x04);
        int UnkOffset0x18 <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="If Version == 1, Own Thing">;
        int UnkOffset0x1C <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="If Version == 1, Own Thing">;
        int UnkOffset0x20 <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="If Version == 1, Own Thing">;
        int UnkOffset0x24 <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="If Version == 1, Own Thing">;
    }
    else if (Version == 2)
    {
        int KeysOffset <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="If Version == 2, Own Thing">;
        int UnkOffset0x14 <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="If Version == 2, Own Thing">;
        int UnkOffset0x18 <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="If Version == 2, 0x08 Strides">;
        int UnkOffset0x1C <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="If Version == 2, Own Thing">;
        short _empty_ <bgcolor=cDkGray>;
        short Count0x18 <fgcolor=cGreen, bgcolor=cDkGray>;
        int UnkOffset0x24 <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="Same as 0x14 - Stride 0x20 - If Version == 2">;
        /* if (this->field_0x10 == 0x0) {
            this->field_0x10 = *(int *)(this->field_0x14 + 0x1c); */

        local int n = 0;
        for (n = 0; n < KeysCount; n++)
        {
            FSeek(BasePos + KeysOffset + (n * 8));
            Material2Name ElementKey;
        }

        FSeek(BasePos + UnkOffset0x14);
        MaterialData0x14 unk0x14;

        FSeek(BasePos + UnkOffset0x18);
        Material2Unk unk0x18;

        if (UnkOffset0x1C > 0)
        {
    
        }

        if (UnkOffset0x24 != 0)
        {
            FSeek(BasePos + UnkOffset0x24);
            struct
            {
                int a;
                int b;
                int c;
                int d <format=hex>;
                int e <format=hex>;
                int f;
                int g <format=hex>;
                int h;

            } MaterialData0x24;
        }
    }

    if (NameOffset > 0)
    {
        FSeek(BasePos + NameOffset);
        string Name <comment="Used when addressing shaders (to shaders's defs 0x1C)">;
    }

    if (UnkOffset0x0C > 0)    
    {
        FSeek(BasePos + UnkOffset0x0C);
        float unkFloats0x0C[8] <fgcolor=cLtBlue>;
    }
} MaterialData;


typedef struct
{
    ushort MaterialCount <fgcolor=cGreen>;
    ushort MaterialDataCount_0x0C <fgcolor=cGreen>;
    byte unk;
    byte CellGcmParamCount_0x10 <fgcolor=cGreen>;
    ushort TextureParameterCount <fgcolor=cGreen>;
    uint MaterialsOffset <format=hex, fgcolor=cRed, comment="0x34 Stride">;
    uint MaterialDataOffset_0x0C <format=hex, fgcolor=cRed, comment="0x28 Stride">;
    uint CellGcmParamsOffset_0x10 <format=hex, fgcolor=cRed, comment="Own Thing, If Version < 13">;
    uint TextureParameterMapOffset <format=hex, fgcolor=cRed, comment="0x44 Stride">;

    local int j = 0;
    if (MaterialCount > 0)
    {
        struct 
        {
            for (j = 0; j < MaterialCount; j++)
            {
                FSeek(BasePos + MaterialsOffset + (j * 0x34));
                MaterialDefinition Definition <comment="0x34 Stride">;
            }
        } MaterialDefinitions;
    }

    local int cPos = FTell();
    if (MaterialDataCount_0x0C > 0)
    {
        struct
        {
            for (j = 0; j < MaterialDataCount_0x0C; j++)
            {
                FSeek(BasePos + MaterialDataOffset_0x0C + (j * 0x28));
                MaterialData entry;
            
                FSeek(cPos);
            }
        } MaterialDataEntries;
    }

    cPos = FTell();

    FSeek(BasePos + CellGcmParamsOffset_0x10);

#define	CELL_GCM_NV4097_SET_SURFACE_CLIP_VERTICAL	(0x00000204)
#define	CELL_GCM_NV4097_SET_ALPHA_TEST_ENABLE	(0x00000304)
#define	CELL_GCM_NV4097_SET_DEPTH_FUNC	(0x00000a6c)
#define	CELL_GCM_NV4097_SET_CULL_FACE_ENABLE	(0x0000183c)

    if (CellGcmParamCount_0x10 > 0)
    {
        struct
        {
            struct
            {
                CELL_GCM_METHOD method;
                int enable;
            } CELL_GCM_METHOD_SET_ALPHA_TEST_ENABLE;
    
            CELL_GCM_ENUM AlphaFunc;
            int AlphaFuncReference <format=hex>;
    
            CELL_GCM_ENUM BlendEnable;
            CELL_GCM_ENUM BlendFuncSfColor : 16;
            CELL_GCM_ENUM BlendFuncDfColor : 16;
            CELL_GCM_ENUM BlendFuncSfAlpha : 16;
            CELL_GCM_ENUM BlendFuncDfAlpha : 16;
            int BlendColor <format=hex>;
            CELL_GCM_ENUM BlendEquationColor : 16;
            CELL_GCM_ENUM BlendEquationAlpha : 16;
    
            struct
            {
                byte CELL_GCM_COLOR_MASK_A;
                byte CELL_GCM_COLOR_MASK_R;
                byte CELL_GCM_COLOR_MASK_G;
                byte CELL_GCM_COLOR_MASK_B;
            } ColorMask;
        
            int StencilTest;
            int StencilMask;
            CELL_GCM_ENUM StencilFunc;
            CELL_GCM_ENUM StencilFuncRef;
            CELL_GCM_ENUM StencilFuncMask;
            CELL_GCM_ENUM StencilOpFail;
            CELL_GCM_ENUM StencilOpZFail;
            CELL_GCM_ENUM StencilOpZPass;
    
            int TwoSidedStencilTestEnable;
            int BackStencilMask;
            CELL_GCM_ENUM BackStencilFunc;
            int BackStencilFuncRef;
            int BackStencilFuncMask;
            CELL_GCM_ENUM BackStencilOpFail;
            CELL_GCM_ENUM BackStencilOpZFail;
            CELL_GCM_ENUM BackStencilOpZPass;
    
            CELL_GCM_ENUM ShadeMode; // SetShadeMode
    
            int BlendEnableMRT;
            int ColorMaskMRT; // SetColorMaskMrt
    
            CELL_GCM_ENUM LogicOpEnable;
            CELL_GCM_ENUM LogicOp;
    
            struct
            {
                CELL_GCM_METHOD method;
                CELL_GCM_ENUM depth_func;
            } CELL_GCM_METHOD_SET_DEPTH_FUNC;
            
            CELL_GCM_ENUM DepthMask;
            CELL_GCM_ENUM DepthTestEnable;
    
            struct
            {
                CELL_GCM_METHOD method;
                int enable;
            } CELL_GCM_METHOD_SET_CULL_FACE_ENABLE;
    
            int unk;
        
            byte unk : 4;
            byte unk2 : 4;
    
            byte unk;
            short unk;
    
            int unk;
        } CellGcmParams[CellGcmParamCount_0x10] <comment="Order is heavily inspired from cell\gcm\gcm_macros.h">;
    }

    FSeek(FileSize());

    if (TextureParameterCount > 0)
    {
        struct
        {
            FSeek(BasePos + TextureParameterMapOffset);
            PGLUTextureInfo TextureParameter[TextureParameterCount];
    
            FSeek(FileSize());
        } TextureParameters <comment="May have more entries than images, but image ids will fit the TXS count and will have different parameters such as Aniso">;
    }

 } MaterialMap;
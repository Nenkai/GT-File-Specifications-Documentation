//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef enum <ubyte>
{    
    StackPushFromStackIndex0x10 = 0x10,
    StackPushConstInt0x11 = 0x11,
    StackPushValueFromStorageIdx0x12 = 0x12,
    StackAssignPop0x13 = 0x13,
    StackAssignPop = 0x14,

    JumpToByte = 0x20,
    JumpUnk0x21 = 0x21,
    JumpToShort = 0x22,
    JumpIfFalse = 0x23,
    JumpUnk0x24 = 0x24,
    JumpUnk0x25 = 0x25,
    JumpIfFalse0x26 = 0x26,
    JumpUnk0x27 = 0x27,
    JumpUnk0x28 = 0x28,

    Add = 0x30,
    Subtract = 0x31,
    Multiply = 0x32,
    Divide = 0x33,
    Modulo = 0x34,
    LesserThan = 0x35,
    LesserOrEqualTo = 0x36,
    GreaterThen = 0x37,
    GreaterOrEqualTo = 0x38,
    Equals = 0x39,
    NotEqual = 0x3A,
    UnaryMinusOperator = 0x3B,
    ToFloat = 0x3C,

    BinaryAndOperator = 0x40,
    BinaryOrOperator = 0x41,
    BinaryXorOperator = 0x42,
    BinaryLeftShiftOperator = 0x44,
    BinaryRightShiftOperator = 0x45,
    UnaryBitwiseNotOperator = 0x46,

    FloatAddition = 0x80,
    FloatSubtract = 0x81,
    FloatMultiply = 0x82,
    FloatDivide = 0x83,
    FloatMod = 0x84,
    FloatLesserThan = 0x85,
    FloatLesserOrEqualTo = 0x86,
    FloatGreaterThen = 0x87,
    FloatGreaterOrEqualTo = 0x88,
    FloatEquals = 0x89,
    FloatNotEquals = 0x8A,
    FloatUnaryMinusOperator = 0x8B,
    FloatToInt = 0x8C,

    FloatRand = 0xA0,
    FloatSin = 0xA1,
    FloatCos = 0xA2,
    FloatTan = 0xA3,
    FloatSquare = 0xA4,
    FloatCosUnk = 0xA5,
    FloatSign = 0xA6, // Not in GT PSP
    
    FloatPow = 0xB0,
    FloatAtan2 = 0xB1,
    FloatUnk0xB2 = 0xB2,

    FloatMin = 0xB3, // Not in GT PSP
    FloatMax = 0xB4, // Not in GT PSP

    UnkCall0xC0 = 0xC0,
    UnkCall0xC1 = 0xC1,
    Unk0xC2 = 0xC2, // Not in GT PSP
    Unk0xC3 = 0xC3, // Not in GT PSP
    Unk0xC4 = 0xC4, // Not in GT PSP
    Unk0xC5 = 0xC5, // Not in GT PSP
    Unk0xC6 = 0xC6, // Not in GT PSP
} VMInstructionType;

typedef struct
{
    VMInstructionType opcode <fgcolor=cLtRed>;

    switch (opcode)
    {
        case 0x10:
            struct
            {
                short Value;

            } Ins16Unk;
            break;

        case 0x11:
            struct
            {
                int Value;
            } InsIntConst17;
            break;

        case 0x12:
            struct
            {
                short Index : 15;
                byte unk : 1;
            } Ins18;
            break;

        case 0x13:
            struct
            {
                short Value;
                                
            } Ins19Unk;
            break;

        case 0x14:
            struct
            {
                short index;
            } Ins20PopMaybe;
            break;

        case 0x20:
            struct
            {
                byte unk;
            } Ins32Unk;
            break;

        case 0x23:
            struct
            {
                byte unk;
            } Ins35Unk;
            break;

        case 0x24:
            struct
            {
                short JumpOffset;
            } InsJump;
            break;

         case 0x25:
            struct
            {
                short unk;
            } Ins37Unk;
            break;

        case 0x26:
            struct
            {
                short JumpOffset;
            } InsJumpIfFalse;
            break;

        case UnkCall0xC0:
            struct
            {
                short Index : 15;
                byte unk : 1;
                short unk;
            } InsUnk0xC0;
            break;
    
        case UnkCall0xC1:
            struct
            {
                short Index : 15;
                byte unk : 1;
                short unk;
            } InsUnk0xC1;
            break;
    }
} VMInstruction;

typedef struct
{
    LittleEndian();
    while (true)
    {
        VMInstruction instruction;
        if (instruction.opcode == 0)
            break;

    }
    SetEndian();

} VMCommands;

//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct
{
    float X;
    float Y;
    float Z;
} Vec3 <fgcolor=cLtBlue>;

typedef struct
{
    float Unk;
    Vec3 Origin;
    byte Unk;
    byte Unk;
    ushort BoundsCount <fgcolor=cGreen>;
    int BoundsOffset <format=hex, fgcolor=cRed>;
    int SPUPayloadOffset <format=hex, fgcolor=cRed, comment="Unknown, mem breakpoint doesnt work, may be SPU related">;
    int SPUPayloadLength <format=hex, fgcolor=cPurple>;
    int Unk;
    int Unk;
    int Unk;
    short Unk;
    short Unk1;
   
    FSeek(BasePos + BoundsOffset);
    Vec3 Bounds[BoundsCount];

    FSeek(BasePos + SPUPayloadOffset);

    local int counter = 0;
    while (true)
    {
        struct
        {
            byte opcode;
            if (opcode == 0)
                break;

            if (opcode == 0x4B)
            {
                byte Count;
                short MeshIndices[Count];
                int UnkIndex;
            }
            else if (opcode == 0x3B)
            {
                byte Unk;
                byte Unk2;
            }
            else if (opcode == 0x3C)
            {
                int Unk;
            }
            else
                Printf("Unrecognized opcode %d\n", opcode);
        } Payload <optimize=false, bgcolor=cBlack>;

        if (Payload[counter].opcode == 0 || 
            (Payload[counter].opcode != 0x4B && 
            Payload[counter].opcode != 0x3B &&
            Payload[counter].opcode != 0x3C))
            break;
        counter++;
    }
} ModelInfo <optimize=false>;
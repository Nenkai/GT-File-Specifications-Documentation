//------------------------------------------------
//--- 010 Editor v10.0.2 Binary Template
//
//      File: TXS3 Gran Turismo Image Header Specifics
//   Authors: Nenkai#9075
//   Version: 1.0
//   Purpose: Texture Files
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "CellEnums.bt"

string PrintFormat(ubyte& format)
{
    string str = "";
    local CELL_GCM_TEXTURE_FORMAT actualFormat = format & 0b10011111;
    SPrintf(str, "%s (0x%x)", EnumToString(actualFormat), actualFormat);

    local int bit = (format >> 5) & 1;
    str += bit != 0 ? " - CELL_GCM_TEXTURE_LN (Bit 6)" : " - CELL_GCM_TEXTURE_SZ (Bit 6)";

    bit = (format >> 6) & 1;
    str += bit != 0 ? " - CELL_GCM_TEXTURE_UN (Bit 5)" : " - CELL_GCM_TEXTURE_NR (Bit 5)";
    return str;
}

typedef struct 
{
    BitfieldDisablePadding();
    struct
    {
        CELL_GCM_METHOD offset <comment="Normally CELL_GCM_NV4097_SET_TEXTURE_OFFSET aka 0x1A00 + (index * 0x20)">;
    } CELL_GCM_METHOD_HEADER_TEXTURE_OFFSET;

    // CELL_GCM_METHOD_DATA_TEXTURE_OFFSET
    struct
    {
        uint offset <format=hex>;
    } CELL_GCM_METHOD_DATA_TEXTURE_OFFSET;

    struct
    {
        byte pad;
        byte mipmap;
        ubyte format : 8 <comment=PrintFormat>;
        CELL_GCM_TEXTURE_DIMENSION dimension : 4;
        CELL_GCM_TEXTURE_BORDER border : 1;
        CELL_GCM_BOOL cubemap : 1 <comment="whether cube map is enabled">;
        CELL_GCM_LOCATION location : 2 <comment="Remove 1. fragment program location, 0 = local memory, 1 = main memory">;
    } CELL_GCM_METHOD_DATA_TEXTURE_BORDER_FORMAT;

    struct
    {
        CELL_GCM_TEXTURE_ZFUNC zfunc : 4;
        byte gamma : 8;
        CELL_GCM_TEXTURE_WRAP wrap_r : 4;
        CELL_GCM_TEXTURE_UNSIGNED_REMAP unsignedRemap : 4;
        CELL_GCM_TEXTURE_WRAP wrap_t : 4 <comment="adjustment when the T coordinate exceeds the texture size">;
        byte anisoBias : 4;
        CELL_GCM_TEXTURE_WRAP wrap_s : 4 <comment="adjustment when the S coordinate exceeds the texture size">;
    } CELL_GCM_METHOD_DATA_TEXTURE_ADDRESS;

    struct
    {
        CELL_GCM_BOOL enable : 1 <comment="stipple polygon rendering">;
        short minlod : 12;
        short maxlod : 12;
        CELL_GCM_TEXTURE_MAX_ANISO maxAniso : 3;
        byte pad : 1;
        CELL_GCM_BOOL alphakill : 1;
        byte pad : 2;
    } CELL_GCM_METHOD_DATA_TEXTURE_CONTROL0_ALPHA_KILL;
    
    struct
    {
        int pad : 15;
        CELL_GCM_TEXTURE_REMAP_ORDER remapOrder : 1;
        CELL_GCM_TEXTURE_REMAP_OUT OutB : 2;
        CELL_GCM_TEXTURE_REMAP_OUT OutG : 2;
        CELL_GCM_TEXTURE_REMAP_OUT OutR : 2;
        CELL_GCM_TEXTURE_REMAP_OUT OutA : 2;
        CELL_GCM_TEXTURE_REMAP_FROM InB : 2;
        CELL_GCM_TEXTURE_REMAP_FROM InG : 2;
        CELL_GCM_TEXTURE_REMAP_FROM InR : 2;
        CELL_GCM_TEXTURE_REMAP_FROM InA : 2;
    } CELL_GCM_METHOD_DATA_TEXTURE_CONTROL1;

    struct
    {
        CELL_GCM_BOOL bs : 1;
        CELL_GCM_BOOL gs : 1;
        CELL_GCM_BOOL rs : 1;
        CELL_GCM_BOOL as : 1;
        CELL_GCM_TEXTURE_MAG mag : 4 <comment="filter type for texture reduction">;
        CELL_GCM_TEXTURE_MIN min : 8 <comment="filter type for texture enlargement">;
        CELL_GCM_TEXTURE_CONVOLUTION convultion : 3 <comment="convolution filter formula">;
        short bias : 13 <comment="bias value for mipmap level in texture reductions">;
    } CELL_GCM_METHOD_DATA_TEXTURE_FILTER_SIGNED;

    struct
    {
        ushort width;
        ushort height;
    } CELL_GCM_METHOD_DATA_TEXTURE_IMAGE_RECT;

    struct
    {
        uint borderColor;
    } CELL_GCM_METHOD_DATA_TEXTURE_BORDER_COLOR;

    struct
    {
        CELL_GCM_METHOD method <comment="Normally CELL_GCM_METHOD_ADDRESS_TEXTURE_CONTROL3 aka 0x1840 + (index * 4)">;
    } CELL_GCM_METHOD_HEADER_TEXTURE_CONTROL3;

    struct
    {
        uint depth : 12;
        uint pitch : 20;
    } CELL_GCM_METHOD_DATA_TEXTURE_CONTROL3;

    struct
    {
        CELL_GCM_METHOD method <comment="Normally CELL_GCM_METHOD_ADDRESS_TEXTURE_CONTROL2 aka 0xb00 + (index * 4)">;
    } CELL_GCM_METHOD_HEADER_TEXTURE_CONTROL2;

    struct
    {
        int _0x2D : 24 <format=hex, comment="Should always be 0x2D">;
        CELL_GCM_TEXTURE_ANISO aniso : 1;
        CELL_GCM_TEXTURE_ISO iso : 1;
        int slope : 6;
    } CELL_GCM_METHOD_DATA_TEXTURE_CONTROL2;

    uint reserved0;
    uint reserved1;
    uint ImageID;
    uint ImageNameOffset <format=hex, fgcolor=cRed>;

    local int cPos = FTell();
    if (ImageNameOffset != 0)
    {
        FSeek(ImageNameOffset);
        string ImageName <bgcolor=cGray>;
    }
    FSeek(cPos);

} PGLUTextureInfo <bgcolor=cYellow, optimize=false>;

typedef struct 
{
    int unk <format=hex, comment="Always 0">;
    int StreamOffset <format=hex, fgcolor=cRed>;
    int CompressedSize <format=hex, fgcolor=cDkGreen>;
    int UncompressedSize <format=hex, fgcolor=cGreen>;
} StreamTextureMapInfo <optimize=false, bgcolor=cDkPurple>;

typedef struct StreamTextureMapSet
{
   int StreamTextureMapOffset <format=hex>;
   int ImageInfoCount <fgcolor=cGreen>;
   int unk;
   int TotalUncompressedSetSize <format=hex>;
   short unk;
   short Width;
   short Width2;
   short unk2;
   int _pad_[2];
   
   local int cPos = FTell();
   FSeek(StreamTextureMapOffset);
   StreamTextureMapInfo streamFileInfo[ImageInfoCount];
   FSeek(cPos);
} StreamMap <bgcolor=cLtBlue, bgcolor=cPurple>;

typedef struct
{
    uint ImageOffset <format=hex, fgcolor=cRed>;
    uint ImageSize <format=hex>;
    byte _two_; // 0x20 flag when running
    ubyte ImageFormat : 8 <comment=PrintFormat>;
    byte MipmapCount;
    byte _two2_;
    ushort ImageWidth;
    ushort ImageHeight;
    ushort Unk;
    ushort Unk2;

    int pad;
    int StreamTextureMapSetOffset <format=hex, fgcolor=cRed>;
    int pad;

    local int cPos = FTell();
    if (StreamTextureMapSetOffset != 0)
    {
        FSeek(StreamTextureMapSetOffset);
        StreamMap map;
    }

    FSeek(cPos);
} ImageData <optimize=false>;

typedef struct (int arrSize)
{
    ImageData images[arrSize];
} ImageDataMap <bgcolor=cDkGreen>;

// Main header is 0x40
struct TXS3 {
    char Magic[4];
    if (Magic[0] == '3')
        LittleEndian();
    else
        BigEndian();

    uint FileSize <format=hex>;
    uint BaseFilePos <format=hex>;
    uint HeaderSizeMaybe;
    uint Unk2 <comment="Related to UnkOffset">;
    ushort PGLUTextureInfoCount;
    ushort TexturemageInfoCount;
    uint PGLUTextureInfoOffset <format=hex, fgcolor=cRed>;
    uint TextureInfoOffset <format=hex, fgcolor=cRed>;

    int UnkOffset <format=hex>;

    FSeek(PGLUTextureInfoOffset);
    PGLUTextureInfo textureInfos[PGLUTextureInfoCount];

    FSeek(TextureInfoOffset);
    ImageDataMap data(TexturemageInfoCount);
} TextureSet3;

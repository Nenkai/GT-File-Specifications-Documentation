//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct
{
    int Flag <comment="0, 0x248, 0x24C">;
    int ShapeStreamDataOffset <format=hex, fgcolor=cPurple>;
    int ShapeStreamDataSize <format=hex, fgcolor=cGreen>;
    int UnkOffset0x10 <format=hex, fgcolor=cRed>;
    short UnkCount0x10 <fgcolor=cGreen>;
    byte _pad_[0x0E] <fgcolor=cGray>;

    FSeek(BasePos + UnkOffset0x10);
    struct
    {
        uint OffsetWithinShapeStream <fgcolor=cRed>;
        short MeshIndex <fgcolor=cYellow>;
        short Unk;
    } ShapeStreamMeshEntry[UnkCount0x10];
    
} ShapeStreamOffsetEntry;

typedef struct
{
    int IndicesOffset <format=hex, fgcolor=cRed>;
    short IndicesCount;
    byte _empty_2[0x0A];

    FSeek(BasePos + IndicesOffset);
    int ShapeStreamIndices[IndicesCount]  <comment="To First Map">;
} UnkMap0xACEntry2;


typedef struct
{
    int ShapeStreamInfoCount <fgcolor=cGreen>;
    int ShapeStreamInfoOffset <format=hex, fgcolor=cRed>;
    int Unk <fgcolor=cGreen>;
    int UnkOffset0x0C <format=hex, fgcolor=cRed>;
    int _empty_[3];
    short Count0x0C <fgcolor=cGreen>;
    short a;

    local int n = 0;
    struct
    {
        local int n = 0;
        for (n = 0; n < ShapeStreamInfoCount; n++)
        {
            FSeek(BasePos + ShapeStreamInfoOffset + (n * 0x20));
            ShapeStreamOffsetEntry shapeStreamEntry;
        }
    } ShapeStreamOffsetMap;

    struct
    {
        local int n = 0;
        for (n = 0; n < Count0x0C; n++)
        {
            FSeek(BasePos + UnkOffset0x0C + (n * 0x10));
            UnkMap0xACEntry2 entries2;
        }
    } UnkMap0xAC_Map0x0C;
    
} UnkMap0xAC;
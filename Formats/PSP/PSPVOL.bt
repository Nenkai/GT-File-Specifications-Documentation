//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: GT PSP Volume Header & TOC (Needs decrypted header)
//   Authors: Nenkai#9075
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

LittleEndian();
BitfieldDisablePadding();

typedef struct
{    
    ubyte stringLength;
    local int stringLengthLocal = stringLength;
    if (stringLength > 127)
    {
      ubyte stringLength2;
      if (stringLength2 > 127)
      {
         ubyte stringLength3;
         if (stringLength3 > 127)
         {
           ubyte stringLength4;
         }
       }
     }
} _7BitInt;

uint Align(uint x, uint alignment)
{
     local uint mask = ~(alignment - 1);
     return (x + (alignment - 1)) & mask;
}

const int BlockSize = 0x800;

typedef struct
{
    int offset : 12 <format=hex, fgcolor=cRed>;
} EntryOffset <read=Str("%x", offset)>;

typedef enum <byte>
{
  	File,
    Directory,
} EntryType;

typedef enum <byte>
{
  	Uncompressed,
    Compressed,
} CompressionType;

typedef struct (byte isIndexBlock)
{
    if (isIndexBlock)
    {
        uint SubFolderIndexMajor : 8;
    }
    else
    {   
        EntryType Type : 1 <fgcolor=cYellow>;
        CompressionType CompressionBit : 1;
        uint SubFolderIndexMajor : 6;
    }
    
    byte StrLen <fgcolor=cGreen, comment="This should be a 7bit int, but for template simplifying reasons this is left as a byte">;
    char Name[StrLen] <bgcolor=cGray>;

    if (isIndexBlock)
        uint SubFolderIndexMinor : 8 <comment="Ignore if last entry" ,fgcolor=cLtBlue>;
    else
    {
        if (Type == File)
        {
            _7BitInt FileOffset;
            if (CompressionBit == Compressed)
                _7BitInt CompressedSize;
            _7BitInt UncompressedSize;
        }
        else
           uint SubFolderIndexMinor : 8;
    }
} Entry <read=Str("%s '%s' %s", (exists(Type) && Type == File ? "FILE" : "DIR"), Name,
     exists(SubFolderIndexMajor) && exists(SubFolderIndexMinor) ? Str("(child page: %d)", ((SubFolderIndexMajor << 8) | SubFolderIndexMinor)) : "") >;

typedef struct 
{
    local int basePos = FTell();

    byte IsIndexPage : 1;
    short EntryCount : 11 <fgcolor=cGreen>;
    
    local int i = 0;
    if (EntryCount - 1 > 0)
        EntryOffset EntryOffsets[EntryCount -1] <optimize=false, format=hex, fgcolor=cRed>;

    FSeek(FTell()); // Align
    for (i = 0; i < EntryCount; i++)
    {
        if (i != 0)
            FSeek(basePos + EntryOffsets[i - 1].offset);
        Entry Entry_ (IsIndexPage);
    }

    local int newPos = Align(FTell(), 0x40);
    if (newPos - FTell() > 0)
        byte garbage[newPos - FTell()] <hidden=true, fgcolor=cDkGray, bgcolor=cDkGray>;
    
} BTreePage <read=Str("%s%d entries", IsIndexPage ? "[Index] " : "", EntryCount)>;
struct PSPVol
{
    struct
    {
        int Magic <format=hex>;
        int DEADBEEF <format=hex>;
        int64 Date;
        int ToCBlockOffset <fgcolor=cYellow>;
        int FileDataBlockOffset <fgcolor=cYellow>;
        int ToCPageCount <fgcolor=cGreen>;
        int ToCLength <format=hex, fgcolor=cRed>;
        int UnkSize;
    } Header <bgcolor=cPurple>;

    struct TOC
    {
        local int actualToCOffset = (1 + Header.ToCBlockOffset) * BlockSize;
        FSeek(actualToCOffset);
        
        ushort PageOffsets[Header.ToCPageCount] <bgcolor=cRed>;
        local int i = 0;
        for (i; i < Header.ToCPageCount - 1; i++)
        {
            FSeek(actualToCOffset + PageOffsets[i] * 0x40);
            BTreePage Page;
        }

    } TableOfContents <open=true>;
} Volume <open=true>;

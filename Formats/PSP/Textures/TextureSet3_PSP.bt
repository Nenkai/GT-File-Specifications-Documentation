//------------------------------------------------
//--- 010 Editor v15.0 Binary Template
//
//      File: Gran Turismo TextureSet3 (PSP)
//   Authors: Nenkai
//   Version: 1.0
//   Purpose: Textures (PSP Version)
//  Category: 
// File Mask: *.img,*.txs
//  ID Bytes: 33 53 58 54
//   History: 
//------------------------------------------------

enum SCE_GE_TMAP_TMN
{
    SCE_GE_TMAP_TMN_UV			= 0,
    SCE_GE_TMAP_TMN_PROJECTION	= 1,
    SCE_GE_TMAP_TMN_SHADE		= 2,
};

enum SCE_GE_TMAP_TMI
{
    SCE_GE_TMAP_TMI_XYZ			           = 0,
    SCE_GE_TMAP_TMI_UV	                   = 1,
    SCE_GE_TMAP_TMI_NORMALIZED_NORMAL	   = 2,
    SCE_GE_TMAP_TMI_NORMAL	               = 3,
};

enum eSCE_GE_TPF
{
    SCE_GE_TPF_5650		= 0,
    SCE_GE_TPF_5551		= 1,
    SCE_GE_TPF_4444		= 2,
    SCE_GE_TPF_8888		= 3,
    SCE_GE_TPF_IDTEX4	= 4,
    SCE_GE_TPF_IDTEX8	= 5,
    SCE_GE_TPF_IDTEX16	= 6,
    SCE_GE_TPF_IDTEX32	= 7,
    SCE_GE_TPF_DXT1		= 8,
    SCE_GE_TPF_DXT3		= 9,
    SCE_GE_TPF_DXT5		= 10,
};

enum SCE_GE_CMD
{
    SCE_GE_CMD_NOP = 0,
	SCE_GE_CMD_VADR = 0x1,
	SCE_GE_CMD_IADR = 0x2,
	SCE_GE_CMD_PRIM = 0x4,
	SCE_GE_CMD_BEZIER = 0x5,
	SCE_GE_CMD_SPLINE = 0x6,
	SCE_GE_CMD_BBOX = 0x7,
	SCE_GE_CMD_JUMP = 0x8,
	SCE_GE_CMD_BJUMP = 0x9,
	SCE_GE_CMD_CALL = 0xA,
	SCE_GE_CMD_RET = 0xB,
	SCE_GE_CMD_END = 0xC,
	SCE_GE_CMD_SIGNAL = 0xE,
	SCE_GE_CMD_FINISH = 0xF,
	SCE_GE_CMD_BASE = 0x10,
	SCE_GE_CMD_VTPE = 0x12, // Vertex Type
	SCE_GE_CMD_OFFSET = 0x13,
	SCE_GE_CMD_ORIGIN = 0x14,
	SCE_GE_CMD_REGION1 = 0x15,
	SCE_GE_CMD_REGION2 = 0x16,
	SCE_GE_CMD_LTE = 0x17, // LIGHTINGENABLE
	SCE_GE_CMD_LE0 = 0x18, // LIGHTENABLE0
	SCE_GE_CMD_LE1 = 0x19,
	SCE_GE_CMD_LE2 = 0x1A,
	SCE_GE_CMD_LE3 = 0x1B,
	SCE_GE_CMD_CLE = 0x1C, // DEPTHCLAMPENABLE
	SCE_GE_CMD_BCE = 0x1D, // CULLFACEENABLE
	SCE_GE_CMD_TME = 0x1E, // TEXTUREMAPENABLE
	SCE_GE_CMD_FGE = 0x1F, // FOGENABLE
	SCE_GE_CMD_DTE = 0x20, // DITHERENABLE
	SCE_GE_CMD_ABE = 0x21, // ALPHABLENDENABLE
	SCE_GE_CMD_ATE = 0x22, // ALPHATESTENABLE
	SCE_GE_CMD_ZTE = 0x23, // ZTESTENABLE
	SCE_GE_CMD_STE = 0x24, // STENCILTESTENABLE
	SCE_GE_CMD_AAE = 0x25, // ANTIALIASENABLE
	SCE_GE_CMD_PCE = 0x26, // PATCHCULLENABLE
	SCE_GE_CMD_CTE = 0x27, // COLORTESTENABLE
	SCE_GE_CMD_LOE = 0x28, // LOGICOPENABLE
	SCE_GE_CMD_BONEN = 0x2A, // BONEMATRIXNUMBER
	SCE_GE_CMD_BONED = 0x2B, // BONEMATRIXDATA
	SCE_GE_CMD_WEIGHT0 = 0x2C, // SCE_GE_CMD_WEIGHT0
	SCE_GE_CMD_WEIGHT1 = 0x2D,
	SCE_GE_CMD_WEIGHT2 = 0x2E,
	SCE_GE_CMD_WEIGHT3 = 0x2F,
	SCE_GE_CMD_WEIGHT4 = 0x30,
	SCE_GE_CMD_WEIGHT5 = 0x31,
	SCE_GE_CMD_WEIGHT6 = 0x32,
	SCE_GE_CMD_WEIGHT7 = 0x33,
	SCE_GE_CMD_DIVIDE = 0x36, // PATCHDIVISION
	SCE_GE_CMD_PPM = 0x37, // PATCHPRIMITIVE
	SCE_GE_CMD_PFACE = 0x38, // PATCHFACING
	SCE_GE_CMD_WORLDN = 0x3A, // WORLDMATRIXNUMBER
	SCE_GE_CMD_WORLDD = 0x3B, // WORLDMATRIXDATA
	SCE_GE_CMD_VIEWN = 0x3C, // VIEWMATRIXNUMBER
	SCE_GE_CMD_VIEWD = 0x3D, // VIEWMATRIXDATA
	SCE_GE_CMD_PROJN = 0x3E, // PROJMATRIXNUMBER
	SCE_GE_CMD_PROJD = 0x3F, // PROJMATRIXDATA
	SCE_GE_CMD_TGENN = 0x40, // TGENMATRIXNUMBER
	SCE_GE_CMD_TGEND = 0x41, // TGENMATRIXDATA
	SCE_GE_CMD_SX = 0x42, // VIEWPORTXSCALE
	SCE_GE_CMD_SY = 0x43, // VIEWPORTYSCALE
	SCE_GE_CMD_SZ = 0x44, // VIEWPORTZSCALE
	SCE_GE_CMD_TX = 0x45, // VIEWPORTXCENTER
	SCE_GE_CMD_TY = 0x46, // VIEWPORTYCENTER
	SCE_GE_CMD_TZ = 0x47, // VIEWPORTZCENTER
	SCE_GE_CMD_SU = 0x48, // TEXSCALEU
	SCE_GE_CMD_SV = 0x49, // TEXSCALEV
	SCE_GE_CMD_TU = 0x4A, // TEXOFFSETU
	SCE_GE_CMD_TV = 0x4B, // TEXOFFSETV
	SCE_GE_CMD_OFFSETX = 0x4C,
	SCE_GE_CMD_OFFSETY = 0x4D,
	SCE_GE_CMD_SHADE = 0x50,  // SHADEMODE
	SCE_GE_CMD_NREV = 0x51, // REVERSENORMAL
	SCE_GE_CMD_MATERIAL = 0x53, // MATERIALUPDATE
	SCE_GE_CMD_MEC = 0x54, // MATERIALEMISSIVE
	SCE_GE_CMD_MAC = 0x55, // MATERIALAMBIENT
	SCE_GE_CMD_MDC = 0x56, // MATERIALDIFFUSE
	SCE_GE_CMD_MSC = 0x57, // MATERIALSPECULAR
	SCE_GE_CMD_MAA = 0x58, // MATERIALALPHA
	SCE_GE_CMD_MK = 0x5B, // MATERIALSPECULARCOEF
	SCE_GE_CMD_AC = 0x5C, // AMBIENTCOLOR
	SCE_GE_CMD_AA = 0x5D, // AMBIENTALPHA
	SCE_GE_CMD_LMODE = 0x5E, // LIGHTMODE
	SCE_GE_CMD_LTYPE0 = 0x5F, // LIGHTTYPE0
	SCE_GE_CMD_LTYPE1 = 0x60, // LIGHTTYPE1
	SCE_GE_CMD_LTYPE2 = 0x61, // LIGHTTYPE2
	SCE_GE_CMD_LTYPE3 = 0x62, // LIGHTTYPE3
	SCE_GE_CMD_LX0 = 0x63,
	SCE_GE_CMD_LY0,
	SCE_GE_CMD_LZ0,
	SCE_GE_CMD_LX1,
	SCE_GE_CMD_LY1,
	SCE_GE_CMD_LZ1,
	SCE_GE_CMD_LX2,
	SCE_GE_CMD_LY2,
	SCE_GE_CMD_LZ2,
	SCE_GE_CMD_LX3,
	SCE_GE_CMD_LY3,
	SCE_GE_CMD_LZ3,
	SCE_GE_CMD_LDX0 = 0x6F,
	SCE_GE_CMD_LDY0,
	SCE_GE_CMD_LDZ0,
	SCE_GE_CMD_LDX1,
	SCE_GE_CMD_LDY1,
	SCE_GE_CMD_LDZ1,
	SCE_GE_CMD_LDX2,
	SCE_GE_CMD_LDY2,
	SCE_GE_CMD_LDZ2,
	SCE_GE_CMD_LDX3,
	SCE_GE_CMD_LDY3,
	SCE_GE_CMD_LDZ3,
	SCE_GE_CMD_LKA0 = 0x7B,
	SCE_GE_CMD_LKB0,
	SCE_GE_CMD_LKC0,
	SCE_GE_CMD_LKA1,
	SCE_GE_CMD_LKB1,
	SCE_GE_CMD_LKC1,
	SCE_GE_CMD_LKA2,
	SCE_GE_CMD_LKB2,
	SCE_GE_CMD_LKC2,
	SCE_GE_CMD_LKA3,
	SCE_GE_CMD_LKB3,
	SCE_GE_CMD_LKC3,
	SCE_GE_CMD_LKS0 = 0x87,
	SCE_GE_CMD_LKS1,
	SCE_GE_CMD_LKS2,
	SCE_GE_CMD_LKS3,
	SCE_GE_CMD_LKO0 = 0x8b,
	SCE_GE_CMD_LKO1,
	SCE_GE_CMD_LKO2,
	SCE_GE_CMD_LKO3,
	SCE_GE_CMD_LAC0 = 0x8F,
	SCE_GE_CMD_LDC0,
	SCE_GE_CMD_LSC0,
	SCE_GE_CMD_LAC1,
	SCE_GE_CMD_LDC1,
	SCE_GE_CMD_LSC1,
	SCE_GE_CMD_LAC2,
	SCE_GE_CMD_LDC2,
	SCE_GE_CMD_LSC2,
	SCE_GE_CMD_LAC3,
	SCE_GE_CMD_LDC3,
	SCE_GE_CMD_LSC3,
	SCE_GE_CMD_CULL = 0x9B,
	SCE_GE_CMD_FBP = 0x9C, // // FRAMEBUFPTR
	SCE_GE_CMD_FBW = 0x9D, // FRAMEBUFWIDTH
	SCE_GE_CMD_ZBP = 0x9E, // ZBUFPTR
	SCE_GE_CMD_ZBW = 0x9F, // ZBUFWIDTH
	SCE_GE_CMD_TBP0 = 0xA0, // TEXADDR0
	SCE_GE_CMD_TBP1,
	SCE_GE_CMD_TBP2,
	SCE_GE_CMD_TBP3,
	SCE_GE_CMD_TBP4,
	SCE_GE_CMD_TBP5,
	SCE_GE_CMD_TBP6,
	SCE_GE_CMD_TBP7,
	SCE_GE_CMD_TBW0 = 0xA8, // TEXBUFWIDTH0
	SCE_GE_CMD_TBW1,
	SCE_GE_CMD_TBW2,
	SCE_GE_CMD_TBW3,
	SCE_GE_CMD_TBW4,
	SCE_GE_CMD_TBW5,	
	SCE_GE_CMD_TBW6,
	SCE_GE_CMD_TBW7,
	SCE_GE_CMD_CBP = 0xB0, // CLUTADDR
	SCE_GE_CMD_CBW = 0xB1, // CLUTADDRUPPER
	SCE_GE_CMD_XBP1, // TRANSFERSRC
	SCE_GE_CMD_XBW1, // TRANSFERSRCW
	SCE_GE_CMD_XBP2, // TRANSFERDST
	SCE_GE_CMD_XBW2, // TRANSFERDSTW
	SCE_GE_CMD_TSIZE0=0xB8, // TEXSIZE0
	SCE_GE_CMD_TSIZE1,
	SCE_GE_CMD_TSIZE2,
	SCE_GE_CMD_TSIZE3,
	SCE_GE_CMD_TSIZE4,
	SCE_GE_CMD_TSIZE5,
	SCE_GE_CMD_TSIZE6,
	SCE_GE_CMD_TSIZE7,
  SCE_GE_CMD_TMAP = 0xC0, // Texture Map Mode
  SCE_GE_CMD_TSHADE = 0xC1, // Texture Shade Mapping
  SCE_GE_CMD_TMODE = 0xC2, // Texture Mode
  SCE_GE_CMD_TPF = 0xC3, // Texture Pixel Format
  SCE_GE_CMD_CLOAD = 0xC4, // Clut Load
  SCE_GE_CMD_CLUT = 0xC5, // Clut
  SCE_GE_CMD_TFILTER = 0xC6, // Texture Filter
  SCE_GE_CMD_TWRAP = 0xC7, // Texture Wrap Mode
  SCE_GE_CMD_TLEVEL = 0xC8, // texture Level Mode
  SCE_GE_CMD_TFUNC = 0xC9, // Texture Function
  SCE_GE_CMD_TEC = 0xCA, // Texture environment color
  SCE_GE_CMD_TFLUSH = 0xCB, // Texture flush
  SCE_GE_CMD_TSYNC = 0xCC, 
  SCE_GE_CMD_FOG1 = 0xCD,
	SCE_GE_CMD_FOG2 = 0xCE,
	SCE_GE_CMD_FC = 0xCF, // FOGCOLOR
	SCE_GE_CMD_TSLOPE = 0xD0, // TEXLODSLOPE
	SCE_GE_CMD_FPF = 0xD2, // FRAMEBUFPIXFORMAT
	SCE_GE_CMD_CMODE = 0xD3, // CLEARMODE
	SCE_GE_CMD_SCISSOR1 = 0xD4,
	SCE_GE_CMD_SCISSOR2 = 0xD5,
	SCE_GE_CMD_MINZ = 0xD6,
	SCE_GE_CMD_MAXZ = 0xD7,
	SCE_GE_CMD_CTEST = 0xD8, // COLORTEST
	SCE_GE_CMD_CREF = 0xD9, // COLORREF
	SCE_GE_CMD_CMSK = 0xDA, // COLORTESTMASK
	SCE_GE_CMD_ATEST = 0xDB, // ALPHATEST
	SCE_GE_CMD_STEST = 0xDC, // STENCILTEST
	SCE_GE_CMD_SOP = 0xDD, // STENCILOP
	SCE_GE_CMD_ZTEST = 0xDE, // ZTEST
	SCE_GE_CMD_BLEND = 0xDF, // BLENDMODE
	SCE_GE_CMD_FIXA = 0xE0, // BLENDFIXEDA
	SCE_GE_CMD_FIXB = 0xE1, // BLENDFIXEDB
	SCE_GE_CMD_DITH0 = 0xE2,
	SCE_GE_CMD_DITH1,
	SCE_GE_CMD_DITH2,
	SCE_GE_CMD_DITH3,
	SCE_GE_CMD_LOP = 0xE6, // LOGICOP
	SCE_GE_CMD_ZMSK = 0xE7, // ZWRITEDISABLE
	SCE_GE_CMD_PMSK1 = 0xE8, // MASKRGB
	SCE_GE_CMD_PMSK2 = 0xE9, // MASKALPHA
	SCE_GE_CMD_XSTART = 0xEA, // TRANSFERSTART
	SCE_GE_CMD_XPOS1 = 0xEB, // TRANSFERSRCPOS
	SCE_GE_CMD_XPOS2 = 0xEC, // TRANSFERDSTPOS
	SCE_GE_CMD_XSIZE = 0xEE, // TRANSFERSIZE
	SCE_GE_CMD_VSCX = 0xF0,
	SCE_GE_CMD_VSCY = 0xF1,
	SCE_GE_CMD_VSCZ = 0xF2,
	SCE_GE_CMD_VTCS = 0xF3,
	SCE_GE_CMD_VTCT = 0xF4,
	SCE_GE_CMD_VTCQ = 0xF5,
	SCE_GE_CMD_VCV = 0xF6,
	SCE_GE_CMD_VAP = 0xF7,
	SCE_GE_CMD_VFC = 0xF8,
	SCE_GE_CMD_VSCV = 0xF9,
  SCE_GE_CMD_DUMMY = 0xFF,
};

enum SCE_GE_TMODE_HSM
{
    SCE_GE_TMODE_HSM_NORMAL = 0,
    SCE_GE_TMODE_HSM_HIGHSPEED = 1,
};

enum SCE_GE_CLUT_CPF
{
    SCE_GE_CLUT_CPF_5650 = 0,
    SCE_GE_CLUT_CPF_5551 = 1,
    SCE_GE_CLUT_CPF_4444 = 2,
    SCE_GE_CLUT_CPF_8888 = 3,
};

enum eSCE_GE_TFILTER
{
    SCE_GE_TFILTER_NEAREST					= 0,
    SCE_GE_TFILTER_LINEAR					= 1,
    SCE_GE_TFILTER_NEAREST_MIPMAP_NEAREST	= 4,
    SCE_GE_TFILTER_LINEAR_MIPMAP_NEAREST	= 5,
    SCE_GE_TFILTER_NEAREST_MIPMAP_LINEAR	= 6,
    SCE_GE_TFILTER_LINEAR_MIPMAP_LINEAR		= 7,
};

enum eSCE_GE_TWRAP
{
    SCE_GE_TWRAP_REPEAT = 0,
    SCE_GE_TWRAP_CLAMP = 1,
};

enum eSCE_GE_TLEVEL
{
    SCE_GE_TLEVEL_AUTO		= 0,
    SCE_GE_TLEVEL_CONSTANT	= 1,
    SCE_GE_TLEVEL_SLOPE		= 2,
    SCE_GE_TLEVEL_VARIABLE1	= SCE_GE_TLEVEL_AUTO,
    SCE_GE_TLEVEL_FIX		= SCE_GE_TLEVEL_CONSTANT,
    SCE_GE_TLEVEL_VARIABLE2	= SCE_GE_TLEVEL_SLOPE,
};

enum SCE_GE_TFUNC_TCC
{
    SCE_GE_TFUNC_RGB  = 0,
    SCE_GE_TFUNC_RGBA = 1,
};

enum SCE_GE_TFUNC_TXF
{
    SCE_GE_TFUNC_MODULATE	= 0,
    SCE_GE_TFUNC_DECAL		= 1,
    SCE_GE_TFUNC_BLEND		= 2,
    SCE_GE_TFUNC_REPLACE	= 3,
    SCE_GE_TFUNC_ADD		= 4,
};

typedef struct
{
    SCE_GE_TMAP_TMN tmn : 2; // texcoords, texgen matrix, env map, invalid
    byte     : 6;
    SCE_GE_TMAP_TMI tmi : 2; // pos, uv, normalized normal, normal
    short     : 14;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TMAP;

typedef struct
{
    byte u : 2;
    byte   : 6;
    byte v : 2;
    short  : 14;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TSHADE;

typedef struct
{
    SCE_GE_TMODE_HSM hsm : 1; // Storage mode (normal or fast/swizzle)
    byte     : 7;
    byte mc  : 1;  // Multi clut
    byte     : 7;
    byte mxl : 3; // Maximum level mip
    byte     : 5;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TMODE;

typedef struct
{
    eSCE_GE_TPF tpf : 8; // Texture pixel format
    short ext : 16; // DXT format extension format 
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TPF;

typedef struct
{
    byte np : 8; // Num clut/palettes
    byte    : 8;
    byte    : 8;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_CLOAD;

typedef struct
{
    SCE_GE_CLUT_CPF cpf : 2; // Clut buffer pixel format
    byte sft : 6; // Shift value
    byte msk : 8; // Mask value
    byte csa : 8; // Load start location
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_CLUT;

typedef struct
{
    eSCE_GE_TFILTER min : 3;
    byte     : 5;
    eSCE_GE_TFILTER mag : 1; // Only nearest or linear
    short     : 15;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TFILTER;

typedef struct
{
    eSCE_GE_TWRAP wms : 1;
    byte              : 7;
    eSCE_GE_TWRAP wmt : 1;
    short             : 15;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TWRAP;

typedef struct
{
    eSCE_GE_TLEVEL lcm : 2; // Mipmap level mode
    short     : 14;
    byte offl : 8; // Bias
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TLEVEL;

typedef struct
{
    SCE_GE_TFUNC_TXF txf : 3; // Texture function
    byte     : 5;
    SCE_GE_TFUNC_TCC tcc : 1;
    byte     : 7;
    byte cd  : 1; // Color double
    byte     : 7;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TFUNC;

typedef struct
{
    byte r : 8;
    byte g : 8;
    byte b  : 8;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TEC;
    
typedef struct
{
    int cbp        : 24;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_CBP;

typedef struct
{
    int cbw        : 24;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_CBW;

typedef struct
{
    int TBP        : 24;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TBP0;

typedef struct
{
    int TBW        : 24;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TBW0;

typedef struct
{
    byte tw        : 8;
    byte th        : 8;
    byte           : 8;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TSIZE0;

typedef struct
{
    int su         : 24;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_SU;

typedef struct
{
    int sv         : 24;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_SV;

typedef struct
{
    int tu         : 24;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TU;

typedef struct
{
    int tv         : 24;
    SCE_GE_CMD cmd : 8 <format=hex>;
} SCE_GE_TV;
        
typedef struct
{
    uint ImageOffset <format=hex, fgcolor=cRed>;
    uint ImageSize <format=hex>;
    byte _two_; // 0x20 flag when running
    ubyte ImageFormat : 8;
    byte MipmapCount;
    byte _two2_;
    ushort ImageWidth;
    ushort ImageHeight;
    ushort Unk;
    ushort Unk2;

    int pad;
    int pad;
    uint UnkOffset_0x1C;
} ImageData <bgcolor=cGreen, optimize=false>;

typedef struct (int arrSize)
{
    ImageData images[arrSize];
} ImageDataMap <bgcolor=cDkGreen>;

typedef struct 
{
    BitfieldDisablePadding();
    
    int UnkOffset1 <fgcolor=cRed, format=hex>;
    int field_0x04;
    float field_0x08;
    float field_0x0C;
    float field_0x10;
    float field_0x14;
    
    SCE_GE_TMAP SCE_GE_TMAP_;
    SCE_GE_TSHADE SCE_GE_TSHADE_;
    SCE_GE_TMODE SCE_GE_TMODE_;
    SCE_GE_TPF SCE_GE_TPF_;
    SCE_GE_CLOAD SCE_GE_CLOAD_;
    SCE_GE_CLUT SCE_GE_CLUT_;
    SCE_GE_TFILTER SCE_GE_TFILTER_;
    SCE_GE_TWRAP SCE_GE_TWRAP_;
    SCE_GE_TLEVEL SCE_GE_TLEVEL_;
    SCE_GE_TFUNC SCE_GE_TFUNC_;
    SCE_GE_TEC SCE_GE_TEC_;
    int _RuntimeClutOffset;
    
    struct
    {
        int RelocPtr;
        ushort Width;
        byte Unk : 5; // 1 << Unk
        byte     : 3;
        byte Index;
    } MipInfo[8];
    
    short _empty;
    short ClutMapEntryIndex;
    short _empty;
    short ImageInfoIndex;
    int _empty;
    int FileNameOffset <format=hex, fgcolor=cRed>;
    
    FSeek(UnkOffset1 - RelocPtr);
    struct
    {
        SCE_GE_CBP SCE_GE_CBP_;
        SCE_GE_CBP SCE_GE_CBW_;
        SCE_GE_TBP0 SCE_GE_TBP0_;
        SCE_GE_TBW0 SCE_GE_TBW0_;
        SCE_GE_TSIZE0 SCE_GE_TSIZE0_;
        SCE_GE_SU SCE_GE_SU_;
        SCE_GE_SV SCE_GE_SV_;
        SCE_GE_TU SCE_GE_TU_;
        SCE_GE_TV SCE_GE_TV_;
        SCE_GE_TMAP SCE_GE_TMAP_;
        SCE_GE_TSHADE SCE_GE_TSHADE_;
        SCE_GE_TMODE SCE_GE_TMODE_;
        SCE_GE_TPF SCE_GE_TPF_;
        SCE_GE_CLOAD SCE_GE_CLOAD_;
        SCE_GE_CLUT SCE_GE_CLUT_;
        SCE_GE_TFILTER SCE_GE_TFILTER_;
        SCE_GE_TWRAP SCE_GE_TWRAP_;
        SCE_GE_TLEVEL SCE_GE_TLEVEL_;
        SCE_GE_TFUNC SCE_GE_TFUNC_;
    } SubTextureParams <bgcolor=cRed>;
    
    FSeek(FileNameOffset - RelocPtr);
    string FileName;
} PGLUTextureInfo <comment=FileName, bgcolor=cYellow, optimize=false>;

struct TXS3 
{
    char Magic[4]; // '3SXt' when loaded
    if (Magic[0] == '3')
        LittleEndian();
    else
        BigEndian();

    uint Empty <format=hex>;
    uint RelocPtr <format=hex>;
    uint _empty;
    uint _empty;
    ushort PGLUTextureInfoCount <fgcolor=cGreen>;
    ushort TextureImageInfoCount <fgcolor=cGreen>;
    uint PGLUTextureInfoOffset <format=hex, fgcolor=cRed>;
    uint TextureInfoOffset <format=hex, fgcolor=cRed>;
    uint RelocSize <format=hex, fgcolor=cRed>;
    short UnkCount_0x24 <fgcolor=cGreen>;
    short ClutMapEntryCount <fgcolor=cGreen>;
    uint UnkOffset_0x28 <format=hex, fgcolor=cRed, comment="Count from 024, Stride 0x08. ">;
    uint ClutMapOffset <format=hex, fgcolor=cRed>;
    int UnkOffset_0x30 <format=hex, fgcolor=cRed>; // TODO - Car Variations maybe?
    ushort UnkCount_0x34 <fgcolor=cGreen>;
    ushort _empty;
    uint UnkOffset_0x38 <format=hex, fgcolor=cRed, comment="Count from 0x34, Stride 0x1C. ">;
    
    /* Above: from 08af69c4 (GT PSP EU 2.00): 
    *(ushort *)(param_1 + 0xe) = *(ushort *)(param_1 + 4) < 2 ^ 1;
    *(undefined *)(param_1 + 0x17) = 1;
    *(undefined2 *)(param_1 + 0xc) = 0;
    *(undefined4 *)(param_1 + 0x10) = 0;
    *(undefined *)(param_1 + 0x16) = 1;
    *(ushort *)(param_1 + 0x14) = (ushort)(**(float **)(param_1 + 8) < 0.0);
    */
    
    struct
    {
        local int i = 0;
        for (i = 0; i < PGLUTextureInfoCount; i++)
        {
            FSeek(PGLUTextureInfoOffset + (i * 0x98) - RelocPtr);
            PGLUTextureInfo TextureInfo;
        }
    } TextureInfos;
    
    FSeek(TextureInfoOffset - RelocPtr);
    struct
    {
        local int i = 0;
        for (i = 0; i < TextureImageInfoCount; i++)
        {
            FSeek(TextureInfoOffset + (i * 0x20) - RelocPtr);
            ImageData ImageInfo;
        }
    } ImageInfos;
    
    FSeek(ClutMapOffset - RelocPtr);
    struct
    {
        local int i = 0;
        for (i = 0; i < ClutMapEntryCount; i++)
        {
            FSeek(ClutMapOffset + (i * 0x0C) - RelocPtr);
            struct
            {
                int a;
                int ClutBufferOffset <format=hex, fgcolor=cRed>;
                int c;
            } ClutEntry;
        }
    } ClutInfos;
} TextureSet3;

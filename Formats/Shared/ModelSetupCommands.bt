 //------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// Handled by ModelSet::render
// GT3 EU: 0x226158

// Handled by ModelSet2::render_(ModelSet2* model, int modelIndex, ModelSet2Instance* instance)
// GT4O US: 0x2F73F8

local byte stop = false;
typedef struct
{
    enum<byte> 
    {
        /* 1, 48, 56, 57, 58,59, 60, 61, 62, 63, 71 are explicitly skipped in GT4 */
        
        // End of setup commands.
        End = 0,

        RenderModel_1ub = 2,
        RenderModel_1us = 3,
        
        // Calls a shape (mesh) to use (1 unsigned byte)
        pgluCallShape_1ub = 4,
        
        // Calls a shape (mesh) to use (1 unsigned short)
        pgluCallShape_1us = 5,
        
        // Calls the model's callback, passes parameter to it, returns value
        // Will be used for which branch to jump to
        // Callbacks depends on the kind of model:
        // - GT4Model::CarModel::Callback::callback(int) at 2F3AC0 (GT4O US)
        // WARN: This command exists in GT3 and is used, but there is no concept of callbacks. 
        //       It will always return 0
        CallModelCallback = 6,
        
        LODData = 7,
        
        // Jumps to a relative offset (byte)
        JumpByte = 8,
        
        // Jumps to a relative offset (short)
        JumpShort = 9,
        
        pglUnk_Enable17_WithMatrix = 10,
        
        // Calls pglEnable(17)
        pglEnable17_ = 11,
        
        // Pushes a matrix. similar to glPushMatrix
        pglPushMatrix = 12,
        
        // Pops a matrix. similar to glPopMatrix
        pglPopMatrix = 13,
        
        // Sets the matrix mode. Similar to glMatrixMode
        pglMatrixMode = 14,
        
        // Calls pglInverse with a matrix
        pglInverse = 15,
        
        // Calls a pgl command with a matrix. Could be similar in operation to command 15
        pglUnk16 = 16,
        
        // Calls pglTranslate. Similar to glTranslate
        pglTranslate = 17,
        
        // Calls pglScale. Similar to glScale
        pglScale = 18,
        
        // Calls pglRotate. Similar to glRotate
        pglRotate = 19,
        
        // Calls pglRotateX. Custom, rotates on X axis
        pglRotateX = 20,
        
        // Calls pglRotateX. Custom, rotates on Y axis
        pglRotateY = 21,
        
        // Calls pglRotateX. Custom, rotates on Z axis
        pglRotateZ = 22,
        
        // Presumably enables depth test, pglEnable(5) is called.
        pglEnableDepthTest = 23,
        
        // Presumably disables depth test, pglDisable(5) is called.
        pglDisableDepthTest = 24,
        
        // Sets the depth func to use. Similar to glDepthFunc
        pglDepthFunc = 25,
        
        // Presumably enables alpha test. Calls pglEnable(4)
        pglEnableAlphaTest = 26,
        
        // Presumably disables alpha test. Calls pglDisable(4)
        pglDisableAlphaTest = 27,
        
        // Sets the alpha function to use (1 unsigned byte) - similar to glAlphaFunc
        pglAlphaFunc_1ub = 28,
        
        // Presumably enables destination alpha testing. Calls pglEnable(3)
        pglEnableDestinationAlphaTest = 29,
        
        // Presumably enables destination alpha testing. Calls pglDisable(3)
        pglDisableDestinationAlphaTest = 30,
        
        // Calls pglDestinationAlphaFunc(value) - 1 unsigned byte - should be 2 or 5
        pglDestinationAlphaFunc = 31,
        
        // Sets the blend function to use - similar to glBlendFunc
        pglBlendFunc1ub = 32,
        
        // Sets the fog color. 1 unsigned int
        pglFogColor1ui = 33,
        
        // Gets the fog color, to be used with command 35 later
        pglGetFogColor = 34,
        
        // Sets fog color to default value
        pglFogColor1ui_default = 35,
        
        // Sets the color mask with pglColorMask1ui(~value) (1 unsigned int)
        pglColorMask1ui = 36,
        
        // Disables depth mask
        pglDisableDepthMask = 37,
        
        // Enables depth mask
        pglEnableDepthMask = 38,
        
        // Sets the depth bias.
        pglDepthBias = 39,
        
        // Does something with 4 float. Not used above GT3. Other games's code skips 4 floats.
        pglGT3_Unk40 = 40,
        
        // Calls pgluExternalTexIndex
        pglExternalTexIndex = 41,
        
        // Calls pgluExternalMatIndex
        pglExternalMatIndex = 42,
        
        // Sets the tex table to use (1 unsigned byte)
        // Calls: 
        // - pgluCacheTexSetPath3(PGLUTexture*)
        // - pgluTexTable(v55->PGLUTextureMapOffset_0x18)
        pgluTexTable_1ub = 43,
        
        // Same as command 43, but index is a short.
        pgluTexTable_1us = 44,
        
        // Calls pglEnable(17), may be related to alpha fail
        pglEnable17 = 45,
        
        // Calls pglDisable(17), may be related to alpha fail
        pglDisable17 = 46,
         
        pglAlphaFail = 47,
        
        // Calls pglCylinderMapHint - 3 floats
        pglCylinderMapHint = 49,
        
        // Does something with 1 float. Not used above GT3. Other games's code skips 1 float.
        // Operates similarly to command 51.
        pglGT3_1Int = 50,
        
        // Does something with 4 floats. Not used above GT3. Other games's code skips 4 floats.
        pglGT3_4Float = 51,
        
        // GT4 and above. Calls ModelSet2::setShapeTweenRatio
        ModelSet_setShapeTweenRatio = 52,
        
        // Calls pgluShapeTweenRatio() and pgluCallShape()
        pgl_53 = 53,
        
        // Unknown. Used only in GT3, otherwise skips 1 float
        pgl_54 = 54,
        
        // Unknown. Used only in GT3, otherwise skips 4 floats
        pgl_55 = 55,
        
        // Calls pglGetCullFace, and pglCullFace
        pglCullFace = 64,
        
        // GT4 and above. Unknown. Skips 3 bytes
        Unk_65 = 65,
        
        // GT4 and above. Unknown. Skips 3 bytes
        Unk_66 = 66,
        
        // GT4 and above. Calls model set VM.
        ModelSetVM_callVM = 67,
        
        // GT4 and above.
        Unk_68 = 68,
        
        // GT4 and above. Calls these with a short (rescale?) - VM Instance related?
        pglTranslate2 = 69,
        pglScale2 = 70,
        pglRotate2 = 72,
        pglRotateX2 = 73,
        pglRotateY2 = 74,
        pglRotateZ2 = 75,
        pgluShapeTweenRatio2 = 76,
        
        UnkBranch = 77,
        
        // GT4 and above. Calls pglCullFace(2)
        pglCullFace_2 = 78,
        
        // GT4 and above. Calls pglCullFace(1)
        pglCullFace_1 = 79,
        
        // GT4 and above. Calls pgluTexSet using external tex set (up to 16). Uses 1 unsigned byte as index
        pgluTexTableFromExternalTexSet1ub = 80,
        
        // GT4 and above. Calls pgluTexSet using external tex set (up to 16). Uses 1 unsigned short as index
        pgluTexTableFromExternalTexSet1us = 81,
        
        // GT4 and above. Calls pglVariableColorScale
        pglVariableColorScale = 82,
        
        // GT4 and above. Calls pglVariableColorOffset
        pglVariableColorOffset = 83,
        
        // GT4 and above. Calls pglVariableColorScale using shorts (vm instance related?)
        pglVariableColorScale_Shorts = 84,
        
        // GT4 and above. Calls pglVariableColorOffset using shorts (vm instance related?)
        pglVariableColorOffset_Shorts = 85,

        // GT4 and above. Calls pglTexGenf(3, facing_attenuation_) and pglTexGenf(2, facing_bias_)
        // Both of these globals are set through ModelSet2::setFacingAttenuation and ModelSet2::setFacingBias
        // Which are called by course env ptr code, it seems
        pglTexGenf_WithCurrentFacingParameters = 86,
        
        // GT4 and above. Calls pglTexGenf(3, 0.0) and pglTexGenf(2, 1.0)
        pglTexGenf_Default = 87,
        
        // GT4 and above. Calls pglDisable(19) and pglDisable(14)
        pglDisable19_14 = 88,
        
        // GT4 and above. Calls modelset callback. takes unsigned byte parameter
        ModelSetCallback_89_1ub = 89,
        
        // GT4 and above. Same as 89, with unsigned short index
        ModelSetCallback_90_1us = 90,
    }cmd;
    
    switch (cmd)
    {
        case 0x00:
            stop = true;
            break;
            
        case 2:
            byte ModelIndex;
            break;
            
        case 4: // Shape Index byte
            byte ShapeIndex;
            break;
            
        case 5: // Shape Index short
            short ShapeIndex;
            break;
            
        case 6:
            // Passed to the callback
            enum <ushort> 
            { 
                CarCallback_GetTailLampActive = 0,
                
                CarCallback_SetWheelSpeed = 1,
                // 2 same
                // 3 same
                // 4 same
                
                CarCallback_SetSteering = 5,
                CarCallback_SetUnk = 6,
                CarCallback_GetTimezone = 7,
                CarCallback_RotateZ = 8,
                
                CarCallback_RenderTire = 15,
                // 16 same
                // 17 same
                // 18 same
                
                CarCallback_RenderWheel = 36,
                // 37 same
                // 38 same
                // 39 same
            } Parameter;
            byte BranchCount;
            short RelativeBranchOffsets[BranchCount] <format=hex>;
            break;
        case 7:
            Vector3 unk0x07;
            float Unk0x07_2;
            byte lodCount;
            short RelativeBranchOffsets[lodCount] <format=hex>;
            break;
            
        case 8: // Jump byte
            byte RelativeJumpOffset;
            break;
        case 9: // Jump short
            short RelativeJumpOffset;
            break;
            
        case 10:
            byte num;
            Vector3 vecs[num];
            short OffsetMaybe <format=hex>;
            break;
            
        case 11:
        case 12:
        case 13:
            break;
            
        case 15:
            float matrix_15[4 * 4];
            break;
        case 16:
            float matrix_16[4 * 4];
            break;
        
        case 17:
            float x;
            float y;
            float z;
            break;
            
        case 18:
            float x;
            float y;
            float z;
            break;
            
        case 19:
            float angle;
            float x;
            float y;
            float z;
            break;
            
        case 20:
            float x;
            break;
            
        case 21:
            float y;
            break;
            
        case 22:
            float z;
            break;
           
        case 23:
        case 24:
            break;
            
        case 25:
            byte func;
            break;
            
        case 26:
        case 27:
            break;
        case 28:
            byte func;
            byte ref;
            break;
        case 0x1D:
        case 0x1E:
            break;
        case 0x1F:
            byte unk;
            break;
        case 32:
            byte sfactor;
            byte dfactor;
            break;
        case 0x21:
            int unk;
            break;
        case 0x22:
        case 0x23:
            break;
        case 36:
            uint ColorMask <format=hex>;
            break;
        case 37:
        case 38:
            break;
        case 39:
            float bias;
            break;
        case 41:
            byte TexIndex;
            break;
        case 42:
            byte MatIndex;
            break;
        case 43:
            byte TexTableIndex;
            break;
        case 44:
            short TexTableIndex;
            break;
        case 45:
        case 46:
            break;
        case 47:
            byte AlphaFail;
            break;
        case 49:
            float a;
            float b;
            float c;
            break;
            
        case 50:
            float Unk_50;
            break;
        case 51:
            float Unk_51[4];
            break;
        case 52:
            float value;
            break;
        case 53:
            float value;
            break;
        case 54:
            float value;
            break;
        case 55:
            float values[4];
            break;
            
        case 64:
            break;
            
        case 68:
            byte unk;
            byte unk2;
            break;
            
        case 69:
        case 70:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
            byte unk;
            byte unk2;
            break;
        
        case 77:
            short UnkInstanceIndex;
            byte Count;
            short Offsets[Count];
            break;
            
        case 80:
            byte ExternalTexSetIndex;
            break;
            
        case 81:
            short ExternalTexSetIndex;
            break;
           
        case 82:
        case 83:
            float a;
            float b;
            float c;
            float d;
            break;
            
        case 84:
        case 85:
            short a;
            short b;
            short c;
            short d;
            
        case 89:
            byte UnkParam;
            break;
            
        case 90:
            short UnkParam;
            break;
            
        default:
            stop = true;  
            break;
    }
} PGLCommand <optimize=false, comment=CommentCommand>;

string CommentCommand(PGLCommand& cmd)
{
    return EnumToString(cmd.cmd);
}

typedef struct
{
    stop = false;
    while (true)
    {
        PGLCommand cmd;
        if (stop)
            break;
    }

} PGLCommands;
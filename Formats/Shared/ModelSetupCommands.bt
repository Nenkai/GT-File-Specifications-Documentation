 //------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// Handled by ModelSet::render
// GT3 EU: 0x226158

// Handled by ModelSet2::render_(ModelSet2* model, int modelIndex, ModelSet2Instance* instance)
// GT4O US: 0x2F73F8

local byte stop = false;
typedef struct
{
    enum<byte> 
    {
        /* 1, 48, 56, 57, 58,59, 60, 61, 62, 63, 71 are explicitly skipped in GT4 */
        
        // End of setup commands.
        End = 0,

        RenderModel_Byte = 2,
        RenderModel_UShort = 3,
        
        // Calls a shape (mesh) to use (1 unsigned byte)
        pgluCallShape_Byte = 4,
        
        // Calls a shape (mesh) to use (1 unsigned short)
        pgluCallShape_UShort = 5,
        
        // Calls the model's callback, passes parameter to it, returns value
        // Will be used for which branch to jump to
        // Callbacks depends on the kind of model:
        // - GT4Model::CarModel::Callback::callback(int) at 2F3AC0 (GT4O US)
        // WARN: This command exists in GT3 and is used, but there is no concept of callbacks. 
        //       It will always return 0
        CallModelCallback = 6,
        
        // Jumps to lod command data based on the current lod.
        LODSelect = 7,
        
        // Jumps to a relative offset (byte)
        JumpByte = 8,
        
        // Jumps to a relative offset (short)
        JumpShort = 9,
        
        // Render commands, takes a bbox.
        BBoxRender = 10,
        
        // Calls pglEnable(17) - Not entirely figured out, it may be just enabling rendering
        // It's always at the bottom of commands, so probably it?
        pglEnableRendering = 11,
        
        // Pushes the current matrix stack down by one, duplicating the current matrix. Similar to glPushMatrix
        pglPushMatrix = 12,
        
        // Pops the current matrix stack, replacing the current matrix with the one below it on the stack. Similar to glPopMatrix
        pglPopMatrix = 13,
        
        // Sets the matrix mode. Similar to glMatrixMode
        pglMatrixMode = 14,
        
        // Calls pglLoadMatrix, same as glLoadMatrix. Replaces the current matrix with the one whose elements are specified by m. 
        pglInverse = 15,
        
        // Calls pglMultMatrix, same as glMultMatrix. Multiplies the current matrix with the one specified using m, and replaces the current matrix with the product.
        pglMultMatrix = 16,
        
        // Calls pglTranslate, same as glTranslate. Multiplies the current matrix by the specified translation vector
        pglTranslate = 17,
        
        // Calls pglScale, same as glScale. Multiplies the current matrix by the specified scale vector.
        pglScale = 18,
        
        // Calls pglRotate, same as glRotate. Multiplies the current matrix by the specified rotation vector.
        pglRotate = 19,
        
        // Calls pglRotateX. Custom, rotates on X axis
        pglRotateX = 20,
        
        // Calls pglRotateX. Custom, rotates on Y axis
        pglRotateY = 21,
        
        // Calls pglRotateX. Custom, rotates on Z axis
        pglRotateZ = 22,
        
        // Enables Depth Test by calling pglEnable(5), which sets GS ZBUF's ZMSK (Z Value Drawing Mask) & GS TEST's ZTE (Depth Test) bits
        pglEnableDepthTest = 23,
        
        // Disables Depth Test by calling pglDisable(5), which unsets GS ZBUF's ZMSK (Z Value Drawing Mask) & GS TEST's ZTE (Depth Test) bits
        pglDisableDepthTest = 24,
        
        // Sets the depth func to use. Sets GS TEST's ZTST value
        pglDepthFunc = 25,
        
        // Enables Alpha Test by calling pglEnable(4), which sets GS TEST's ATE (Alpha Test) bit
        pglEnableAlphaTest = 26,
        
        // Disables Alpha Test by calling pglDisable(4), which unsets GS TEST's ATE (Alpha Test) bit
        pglDisableAlphaTest = 27,
        
        // Sets the alpha function to use by setting GS TEST's ATST (Alpha Test Method) value
        pglAlphaFunc = 28,
        
        // Enables Destination Alpha Test by calling pglEnable(3), which toggles on GS TEST register bit 14 (DATE).
        pglEnableDestinationAlphaTest = 29,
        
        // Disables Destination Alpha Test by calling pglDisable(3), which untoggles GS TEST register bit 14 (DATE).
        pglDisableDestinationAlphaTest = 30,
        
        // Calls pglDestinationAlphaFunc(value) - 1 unsigned byte - 2 unsets GS TEST register bit 15 (DATM), 5 sets it
        pglDestinationAlphaFunc = 31,
        
        // Sets the blend function to use by setting GS ALPHA_1 & ALPHA_2 (FIX)
        pglBlendFunc = 32,
        
        //  Sets the fog color. 1 unsigned int to GS FOGCOL register
        pglSetFogColor = 33,
        
        // Stores the fog color from current FOGCOL register
        pglStoreFogColor = 34,
        
        // Sets fog color to default value
        pglCopyFogColor = 35,
        
        // Sets the color mask with pglColorMask1ui(~value) (1 unsigned int)
        pglColorMask = 36,
        
        // Disables depth mask
        pglDisableDepthMask = 37,
        
        // Enables depth mask
        pglEnableDepthMask = 38,
        
        // Sets the depth bias.
        pglDepthBias = 39,
        
        // Does something with 4 float. Not used above GT3. Other games's code skips 4 floats.
        pglGT3_Unk40 = 40,
        
        // Sets the current external texture to use. Calls pgluExternalTexIndex
        pglExternalTexIndex = 41,
        
        // Calls pgluExternalMatIndex
        pglExternalMatIndex = 42,
        
        // Sets the tex table to use (1 unsigned byte)
        pgluSetTexTable_Byte = 43,
        
        // Sets the tex table to use (1 unsigned short)
        pgluTexTable_UShort = 44,
        
        // Calls glEnable(15). Enables face culling
        pglEnableCullFace = 45,
        
        // Calls pglDisable(15). Disables face culling
        pglDisableCullFace = 46,
         
        // Calls pglAlphaFail. Sets the alpha fail by setting GS TEST's AFAIL value.
        pglAlphaFail = 47,
        
        // Calls pglCylinderMapHint - 3 floats
        pglCylinderMapHint = 49,
        
        // Does something with 1 float. Not used above GT3. Other games's code skips 1 float.
        // Operates similarly to command 51.
        pglGT3_1Int = 50,
        
        // Does something with 4 floats. Not used above GT3. Other games's code skips 4 floats.
        pglGT3_4Float = 51,
        
        // GT4 and above. Calls ModelSet2::setShapeTweenRatio
        ModelSet_setShapeTweenRatio = 52,
        
        // Calls pgluShapeTweenRatio() and pgluCallShape()
        pgl_53 = 53,
        
        // Unknown. Used only in GT3, otherwise skips 1 float
        pgl_54 = 54,
        
        // Unknown. Used only in GT3, otherwise skips 4 floats
        pgl_55 = 55,
        
        // Calls pglGetCullFace, and pglCullFace
        pglCullFace = 64,
        
        // GT4 and above. Unknown. Skips 3 bytes
        Unk_65 = 65,
        
        // GT4 and above. Unknown. Skips 3 bytes
        Unk_66 = 66,
        
        // GT4 and above. Calls model set VM.
        CallVM = 67,
        
        // GT4 and above. Calls pglMultMatrix using VM output registers.
        VM_MultMatrix = 68,
        
        // GT4 and above. Calls pglTranslate using VM output registers.
        VM_pglTranslate = 69,
        
        // GT4 and above. Calls pglScale using VM output registers.
        VM_pglScale = 70,
        
        // GT4 and above. Calls pglRotate using VM output registers.
        VM_pglRotate = 72,
        
        // GT4 and above. Calls pglRotateX using VM output registers.
        VM_pglRotateX = 73,
        
        // GT4 and above. Calls pglRotateY using VM output registers.
        VM_pglRotateY = 74,
        
        // GT4 and above. Calls pglRotateZ using VM output registers.
        VM_pglRotateZ = 75,
        
        // GT4 and above. Calls pgluShapeTweenRatio using VM output registers.
        VM_pgluShapeTweenRatio = 76,
        
        // GT4 and above. Branches depending on parameter.
        VM_Branch = 77,
        
        // GT4 and above. Calls pglCullFace(2)
        pglCullFace_2 = 78,
        
        // GT4 and above. Calls pglCullFace(1)
        pglCullFace_1 = 79,
        
        // GT4 and above. Calls pgluTexSet using external tex set (up to 16). Uses 1 unsigned byte as index
        pgluTexTableFromExternalTexSetByte = 80,
        
        // GT4 and above. Calls pgluTexSet using external tex set (up to 16). Uses 1 unsigned short as index
        pgluTexTableFromExternalTexSetUShort = 81,
        
        // GT4 and above. Calls pglVariableColorScale
        pglVariableColorScale = 82,
        
        // GT4 and above. Calls pglVariableColorOffset
        pglVariableColorOffset = 83,
        
        // GT4 and above. Calls pglVariableColorScale using VM output registers.
        VM_pglVariableColorScale = 84,
        
        // GT4 and above. Calls pglVariableColorOffset using VM output registers.
        VM_pglVariableColorOffset = 85,

        // GT4 and above. Calls pglTexGenf(3, facing_attenuation_) and pglTexGenf(2, facing_bias_)
        // Both of these globals are set through ModelSet2::setFacingAttenuation and ModelSet2::setFacingBias
        // Which are called by course env ptr code, it seems
        pglTexGenf_WithCurrentFacingParameters = 86,
        
        // GT4 and above. Calls pglTexGenf(3, 0.0) and pglTexGenf(2, 1.0)
        pglTexGenf_Default = 87,
        
        // GT4 and above. Calls pglDisable(19) and pglDisable(14)
        pglDisable19_14 = 88,
        
        // GT4 and above. Calls modelset callback. takes unsigned byte parameter
        VMCallback_Byte = 89,
        
        // GT4 and above. Same as 89, with unsigned short index
        VMCallback_UShort = 90,
    }cmd;
    
    switch (cmd)
    {
        case 0x00:
            stop = true;
            break;
            
        case RenderModel_Byte:
            byte ModelIndex;
            break;
            
        case RenderModel_UShort:
            ushort ModelIndex;
            break;
            
        case pgluCallShape_Byte: // Shape Index byte
            byte ShapeIndex;
            break;
            
        case pgluCallShape_UShort: // Shape Index short
            short ShapeIndex;
            break;
            
        case CallModelCallback:
            // Passed to the callback
            enum <ushort> 
            { 
                CarCallback_GetTailLampActive = 0,
                
                CarCallback_SetWheelSpeed = 1,
                // 2 same
                // 3 same
                // 4 same
                
                CarCallback_SetSteering = 5,
                CarCallback_SetUnk = 6,
                CarCallback_GetTimezone = 7,
                CarCallback_RotateZ = 8,
                
                CarCallback_RenderTire = 15,
                // 16 same
                // 17 same
                // 18 same
                
                CarCallback_RenderWheel = 36,
                // 37 same
                // 38 same
                // 39 same
            } Parameter;
            Printf("%d\n", Parameter);
            byte BranchCount;
            short RelativeBranchOffsets[BranchCount] <format=hex>;
            break;
            
        case LODSelect:
            Vector3 unk0x07;
            float Unk0x07_2;
            byte lodCount;
            short RelativeBranchOffsets[lodCount] <format=hex>;
            break;
            
        case JumpByte:
            byte RelativeJumpOffset;
            break;
            
        case JumpShort:
            short RelativeJumpOffset;
            break;
            
        case BBoxRender:
            byte num;
            Vector3 vecs[num];
            short OffsetMaybe <format=hex>;
            break;
            
        case pglEnableRendering:
        case pglPushMatrix:
        case pglPopMatrix:
            break;
            
        case pglMatrixMode:
            byte Mode;
            break;
            
        case pglInverse:
            float matrix_15[4 * 4];
            break;
        case pglMultMatrix:
            float matrix_16[4 * 4];
            break;
        
        case pglTranslate:            
        case pglScale:
            float x;
            float y;
            float z;
            break;
            
        case pglRotate:
            float angle;
            float x;
            float y;
            float z;
            break;
            
        case pglRotateX:
        case pglRotateY:
        case pglRotateZ:
            float z;
            break;
           
        case pglEnableDepthTest:
        case pglDisableDepthTest:
            break;
            
        case pglDepthFunc:
            byte func;
            break;
            
        case pglEnableAlphaTest:
        case pglDisableAlphaTest:
            break;
            
        case pglAlphaFunc:
            byte func;
            byte ref;
            break;
            
        case pglEnableDestinationAlphaTest:
        case pglDisableDestinationAlphaTest:
            break;
            
        case pglDestinationAlphaFunc:
            byte unk;
            break;
            
        case pglBlendFunc:
            byte ALPHA1_A : 2;
            byte ALPHA1_B : 2;
            byte ALPHA1_C : 2;
            byte ALPHA1_D : 2;
            byte ALPHA1_FIX;
            break;
            
        case pglSetFogColor:
            int unk;
            break;
            
        case pglStoreFogColor:
        case pglCopyFogColor:
            break;
            
        case pglColorMask:
            uint ColorMask <format=hex>;
            break;
            
        case pglDisableDepthMask:
        case pglEnableDepthMask:
            break;
            
        case pglDepthBias:
            float bias;
            break;
            
        case pglGT3_Unk40:
            float UnkGT3[4];
            break;
            
        case pglExternalTexIndex:
            byte TexIndex;
            break;
        case pglExternalMatIndex:
            byte MatIndex;
            break;
        case pgluSetTexTable_Byte:
            byte TexTableIndex;
            break;
        case pgluTexTable_UShort:
            short TexTableIndex;
            break;
        case pglEnableCullFace:
        case pglDisableCullFace:
            break;
            
        case pglAlphaFail:
            byte AlphaFail;
            break;
            
        case pglCylinderMapHint:
            float a;
            float b;
            float c;
            break;
            
        case pglGT3_1Int:
            float Unk_50;
            break;
        case pglGT3_4Float:
            float Unk_51[4];
            break;
        case ModelSet_setShapeTweenRatio:
            float value;
            break;
        case pgl_53:
            short ShapeIndex;
            short TweenRatio;
            break;
        case pgl_54:
            float value;
            break;
        case pgl_55:
            float values[4];
            break;
            
        case pglCullFace:
            break;
            
        case Unk_65:
        case Unk_66:
            byte Unk[3];
            break;
            
        case CallVM:
            break;
            
        case VM_MultMatrix:
        case VM_pglTranslate:
        case VM_pglScale:
        case VM_pglRotate:
        case VM_pglRotateX:
        case VM_pglRotateY:
        case VM_pglRotateZ:
        case VM_pgluShapeTweenRatio:
            ushort VMOutputRegisterIndex;
            break;
        
        case VM_Branch:
            ushort VMOutputRegisterIndex;
            byte Count;
            short Offsets[Count];
            break;
            
        case pglCullFace_2:
        case pglCullFace_1:
            break;
            
        case pgluTexTableFromExternalTexSetByte:
            byte ExternalTexSetIndex;
            break;
            
        case pgluTexTableFromExternalTexSetUShort:
            short ExternalTexSetIndex;
            break;
           
        case pglVariableColorScale:
        case pglVariableColorOffset:
            float a;
            float b;
            float c;
            float d;
            break;
            
        case VM_pglVariableColorScale:
        case VM_pglVariableColorOffset:
            ushort VMOutputRegisterIndex;
            break;
            
        case pglDisable19_14:
            break;
            
        case VMCallback_Byte:
            byte UnkParam;
            break;
            
        case VMCallback_UShort:
            short UnkParam;
            break;
            
        default:
            stop = true;  
            break;
    }
} PGLCommand <optimize=false, comment=CommentCommand>;

string CommentCommand(PGLCommand& cmd)
{
    return EnumToString(cmd.cmd);
}

typedef struct
{
    stop = false;
    while (true)
    {
        PGLCommand cmd;
        if (stop)
            break;
    }

} PGLCommands;
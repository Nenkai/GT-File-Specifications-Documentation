//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct
{
    int Flag <comment="0, 0x248, 0x24C">;
    int DeflatedChunkOffset <format=hex, fgcolor=cPurple>;
    int DeflatedChunkSize <format=hex, fgcolor=cGreen>;
    int MeshDescriptorsOffset <format=hex, fgcolor=cRed>;
    short MeshCountInChunk <fgcolor=cGreen>;
    byte _pad_[0x0E] <fgcolor=cGray>;

    FSeek(BasePos + MeshDescriptorsOffset);
    struct
    {
        uint OffsetWithinShapeStream <format=hex, fgcolor=cRed>;
        short MeshIndex <fgcolor=cYellow>;
        short Unk;
    } ShapeStreamChunkMeshEntry[MeshCountInChunk];
    
} ShapeStreamChunkInfo;

typedef struct
{
    int ChunkIndicesOffset <format=hex, fgcolor=cRed>;
    short IndexCount;
    byte _empty_2[0x0A];

    FSeek(BasePos + ChunkIndicesOffset);
    int ChunkIndices[IndexCount]  <comment="To First Map">;
} ShapeStreamChunkGroup;


typedef struct
{
    int ShapeStreamChunkCount <fgcolor=cGreen>;
    int ShapeStreamChunkInfoOffset <format=hex, fgcolor=cRed>;
    int BufferSize <format=hex, fgcolor=cGreen, comment="Game aligns this to 0x80. VersionMajor > 1. See: GT6 1.22 EU FUN_008d5eec">;
    int ShapeStreamChunkGroupsOffset <format=hex, fgcolor=cRed>;
    int _empty_[3];
    short ShapeStreamChunkGroupCount <fgcolor=cGreen>;
    short a;

    local int n = 0;
    struct
    {
        local int n = 0;
        for (n = 0; n < ShapeStreamChunkCount; n++)
        {
            FSeek(BasePos + ShapeStreamChunkInfoOffset + (n * 0x20));
            ShapeStreamChunkInfo Chunk;
        }
    } ShapeStreamChunks;

    struct
    {
        local int n = 0;
        for (n = 0; n < ShapeStreamChunkGroupCount; n++)
        {
            FSeek(BasePos + ShapeStreamChunkGroupsOffset + (n * 0x10));
            ShapeStreamChunkGroup Groups;
        }
    } ShapeStreamChunkGroups;
    
} ShapeStreaming;
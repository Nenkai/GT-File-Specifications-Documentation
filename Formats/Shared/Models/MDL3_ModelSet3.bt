//------------------------------------------------
//--- 010 Editor v10.0.2 Binary Template
//
//      File: Gran Turismo 5 Model Header
//   Authors: Nenkai#9075
//   Version: 0.1
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

BitfieldDisablePadding();

typedef struct
{
    string str;
} String <read=str>;

typedef struct
{
    float X;
    float Y;
    float Z;
} Vec3 <fgcolor=cLtBlue>;

typedef struct
{
    float R;
    float G;
    float B;
    float A;
} Color4 <fgcolor=cLtBlue>;

void SetEndian()
{
    if (ModelSetHeader.Magic == "3LDM")
        LittleEndian();
    else
        BigEndian();
}

local int max = 0;

typedef struct
{
    short A;
    short B;
    short C;
} Tri;

typedef struct
{
    int NameOffset <format=hex, fgcolor=cRed>;
    int ShaderID <fgcolor=cYellow>;
    
    FSeek(NameOffset);
    string Name;
    
    FSeek(startof(this) + 0x08);
} ShaderKey <read=Str("%s (%d)", Name, ShaderID)>;

// Required by MDL3MaterialMap, include it first
#include "SHDS_Shaders.bt"

#include "MDL3Model.bt"
#include "MDL3ModelKeys.bt"
#include "MDL3Shape.bt"
#include "MDL3ShapeKeys.bt"
#include "MDL3PSPShape.bt"
#include "MDL3MaterialSet.bt"
#include "MDL3FVFDefinitions.bt"
#include "MDL3VM.bt"
#include "MDL3ShapeStreaming.bt"
#include "MDL3SeparateCarData.bt"
#include "PackedMeshFlexVertKeys.bt"
#include "PackedMesh.bt"

typedef struct
{
    short Count1;
    short Count2;
    int empty[3];
    int UnkOffset <format=hex, fgcolor=cRed>;
} Unk0x74;

typedef struct
{   
    struct
    {
        char Magic[4];
        SetEndian();
        
        uint RelocFileSize <format=hex, comment="File wise relocation size, game prefers to use the one at 0x6C">;
        uint RelocPtr <format=hex>;
        short VersionMajor;
        short RuntimeFlags <comment="Set at runtime, ignore">;
        
        ushort ModelCount <fgcolor=cGreen>;
        ushort ModelKeyCount <fgcolor=cGreen>;
        ushort ShapeCount <fgcolor=cGreen>;
        ushort ShapeKeyCount <fgcolor=cGreen>;
        ushort FlexibleVertexDefinitionCount <fgcolor=cGreen>;
        ushort BonesCount <fgcolor=cGreen>;
        ushort SizeFor0x68;
        ushort VMHostMethodCount <fgcolor=cGreen>;
        ushort VMInstanceOutRegisterDwordSize <comment="this * 4">;
        ushort Count0x5C <fgcolor=cGreen>;
        ushort Unk;
        ushort Count0x78 <fgcolor=cGreen>;
        ushort Count0xA4 <fgcolor=cGreen>;
        ushort ConstantCount <fgcolor=cGreen, comment="Can be safely wiped? No changes (c053x GT6)">;
        ushort Count0x88 <fgcolor=cGreen>;
        ushort VMInstanceSize <format=hex, comment="under 0 = bundled instance size, above = external instance size (to be allocated)">;
        uint ModelsOffset <format=hex, fgcolor=cRed, comment="0x30 Stride">; // Figured (except a short value)
        uint ModelKeysOffset <format=hex, fgcolor=cRed, comment="0x08 Stride">; // Figured
        uint ShapesOffset <format=hex, fgcolor=cRed, comment="0x30 Stride">;
        uint ShapeKeysOffset <format=hex, fgcolor=cRed, comment="0x08 Stride">;
        uint FlexibleVertexDefinitionsOffset <format=hex, fgcolor=cRed, comment="0x78 Stride">;
        uint MaterialsOffset <format=hex, fgcolor=cRed, comment="Always 1 entry, 0x18 Stride">;
        uint TextureSetOffset <format=hex, fgcolor=cRed, comment="Alone">;
        uint ShadersOffset <format=hex, fgcolor=cRed, comment="Own component">;
        uint BonesOffset <format=hex, fgcolor=cRed, comment="0x48 Stride">;
        uint ConstantsOffset <format=hex, fgcolor=cRed, comment="0x4 Stride">;
        uint VMHostMethodsOffset <format=hex, fgcolor=cRed, comment="0x8 Stride">;
        uint Offset0x5C <format=hex, fgcolor=cRed, comment="0x8 Stride">;
        uint VMCommandsOpcodesLength <format=hex, fgcolor=cGreen>;
        uint VMCommandsOffset <format=hex, fgcolor=cRed, comment="Possibly own thing, opcodes for animations">;
        uint VMInstanceOffset <format=hex, fgcolor=cRed, comment="Possibly own thing">;
        uint RelocSize <format=hex>;
        uint PossiblyEmpty;
        uint RuntimeValue <comment="Set to 0 after mapping">;
        uint Offset0x78 <format=hex, fgcolor=cRed, comment="0x14 Stride">;
        uint Unk_0x7C <comment="Used if Version >= 3, see GT6 1.22 EU FUN_008e3f24">;
        uint PossiblyEmpty;
        ushort UnkIndex <comment="Set to -1 at runtime if Version > 4">;
        ushort UnkIndex <comment="Set to -1 at runtime if Version > 4">;
        uint Offset0x88 <format=hex, fgcolor=cRed, comment="0x28 Stride, points to a map already discovered in materials">;
        short Unk0x8C;
        ushort TextureKeyCount <fgcolor=cGreen>;
        uint TextureKeysOffset <format=hex, fgcolor=cRed, comment="0x8 Stride">;
        uint PossiblyEmpty;
        ushort WingDataCount <comment="If VersionMajor < 7">;
        ushort WingKeyCount;
        uint WingDataOffset <format=hex, fgcolor=cRed, comment="If VersionMajor < 7, 0x80 Stride">;
        uint WingKeysOffset <format=hex, fgcolor=cRed, comment="0x8 Stride">;
        uint Offset0xA4 <format=hex, fgcolor=cRed, comment="0x4 Stride">;
        uint PSPShapesOffset <format=hex, fgcolor=cRed, comment="0x20 Stride, PSP Only, used if the offset isn't 0, otherwise use Shape Offset at 0x38">;
        
        if (VersionMajor >= 2)
        {
            uint ShapeStreamingMapOffset <format=hex, fgcolor=cRed, comment="If VersionMajor > 1, always 1 entry, Stride 0x20">;
            uint Offset0xB0 <format=hex, fgcolor=cRed, comment="If VersionMajor > 1, Stride 0x40">;
        }
        
        // Not sure where to shove this version wise so just put it if version >= 2
        if (VersionMajor >= 2)
        {
            // Used when sending PackedMesh data.
            // Specifically, this is m_mmLengthInQwords in a WwsJob command, for the SmoothMesh spu job
            // Relevant function: 0x0086acf4 (GT6 1.00) 0x008eb430 (GT6 1.22) which I called "ModelSet3::BuildAndSubmitSmoothMeshJobCommands"
            uint UnkSpuJobBufferSizeQwords <comment="Needs checking">;
        }
        
        if (VersionMajor >= 3)
        {
            
            uint Offset0xB8 <format=hex, fgcolor=cRed, comment="If VersionMajor > 2, Own thing">;
        }

        if (VersionMajor >= 6)
        {
            uint VMContextOffset <format=hex, fgcolor=cRed, comment="If VersionMajor > 5, always 1 entry, Stride 0x20, refer to GT6 EU 1.22 FUN_00834ed0">;
            uint Offset0xC0 <format=hex, fgcolor=cRed, comment="If VersionMajor > 5, always 1 entry, Stride 0x20">;
            ushort Count0xC0 <fgcolor=cGreen, comment="If VersionMajor > 5">;
            ushort Unk_0xC6 <comment="Used if Version > 5. refer to GT6 1.22 EU FUN_008e38a8">;
        }
        
        if (VersionMajor >= 8)
        {
            short Unk_0xC8 <comment="Used if Version > 7, refer to GT6 1.22 EU FUN_008e3888 - VM related? Allocates 0x40 if not -1">;   
        }
        
        if (VersionMajor >= 9)
        {
            ushort PackedMeshFlexVertShaderKeyCount <fgcolor=cGreen, comment="If VersionMajor > 8">;
            uint PackedMeshFlexVertShaderKeysOffset <format=hex, fgcolor=cRed, comment="If VersionMajor > 8">;
            uint PackedMeshHeaderOffset <format=hex, fgcolor=cRed, comment="Own Thing, If VersionMajor > 8">;
            int unk;
            int empty;   
        }
        
        if (VersionMajor >= 14)
        {
            uint CarBodyStreamOffset <format=hex, fgcolor=cRed, comment="Own Thing, If VersionMajor > 13">;   
        }
    } ModelSetHeader <bgcolor=cPurple>;

    local int i = 0;
    if (ModelSetHeader.ModelCount > 0)
    {
        FSeek(startof(ModelSetHeader) + ModelSetHeader.ModelsOffset);
        struct
        {
            for (i = 0; i < ModelSetHeader.ModelCount; i++)
            {
                FSeek(startof(ModelSetHeader) + ModelSetHeader.ModelsOffset + (i * 0x30));
                Model Model_;
            }
        } Models <comment="Defines each model in the model set, refer to ModelKeys for the name of each model">;
    }

    if (ModelSetHeader.ModelKeysOffset != 0)
    {
        FSeek(startof(ModelSetHeader) + ModelSetHeader.ModelKeysOffset);
        ModelKeys ModelKeys_ <comment="Holds the names of each model. Each entry is alphabetically ordered for bsearch">;
    }

    if (ModelSetHeader.ShapeCount && ModelSetHeader.ShapesOffset)
    {
        FSeek(startof(ModelSetHeader) + ModelSetHeader.ShapesOffset);
        struct
        {
            for (i = 0; i < ModelSetHeader.ShapeCount; i++)
            {
                FSeek(startof(ModelSetHeader) + ModelSetHeader.ShapesOffset + (i * 0x30));
                Shape Shape_;
            }
        } Shapes_;
    }
    
    if (ModelSetHeader.ShapeCount && ModelSetHeader.PSPShapesOffset)
    {
        FSeek(startof(ModelSetHeader) + ModelSetHeader.PSPShapesOffset);
        struct
        {
            for (i = 0; i < ModelSetHeader.ShapeCount; i++)
            {
                FSeek(startof(ModelSetHeader) + ModelSetHeader.PSPShapesOffset + (i * 0x20));
                PSPShape Shape_;
            }
        } PSPShapes_;
    }

    if (ModelSetHeader.ShapeKeysOffset != 0)
    {
        FSeek(startof(ModelSetHeader) + ModelSetHeader.ShapeKeysOffset);
        ShapeKeys ShapeKeys_ <comment="Holds the names of each shape (mesh). Each entry is alphabetically ordered for bsearch">;
    }


    if (ModelSetHeader.FlexibleVertexDefinitionCount > 0)
    {
        struct FVFDefinitionMap
        {
            for (i = 0; i < ModelSetHeader.FlexibleVertexDefinitionCount; i++)
            {
                FSeek(startof(ModelSetHeader) + ModelSetHeader.FlexibleVertexDefinitionsOffset + (i * 0x78));
                FlexibleVertexDefinition FlexVertDef;

                FSeek(FTell());
            }
            
        } FlexibleVertexDefinitions <comment="Defines flexible vertices for the shapes (meshes)">;
    }

    if (ModelSetHeader.MaterialsOffset != 0)
    {
        FSeek(startof(ModelSetHeader) + ModelSetHeader.MaterialsOffset);
        MaterialMap MaterialSet;
    }


    if (ModelSetHeader.TextureSetOffset != 0)
    {
        FSeek(startof(ModelSetHeader) + ModelSetHeader.TextureSetOffset);
        TextureSet3 TextureSet;
    }

    if (ModelSetHeader.ShadersOffset != 0) 
    {
        FSeek(startof(ModelSetHeader) + ModelSetHeader.ShadersOffset);
        ShaderSet ShaderSet_;
    }

    if (ModelSetHeader.ConstantCount > 0)
    {
        FSeek(startof(ModelSetHeader) + ModelSetHeader.ConstantsOffset);
        struct
        {
            int KeyOffsets[ModelSetHeader.ConstantCount] <format=hex, fgcolor=cRed>;
            for (i = 0; i < ModelSetHeader.ConstantCount; i++)
            {
                FSeek(startof(ModelSetHeader) + KeyOffsets[i]);
                struct
                {
                    uint KeyNameOffset <format=hex, fgcolor=cRed>;
                    
                    // Known hardcoded ID lookups: 399, 300, 400, 500 (slotGroup)
                    ushort UnkID <comment="Sometimes this is looked up by ID rather than name">;
                    ushort ValueSize;
            
                    if (ValueSize > 0)
                        float Values[ValueSize];
                    
                    if (KeyNameOffset != 0)
                    {
                        FSeek(startof(ModelSetHeader) + KeyNameOffset);
                        string Name;
                    }
                    
                    FSeek(startof(this) + 0x08);
                } KeyDef <read=Str("%s (%d)", Name, UnkID)>;
            }
            
        } Constants <comment="Largely used to define custom data the game can refer to. Mainly looked up by name, sometimes ID. Refer to GT6 EU 1.22 FUN_8e5de0 and FUN_8e56cc">;
    }

    if (ModelSetHeader.VMHostMethodCount > 0)
    {
        VMHostMethods VMHostMethods_ <comment="Refer to GT6 EU 1.22 FUN_008e5e74">;
    }
    
    if (ModelSetHeader.VMCommandsOpcodesLength > 0)
    {
        FSeek(startof(ModelSetHeader) + ModelSetHeader.VMCommandsOffset);
        VMCommands VMCommands_ <bgcolor=cBlack>;
    }

    if (ModelSetHeader.Offset0x78 > 0)
    { 
         FSeek(startof(ModelSetHeader) + ModelSetHeader.Offset0x78);
         struct 
         { 
             short UnkA;
             short UnkB;
             int empty;
             int empty;
             int empty;
             int EmptyStorageOffset <format=hex>;
         } Unk0x78Entry[ModelSetHeader.Count0x78];
    }

    if (ModelSetHeader.TextureKeyCount > 0)
    {
        FSeek(startof(ModelSetHeader) + ModelSetHeader.TextureKeysOffset);
        struct
        {
            for (i = 0; i < ModelSetHeader.TextureKeyCount; i++)
            {
                FSeek(startof(ModelSetHeader) + ModelSetHeader.TextureKeysOffset + (i * 0x08));
                TextureKey TextureKey_;
            }
        } TextureKeys <comment="We already go through those in materials">;
    }

    if (ModelSetHeader.ShapeStreamingMapOffset > 0)
    {
        FSeek(startof(ModelSetHeader) + ModelSetHeader.ShapeStreamingMapOffset);
        ShapeStreaming ShapeStreamingMap;
    }

    if (ModelSetHeader.Offset0xB8 != 0)
    {
        FSeek(startof(ModelSetHeader) + ModelSetHeader.Offset0xB8);
        VMRelated_0xB8 UnkVM_0xB8;
    }

    if (ModelSetHeader.VersionMajor >= 6 && ModelSetHeader.VMContextOffset > 0)
    {
        FSeek(startof(ModelSetHeader) + ModelSetHeader.VMContextOffset);
        VMContext VmContext_;
    }

    if (ModelSetHeader.VersionMajor >= 9 && ModelSetHeader.PackedMeshFlexVertShaderKeyCount > 0)
    {
        FSeek(startof(ModelSetHeader) + ModelSetHeader.PackedMeshFlexVertShaderKeysOffset);
        PacekdMeshFlexVertShaderKeys PackedMeshFlexVertShaderKeys_ <comment="Refer to GT6 EU 1.22 FUN_008e6134">;
    }
    
    if (ModelSetHeader.VersionMajor >= 9 && ModelSetHeader.PackedMeshHeaderOffset != 0)
    {
        FSeek(startof(ModelSetHeader) + ModelSetHeader.PackedMeshHeaderOffset);
        PMSH PackedMeshesHeader;
    }

    if (ModelSetHeader.WingDataCount > 0)
    {
        FSeek(startof(ModelSetHeader) + ModelSetHeader.WingDataOffset);
        struct
        {
            int a;
            short PreviousWingPartID;
            short ChildWingPartID;
            short NextWingPartID;
            short e;
            short f;
            short g;
            float Min1;
            float Min2;
            float Min3;
            float Max1;
            float Max2;
            float Max3;
            float AngleMin1;
            float AngleMin2;
            float AngleMin3;
            float AngleMax1;
            float AngleMax2;
            float AngleMax3;
            float Pitch;
            float Yaw;
            float Roll;
            float a;
            float X;
            float Y;
            float Z;
            float WholePitch;
            float WholeYaw;
            float WholeRoll;
            short UnkUnusedID1;
            short BoneID <comment="Refer to GT6 1.22 EU FUN_008df3e0">;
            int UnkUnusedID2;
            int UnkUnusedID3;
            int UnkUnusedID4;
            int unk;
            int unk;
        } WingData[ModelSetHeader.WingDataCount];
    }

    if (ModelSetHeader.VersionMajor >= 2 && ModelSetHeader.Offset0xB0 != 0)
    {
        FSeek(startof(ModelSetHeader) + ModelSetHeader.Offset0xB0);
        struct
        {
            for (i = 0; i < ModelSetHeader.ModelCount; i++)
            {
                struct
                {
                    uint IndicesOffset <format=hex, fgcolor=cRed>;
                    uint field_0x04;
                    uint field_0x08;
                    byte Unk[0x24];
                    ushort UnkIndexCount;
                    ushort Field_0x32;
                    byte Flags;
                    byte Field_0x35;
                    byte pad[0x0A];
                    
                    if (UnkIndexCount)
                    {
                        FSeek(startof(ModelSetHeader) + IndicesOffset);
                        short Indices[UnkIndexCount] <bgcolor=cBlack>;
                    }
                    
                    FSeek(startof(this) + 0x40);
                } Unk_0xB0Entry;
            }
        } Unk0xB0;
    }
    
    if (ModelSetHeader.VersionMajor > 13 && ModelSetHeader.CarBodyStreamOffset != 0)
    {
        FSeek(startof(ModelSetHeader) + ModelSetHeader.CarBodyStreamOffset);
        SeparateCarData SeparateCarStreamData;
    }
    
    FSeek(startof(this) + ModelSetHeader.RelocFileSize);
} ModelSet3 <open=true>;

if (ReadUInt() == 0x334C444D || ReadUInt() == 0x4D444C33)
{
    ModelSet3 ModelSet_;
}
else if (ReadUInt(0) == 0x334C444D || ReadUInt(0) == 0x4D444C33)
{
    FSeek(0);
    ModelSet3 ModelSet_;
}
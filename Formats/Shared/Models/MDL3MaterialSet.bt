//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "../Textures/TXS3_TextureSet3.bt"

BitfieldDisablePadding();

#define	CELL_GCM_NV4097_SET_SURFACE_CLIP_VERTICAL	(0x00000204)
#define	CELL_GCM_NV4097_SET_ALPHA_TEST_ENABLE	(0x00000304)
#define	CELL_GCM_NV4097_SET_DEPTH_FUNC	(0x00000a6c)
#define	CELL_GCM_NV4097_SET_CULL_FACE_ENABLE	(0x0000183c)

typedef enum <uint>
{
    // SetBlendFunc
	CELL_GCM_ZERO						= (0),
	CELL_GCM_ONE						= (1),
	CELL_GCM_SRC_COLOR					= (0x0300),
	CELL_GCM_ONE_MINUS_SRC_COLOR		= (0x0301),
	CELL_GCM_SRC_ALPHA					= (0x0302),
	CELL_GCM_ONE_MINUS_SRC_ALPHA		= (0x0303),
	CELL_GCM_DST_ALPHA					= (0x0304),
	CELL_GCM_ONE_MINUS_DST_ALPHA		= (0x0305),
	CELL_GCM_DST_COLOR					= (0x0306),
	CELL_GCM_ONE_MINUS_DST_COLOR		= (0x0307),
	CELL_GCM_SRC_ALPHA_SATURATE			= (0x0308),
	CELL_GCM_CONSTANT_COLOR				= (0x8001),
	CELL_GCM_ONE_MINUS_CONSTANT_COLOR	= (0x8002),
	CELL_GCM_CONSTANT_ALPHA				= (0x8003),
	CELL_GCM_ONE_MINUS_CONSTANT_ALPHA	= (0x8004),

    // SetAlphaFunc, DepthFunc, StencilFunc
    CELL_GCM_NEVER		= (0x0200),
	CELL_GCM_LESS		= (0x0201),
	CELL_GCM_EQUAL		= (0x0202),
	CELL_GCM_LEQUAL		= (0x0203),
	CELL_GCM_GREATER	= (0x0204),
	CELL_GCM_NOTEQUAL	= (0x0205),
	CELL_GCM_GEQUAL		= (0x0206),
	CELL_GCM_ALWAYS		= (0x0207),

    // SetLogicOp
	CELL_GCM_CLEAR			= (0x1500),
	CELL_GCM_AND			= (0x1501),
	CELL_GCM_AND_REVERSE	= (0x1502),
	CELL_GCM_COPY			= (0x1503),
	CELL_GCM_AND_INVERTED	= (0x1504),
	CELL_GCM_NOOP			= (0x1505),
	CELL_GCM_XOR			= (0x1506),
	CELL_GCM_OR				= (0x1507),
	CELL_GCM_NOR			= (0x1508),
	CELL_GCM_EQUIV			= (0x1509),
	CELL_GCM_INVERT			= (0x150A),
	CELL_GCM_OR_REVERSE		= (0x150B),
	CELL_GCM_COPY_INVERTED	= (0x150C),
	CELL_GCM_OR_INVERTED	= (0x150D),
	CELL_GCM_NAND			= (0x150E),
	CELL_GCM_SET			= (0x150F),

    // SetStencilOp
	CELL_GCM_KEEP		= (0x1E00),
	CELL_GCM_REPLACE	= (0x1E01),
	CELL_GCM_INCR		= (0x1E02),
	CELL_GCM_DECR		= (0x1E03),
	CELL_GCM_INCR_WRAP	= (0x8507),
	CELL_GCM_DECR_WRAP	= (0x8508),

    // SetBlendEquation
	CELL_GCM_FUNC_ADD				= (0x8006),
	CELL_GCM_MIN					= (0x8007),
	CELL_GCM_MAX					= (0x8008),
	CELL_GCM_FUNC_SUBTRACT			= (0x800A),
	CELL_GCM_FUNC_REVERSE_SUBTRACT	= (0x800B),
	CELL_GCM_FUNC_REVERSE_SUBTRACT_SIGNED	= (0x0000F005),
	CELL_GCM_FUNC_ADD_SIGNED				= (0x0000F006),
	CELL_GCM_FUNC_REVERSE_ADD_SIGNED		= (0x0000F007),

    // SetShadeMode
	CELL_GCM_FLAT	= (0x1D00),
	CELL_GCM_SMOOTH	= (0x1D01),
} CELL_GCM_ENUM;

typedef struct
{
    struct
    {
        CELL_GCM_METHOD method;
        int enable;
    } CELL_GCM_METHOD_SET_ALPHA_TEST_ENABLE;

    CELL_GCM_ENUM AlphaFunc;
    int AlphaFuncReference <format=hex>;

    CELL_GCM_ENUM BlendEnable;
    CELL_GCM_ENUM BlendFuncSfColor : 16;
    CELL_GCM_ENUM BlendFuncDfColor : 16;
    CELL_GCM_ENUM BlendFuncSfAlpha : 16;
    CELL_GCM_ENUM BlendFuncDfAlpha : 16;
    int BlendColor <format=hex>;
    CELL_GCM_ENUM BlendEquationColor : 16;
    CELL_GCM_ENUM BlendEquationAlpha : 16;

    struct
    {
        byte CELL_GCM_COLOR_MASK_A;
        byte CELL_GCM_COLOR_MASK_R;
        byte CELL_GCM_COLOR_MASK_G;
        byte CELL_GCM_COLOR_MASK_B;
    } ColorMask;

    int StencilTest;
    int StencilMask;
    CELL_GCM_ENUM StencilFunc;
    CELL_GCM_ENUM StencilFuncRef;
    CELL_GCM_ENUM StencilFuncMask;
    CELL_GCM_ENUM StencilOpFail;
    CELL_GCM_ENUM StencilOpZFail;
    CELL_GCM_ENUM StencilOpZPass;

    int TwoSidedStencilTestEnable;
    int BackStencilMask;
    CELL_GCM_ENUM BackStencilFunc;
    int BackStencilFuncRef;
    int BackStencilFuncMask;
    CELL_GCM_ENUM BackStencilOpFail;
    CELL_GCM_ENUM BackStencilOpZFail;
    CELL_GCM_ENUM BackStencilOpZPass;

    CELL_GCM_ENUM ShadeMode; // SetShadeMode

    int BlendEnableMRT;
    int ColorMaskMRT; // SetColorMaskMrt

    CELL_GCM_ENUM LogicOpEnable;
    CELL_GCM_ENUM LogicOp;

    struct
    {
        CELL_GCM_METHOD method;
        CELL_GCM_ENUM depth_func;
    } CELL_GCM_METHOD_SET_DEPTH_FUNC;
    
    CELL_GCM_ENUM DepthMask;
    CELL_GCM_ENUM DepthTestEnable;

    struct
    {
        CELL_GCM_METHOD method;
        int enable;
    } CELL_GCM_METHOD_SET_CULL_FACE_ENABLE;

    int unk;

    byte unk : 4;
    byte unk2 : 4;

    byte unk;
    short unk;

    int unk;
    
    FSeek(startof(this) + 0xA0);
} CellGcmParam <optimize=false, comment="cell\gcm\gcm_macros.h">;

typedef struct
{
    int StringOffset <fgcolor=cRed, format=hex>;
    int TextureIndex <fgcolor=cYellow>;
    
    FSeek(startof(ModelSetHeader) + StringOffset);
    string Name;
    
    FSeek(startof(this) + 0x08);
} TextureKey <read=Str("%s (%d)", Name, TextureIndex)>;

typedef struct
{
    int NameOffset <fgcolor=cRed, format=hex>;
    ushort ShaderParameterID <fgcolor=cYellow, bgcolor=cDkYellow>;
    ushort CellGcmParamID <fgcolor=cYellow, bgcolor=cDkYellow>;
    short Flags <bgcolor=cDkYellow, comment="fetched at GT6 EU 1.22 FUN_008f6458">;
    short KeyCount <fgcolor=cGreen, bgcolor=cDkYellow, comment="If Flag & 1 then count is > 1">;
    int KeysOffset <format=hex, fgcolor=cRed, bgcolor=cDkYellow, comment="If Flag & 1 then count exists, 0x08 Stride">;
    byte padding[0x24] <bgcolor=cDkYellow>;


    local int n = 0;
    for (n = 0; n < KeyCount; n++)
    {
        FSeek(startof(ModelSetHeader) + KeysOffset + (n * 8));
        TextureKey Key;
    }

    if (NameOffset != 0)
    {
        FSeek(NameOffset);
        string Name;
    }
    
    FSeek(startof(this) + 0x34);
} Material <read=Str("%s (ShaderParam: %d, GcmParam: %d)", Name, ShaderParameterID, CellGcmParamID)>;

typedef struct
{
    int StringOffset <fgcolor=cRed, format=hex>;
    int UnkIndex <fgcolor=cYellow, comment="0 to 1?">;
    FSeek(startof(ModelSetHeader) + StringOffset);
    string Name;
    
    FSeek(startof(this) + 0x08);
} MaterialColorKey <read=Str("%s (%d)", Name, UnkIndex)>;

typedef struct
{
    ShaderKey ShaderKey_ <comment="For Shaders offset 0x3C", fgcolor=cYellow, bgcolor=cLtGray>;
    int _empty_ <bgcolor=cLtGray>;
    int UnkOffset <format=hex, fgcolor=cRed, bgcolor=cLtGray>;
    short CountForParent0x24 <bgcolor=cLtGray>;
    short UnkCount2 <bgcolor=cLtGray>;
    int UnkOffset <format=hex, fgcolor=cRed, bgcolor=cLtGray>;
    int KeyCount <bgcolor=cLtGray>;
    int KeyOffset <format=hex, fgcolor=cRed, bgcolor=cLtGray>;
    byte padMaybe[8] <bgcolor=cLtGray>;

    FSeek(startof(this) + 0x28);
} MaterialData0x14 <comment="NOTE: This structure is also pointed to directly by the model set header (offset 0x88). Refer to GT6 EU 1.22 FUN_008f7f5c">;

typedef struct
{
    int DataCount;
    int DataOffset <fgcolor=cRed, format=hex>;
} Material2Unk;

typedef struct
{
    // Mainly used for CELL_GCM_METHOD_SET_TRANSFORM_CONSTANT_LOAD_4U
    // Refer to GT6 EU 1.22 00c4c250 which I called CellGcm::SetTransformConstantLoad
    ushort ColorIndexStart;
    
    // Refer to GT6 EU 1.22 00c4c2a4, passed to a CELL_GCM_NV4097_SET_TRANSFORM_CONSTANT_LOAD command
    // Aswell as 00c49f24, passed to a CELL_GCM_NV308A_COLOR command
    ushort LoadAt <comment="CellDbgRsxBundleStateTransformConstantLoad says: Constants slot number of load destination">;
    ushort ColorCount <comment="1 = one color into array, 0x10 stride">;
    ushort pad;
} MaterialColorRef;

typedef struct
{
    int NameOffset <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="Own Thing">;
    int SetIndex <fgcolor=cYellow, bgcolor=cDkGray>;  
    byte Unk <bgcolor=cDkGray>;
    byte Version <bgcolor=cDkGray>;
    short ColorKeyCount <fgcolor=cGreen, bgcolor=cDkGray>;
    int ColorsOffset <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="Own Thing">;
    if (Version == 0)
    {
        int UnkOffset0x10 <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="If Version == 0, 0x08 Strides">;
        FSkip(0x10);
        int UnkOffset0x24 <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="If Version == 0, 0x20 Strides">;
        /**(undefined2 *)(this->field_0x24 + 0x14) = 0xffff;
          *(undefined2 *)(this->field_0x24 + 0x16) = 0xffff;
          *(undefined2 *)(this->field_0x24 + 0x18) = 0xffff; */
    }
    else if (Version == 1)
    {
        int UnkOffset0x10 <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="If Version == 1, 0x08 Strides">;
        FSkip(0x04);
        int UnkOffset0x18 <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="If Version == 1, Own Thing">;
        int UnkOffset0x1C <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="If Version == 1, Own Thing">;
        int UnkOffset0x20 <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="If Version == 1, Own Thing">;
        int UnkOffset0x24 <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="If Version == 1, Own Thing">;
    }
    else if (Version == 2)
    {
        // NOTE: At runtime this is replaced by UnkOffset0x14->0x1C if this is 0!
        int ColorKeysOffset <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="If Version == 2, Own Thing">;
        int UnkOffset0x14 <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="If Version == 2, Own Thing">;
        int UnkOffset0x18 <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="If Version == 2, 0x08 Strides">;
        int UnkOffset0x1C <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="If Version == 2, Own Thing">;
        ushort Count_0x20 <bgcolor=cDkGray, comment="Refer to GT6 EU 1.22 008f6c60, Count for UnkOffset0x1C">;
        short Count0x22 <fgcolor=cGreen, bgcolor=cDkGray>;
        int ShaderReferencesOffset0x24 <format=hex, fgcolor=cRed, bgcolor=cDkGray, comment="Same as 0x14 - Stride 0x20 - If Version == 2">;
        /* if (this->field_0x10 == 0x0) {
            this->field_0x10 = *(int *)(this->field_0x14 + 0x1c); */
    }
    
    if (NameOffset > 0)
    {
        FSeek(startof(ModelSetHeader) + NameOffset);
        string Name <comment="Used when addressing shaders (to shaders's defs 0x1C)">;
    }

    local int n = 0;
    for (n = 0; n < ColorKeyCount; n++)
    {
        FSeek(startof(ModelSetHeader) + ColorKeysOffset + (n * 8));
        MaterialColorKey ColorKey_;
    }
        
    if (ColorKeyCount > 0 && ColorsOffset != 0)    
    {
        FSeek(startof(ModelSetHeader) + ColorsOffset);
        Color4 ColorsArray[1] <fgcolor=cLtBlue, comment="Variable size. Ref'ed by ShaderRef->ProgramColorRef->ColorIndexStart, multiply by 0x10, then ColorCount * 0x10 for total size">;
    }
    
    if (Version == 2)
    {
        FSeek(startof(ModelSetHeader) + UnkOffset0x14);
        MaterialData0x14 unk0x14;

        FSeek(startof(ModelSetHeader) + UnkOffset0x18);
        Material2Unk unk0x18;

        if (UnkOffset0x1C > 0)
        {
    
        }

        if (ShaderReferencesOffset0x24 != 0)
        {
            FSeek(startof(ModelSetHeader) + ShaderReferencesOffset0x24);
            struct
            {
                short VertexProgramColorRefCount <fgcolor=cGreen, comment="Refer to GT6 EU 1.22 008f6d4c, related to program offset (0)">;
                short FragmentProgramColorRefCount <fgcolor=cGreen, comment="Refer to GT6 EU 1.22 008f6e50, related to program offset (1)">;
                int VertexProgramColorRefsOffset <fgcolor=cRed, format=hex, comment="Uses Count_0x00, related to program offset (0)">;
                int FragmentProgramColorRefsCount <fgcolor=cRed, format=hex, comment="Uses Count_0x02, related to program offset (1)">;
                int VertexProgramOffset <fgcolor=cRed, format=hex>;
                int FragmentProgramOffset <fgcolor=cRed, format=hex>;
                int field_0x14;
                short field_0x18;
                short field_0x1A;
                int field_0x1C;

                if (VertexProgramColorRefCount)
                {
                    FSeek(startof(ModelSetHeader) + VertexProgramColorRefsOffset);
                    MaterialColorRef Program0ColorRef[VertexProgramColorRefCount];
                }
                
                if (FragmentProgramColorRefCount)
                {
                    FSeek(startof(ModelSetHeader) + FragmentProgramColorRefsCount);
                    MaterialColorRef Program1ColorRef[FragmentProgramColorRefCount];
                }
                
                if (VertexProgramOffset != 0)
                {
                    FSeek(startof(ModelSetHeader) + VertexProgramOffset);
                    VertexShader VertexProgram_;   
                }
                
                if (FragmentProgramOffset != 0)
                {
                    FSeek(startof(ModelSetHeader) + FragmentProgramOffset);
                    FragmentShader FragmentProgram_;   
                }
                
                FSeek(startof(this) + 0x20);
            } ShaderReferences;
        }
    }

    
    FSeek(startof(this) + 0x28);
} MaterialShaderParameter <read=Str("%s (%d)", Name, SetIndex)>;


typedef struct
{
    ushort MaterialCount <fgcolor=cGreen, comment="Debug assert in 1668.elf: 'nMaterials_'">;
    ushort ShaderParameterCount <fgcolor=cGreen, comment="Debug assert in 1668.elf: 'nShaderParameters_'">;
    byte unk <comment="Unknown, used like: MaterialCount / this, refer to GT6 EU 1.22 FUN_8e5580">;
    byte CellGcmParamCount_0x10 <fgcolor=cGreen>;
    ushort TextureParameterCount <fgcolor=cGreen>;
    uint MaterialsOffset <format=hex, fgcolor=cRed, comment="0x34 Stride">;
    uint ShaderParametersOffset <format=hex, fgcolor=cRed, comment="0x28 Stride">;
    uint CellGcmParamsOffset_0x10 <format=hex, fgcolor=cRed, comment="Own Thing, If Version < 13">;
    uint TextureParameterMapOffset <format=hex, fgcolor=cRed, comment="0x44 Stride">;

    local int j = 0;
    if (MaterialCount > 0)
    {
        struct 
        {
            for (j = 0; j < MaterialCount; j++)
            {
                FSeek(startof(ModelSetHeader) + MaterialsOffset + (j * 0x34));
                Material Material_ <comment="0x34 Stride">;
            }
        } Materials;
    }

    if (ShaderParameterCount > 0)
    {
        struct
        {
            for (j = 0; j < ShaderParameterCount; j++)
            {
                FSeek(startof(ModelSetHeader) + ShaderParametersOffset + (j * 0x28));
                MaterialShaderParameter ShaderParameter_;
            }
        } ShaderParameters;
    }

    if (CellGcmParamCount_0x10 > 0)
    {
        FSeek(startof(ModelSetHeader) + CellGcmParamsOffset_0x10);
        struct
        {
            local int k = 0;
            for (k = 0; k < CellGcmParamCount_0x10; k++)
            {
                FSeek(startof(ModelSetHeader) + CellGcmParamsOffset_0x10 + (k * 0xA0));
                CellGcmParam GcmParam <optimize=false, comment="cell\gcm\gcm_macros.h">;
            }
        } CellGcmParams;
    }

    if (TextureParameterCount > 0)
    {
        FSeek(startof(ModelSetHeader) + TextureParameterMapOffset);
        struct
        {
            local int k = 0;
            for (k = 0; k < TextureParameterCount; k++)
            {
                FSeek(startof(ModelSetHeader) + TextureParameterMapOffset + (k * 0x44));
                PGLUTextureInfoPS3 TextureParameter;
            }
        } TextureParameters  <comment="May have more entries than images, but image ids will fit the TXS count and will have different parameters such as Aniso">;
    }

    FSeek(startof(this) + 0x1C);
 } MaterialMap;
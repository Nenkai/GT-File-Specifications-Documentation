//------------------------------------------------
//--- 010 Editor v10.0.2 Binary Template
//
//      File: TXS3 Gran Turismo Image Header Specifics
//   Authors: Nenkai#9075
//   Version: 1.0
//   Purpose: Texture Files
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "../../Sony/Graphics/CellGcmEnums.bt"
#include "../../Sony/Graphics/GEEnums.bt"

BitfieldDisablePadding();

void FSeekWithRelocation(int64 offset)
{
    FSeek(startof(Header) + (offset - Header.RelocPtr));
}

typedef struct 
{
    int UnkOffset1 <fgcolor=cRed, format=hex>;
    int field_0x04;
    float field_0x08;
    float field_0x0C;
    float field_0x10;
    float field_0x14;
    
    SCE_GE_TMAP SCE_GE_TMAP_;
    SCE_GE_TSHADE SCE_GE_TSHADE_;
    SCE_GE_TMODE SCE_GE_TMODE_;
    SCE_GE_TPF SCE_GE_TPF_;
    SCE_GE_CLOAD SCE_GE_CLOAD_;
    SCE_GE_CLUT SCE_GE_CLUT_;
    SCE_GE_TFILTER SCE_GE_TFILTER_;
    SCE_GE_TWRAP SCE_GE_TWRAP_;
    SCE_GE_TLEVEL SCE_GE_TLEVEL_;
    SCE_GE_TFUNC SCE_GE_TFUNC_;
    SCE_GE_TEC SCE_GE_TEC_;
    int _RuntimeClutOffset;
    
    struct
    {
        int RelocPtr;
        ushort Width;
        byte Unk : 5; // 1 << Unk
        byte     : 3;
        byte Index;
    } MipInfo[8];
    
    short _empty;
    short ClutMapEntryIndex;
    short _empty;
    short ImageInfoIndex;
    int _empty;
    int FileNameOffset <format=hex, fgcolor=cRed>;
    
    FSeekWithRelocation(UnkOffset1);
    struct
    {
        if (ClutMapEntryIndex != -1)
        {
            SCE_GE_CBP SCE_GE_CBP_;
            SCE_GE_CBP SCE_GE_CBW_;
        }
        
        SCE_GE_TBP0 SCE_GE_TBP0_;
        SCE_GE_TBW0 SCE_GE_TBW0_;
        SCE_GE_TSIZE0 SCE_GE_TSIZE0_;
        SCE_GE_SU SCE_GE_SU_;
        SCE_GE_SV SCE_GE_SV_;
        SCE_GE_TU SCE_GE_TU_;
        SCE_GE_TV SCE_GE_TV_;
        SCE_GE_TMAP SCE_GE_TMAP_;
        SCE_GE_TMODE SCE_GE_TMODE_;
        SCE_GE_TPF SCE_GE_TPF_;
        SCE_GE_TFILTER SCE_GE_TFILTER_;
        SCE_GE_TWRAP SCE_GE_TWRAP_;
        SCE_GE_TLEVEL SCE_GE_TLEVEL_;
        SCE_GE_TFUNC SCE_GE_TFUNC_;
        SCE_GE_TEC SCE_GE_TEC_;
        SCE_GE_CLUT SCE_GE_CLUT_;
        SCE_GE_CLOAD SCE_GE_CLOAD_;
    } SubTextureParams <bgcolor=cRed>;
    
    FSeekWithRelocation(FileNameOffset);
    string FileName;
} PGLUTextureInfoPSP <read=FileName, bgcolor=cYellow, optimize=false>;

string PrintFormat(ubyte& format)
{
    string str = "";
    local CELL_GCM_TEXTURE_FORMAT actualFormat = format & 0b10011111;
    SPrintf(str, "%s (0x%x)", EnumToString(actualFormat), actualFormat);

    local int bit = (format >> 5) & 1;
    str += bit != 0 ? " - CELL_GCM_TEXTURE_LN (Bit 6)" : " - CELL_GCM_TEXTURE_SZ (Bit 6)";

    bit = (format >> 6) & 1;
    str += bit != 0 ? " - CELL_GCM_TEXTURE_UN (Bit 5)" : " - CELL_GCM_TEXTURE_NR (Bit 5)";
    return str;
}

typedef struct 
{
    struct
    {
        CELL_GCM_METHOD offset <comment="Normally CELL_GCM_NV4097_SET_TEXTURE_OFFSET aka 0x1A00 + (index * 0x20)">;
    } CELL_GCM_METHOD_HEADER_TEXTURE_OFFSET;

    // CELL_GCM_METHOD_DATA_TEXTURE_OFFSET
    struct
    {
        uint offset <format=hex>;
    } CELL_GCM_METHOD_DATA_TEXTURE_OFFSET;

    struct
    {
        byte pad;
        byte mipmap;
        ubyte format : 8 <comment=PrintFormat>;
        CELL_GCM_TEXTURE_DIMENSION dimension : 4;
        CELL_GCM_TEXTURE_BORDER border : 1;
        CELL_GCM_BOOL cubemap : 1 <comment="whether cube map is enabled">;
        CELL_GCM_LOCATION location : 2 <comment="Remove 1. fragment program location, 0 = local memory, 1 = main memory">;
    } CELL_GCM_METHOD_DATA_TEXTURE_BORDER_FORMAT;

    struct
    {
        CELL_GCM_TEXTURE_ZFUNC zfunc : 4;
        byte gamma : 8;
        CELL_GCM_TEXTURE_WRAP wrap_r : 4;
        CELL_GCM_TEXTURE_UNSIGNED_REMAP unsignedRemap : 4;
        CELL_GCM_TEXTURE_WRAP wrap_t : 4 <comment="adjustment when the T coordinate exceeds the texture size">;
        byte anisoBias : 4;
        CELL_GCM_TEXTURE_WRAP wrap_s : 4 <comment="adjustment when the S coordinate exceeds the texture size">;
    } CELL_GCM_METHOD_DATA_TEXTURE_ADDRESS;

    struct
    {
        CELL_GCM_BOOL enable : 1 <comment="stipple polygon rendering">;
        short minlod : 12;
        short maxlod : 12;
        CELL_GCM_TEXTURE_MAX_ANISO maxAniso : 3;
        byte pad : 1;
        CELL_GCM_BOOL alphakill : 1;
        byte pad : 2;
    } CELL_GCM_METHOD_DATA_TEXTURE_CONTROL0_ALPHA_KILL;
    
    struct
    {
        int pad : 15;
        CELL_GCM_TEXTURE_REMAP_ORDER remapOrder : 1;
        CELL_GCM_TEXTURE_REMAP_OUT OutB : 2;
        CELL_GCM_TEXTURE_REMAP_OUT OutG : 2;
        CELL_GCM_TEXTURE_REMAP_OUT OutR : 2;
        CELL_GCM_TEXTURE_REMAP_OUT OutA : 2;
        CELL_GCM_TEXTURE_REMAP_FROM InB : 2;
        CELL_GCM_TEXTURE_REMAP_FROM InG : 2;
        CELL_GCM_TEXTURE_REMAP_FROM InR : 2;
        CELL_GCM_TEXTURE_REMAP_FROM InA : 2;
    } CELL_GCM_METHOD_DATA_TEXTURE_CONTROL1;

    struct
    {
        CELL_GCM_BOOL bs : 1;
        CELL_GCM_BOOL gs : 1;
        CELL_GCM_BOOL rs : 1;
        CELL_GCM_BOOL as : 1;
        CELL_GCM_TEXTURE_MAG mag : 4 <comment="filter type for texture reduction">;
        CELL_GCM_TEXTURE_MIN min : 8 <comment="filter type for texture enlargement">;
        CELL_GCM_TEXTURE_CONVOLUTION convultion : 3 <comment="convolution filter formula">;
        short bias : 13 <comment="bias value for mipmap level in texture reductions">;
    } CELL_GCM_METHOD_DATA_TEXTURE_FILTER_SIGNED;

    struct
    {
        ushort width;
        ushort height;
    } CELL_GCM_METHOD_DATA_TEXTURE_IMAGE_RECT;

    struct
    {
        uint borderColor;
    } CELL_GCM_METHOD_DATA_TEXTURE_BORDER_COLOR;

    struct
    {
        CELL_GCM_METHOD method <comment="Normally CELL_GCM_METHOD_ADDRESS_TEXTURE_CONTROL3 aka 0x1840 + (index * 4)">;
    } CELL_GCM_METHOD_HEADER_TEXTURE_CONTROL3;

    struct
    {
        uint depth : 12;
        uint pitch : 20;
    } CELL_GCM_METHOD_DATA_TEXTURE_CONTROL3;

    struct
    {
        CELL_GCM_METHOD method <comment="Normally CELL_GCM_METHOD_ADDRESS_TEXTURE_CONTROL2 aka 0xb00 + (index * 4)">;
    } CELL_GCM_METHOD_HEADER_TEXTURE_CONTROL2;

    struct
    {
        int _0x2D : 24 <format=hex, comment="Should always be 0x2D">;
        CELL_GCM_TEXTURE_ANISO aniso : 1;
        CELL_GCM_TEXTURE_ISO iso : 1;
        int slope : 6;
    } CELL_GCM_METHOD_DATA_TEXTURE_CONTROL2;

    uint reserved0;
    uint reserved1;
    uint ImageID;
    uint ImageNameOffset <format=hex, fgcolor=cRed>;

    local int cPos = FTell();
    if (ImageNameOffset != 0)
    {
        FSeek(ImageNameOffset);
        string ImageName <bgcolor=cGray>;
    }
    FSeek(cPos);

} PGLUTextureInfoPS3 <read=ImageName, bgcolor=cYellow, optimize=false>;

typedef struct 
{
    int unk <format=hex, comment="Always 0">;
    int StreamOffset <format=hex, fgcolor=cRed>;
    int CompressedSize <format=hex, fgcolor=cDkGreen>;
    int UncompressedSize <format=hex, fgcolor=cGreen>;
} StreamTextureMapInfo <optimize=false, bgcolor=cDkPurple>;

typedef struct StreamTextureMapSet
{
   int StreamTextureMapOffset <format=hex>;
   int ImageInfoCount <fgcolor=cGreen>;
   int unk;
   int TotalUncompressedSetSize <format=hex>;
   short unk;
   short Width;
   short Width2;
   short unk2;
   int _pad_[2];
   
   local int cPos = FTell();
   FSeekWithRelocation(StreamTextureMapOffset);
   StreamTextureMapInfo streamFileInfo[ImageInfoCount];
   
   FSeek(cPos);
} StreamMap <bgcolor=cLtBlue, bgcolor=cPurple>;

typedef struct
{
    uint ImageOffset <format=hex, fgcolor=cRed>;
    uint ImageSize <format=hex>;
    byte _two_; // 0x20 flag when running
    ubyte ImageFormat : 8 <comment=PrintFormat>;
    byte MipmapCount;
    byte _two2_;
    ushort ImageWidth;
    ushort ImageHeight;
    ushort Unk;
    ushort Unk2;

    int pad;
    int StreamTextureMapSetOffset <format=hex, fgcolor=cRed>;
    int pad;

    local int cPos = FTell();
    if (StreamTextureMapSetOffset != 0)
    {
        FSeekWithRelocation(StreamTextureMapSetOffset);
        StreamMap map;
    }

    FSeek(cPos);
} TextureBufferInfo <optimize=false>;

typedef struct (int arrSize)
{
    TextureBufferInfo images[arrSize];
} ImageDataMap <bgcolor=cDkGreen>;

// Main header is 0x40
typedef struct 
{
    struct
    {
        char Magic[4];
        if (Magic[0] == '3')
            LittleEndian();
        else
            BigEndian();
    
        uint FileSize <format=hex>;
        uint RelocPtr <format=hex>;
        uint StringTableOffset <format=hex>;
        uint Unk2 <comment="Related to UnkOffset">;
        ushort PGLUTextureInfoCount;
        ushort TextureImageInfoCount;
        uint PGLUTextureInfoOffset <format=hex, fgcolor=cRed>;
        uint TextureInfoOffset <format=hex, fgcolor=cRed>;
    
        uint RelocSize <format=hex, fgcolor=cRed>;
        short UnkCount_0x24 <fgcolor=cGreen>;
        short ClutMapEntryCount <fgcolor=cGreen>;
        uint UnkOffset_0x28 <format=hex, fgcolor=cRed, comment="Count from 024, Stride 0x08. ">;
        uint ClutMapOffset <format=hex, fgcolor=cRed>;
        int UnkOffset_0x30 <format=hex, fgcolor=cRed>; // TODO - Car Variations maybe?
        ushort UnkCount_0x34 <fgcolor=cGreen>;
        ushort _empty;
        uint UnkOffset_0x38 <format=hex, fgcolor=cRed, comment="Count from 0x34, Stride 0x1C. ">;
    } Header;
    
    /* Above: from 08af69c4 (GT PSP EU 2.00): 
    *(ushort *)(param_1 + 0xe) = *(ushort *)(param_1 + 4) < 2 ^ 1;
    *(undefined *)(param_1 + 0x17) = 1;
    *(undefined2 *)(param_1 + 0xc) = 0;
    *(undefined4 *)(param_1 + 0x10) = 0;
    *(undefined *)(param_1 + 0x16) = 1;
    *(ushort *)(param_1 + 0x14) = (ushort)(**(float **)(param_1 + 8) < 0.0);
    */

    // Try heuristics to find out which platform we're on
    local int isPS3 = IsBigEndian();
    local int isPSP = false;
    if (!isPS3)
    {
        local int pgluTextureInfoStructSize = (Header.TextureInfoOffset - Header.PGLUTextureInfoOffset) / Header.PGLUTextureInfoCount;
        if (pgluTextureInfoStructSize >= 0x98)
            isPSP = true;
    }
    
    if (Header.PGLUTextureInfoCount)
    {
        FSeekWithRelocation(Header.PGLUTextureInfoOffset);
        struct
        {
            local int i = 0;
            for (i = 0; i < Header.PGLUTextureInfoCount; i++)
            {
                if (isPS3)
                {
                    FSeekWithRelocation(Header.PGLUTextureInfoOffset + (i * 0x44));
                    PGLUTextureInfoPS3 TextureInfo;
                }
                else if (isPSP)
                {
                    FSeekWithRelocation(Header.PGLUTextureInfoOffset + (i * 0x98));
                    PGLUTextureInfoPSP TextureInfo;
                }
            }
        } TextureInfos;
    }
    
    if (Header.TextureImageInfoCount)
    {
        FSeek(startof(this) + (Header.TextureInfoOffset - Header.RelocPtr));
        struct
        {
            local int i = 0;
            for (i = 0; i < Header.TextureImageInfoCount; i++)
            {
                FSeekWithRelocation(Header.TextureInfoOffset + (i * 0x20));
                TextureBufferInfo BufferInfo;
            }
        } BufferInfos;
    }
    
    if (Header.ClutMapEntryCount)
    {
        FSeekWithRelocation(Header.ClutMapOffset);
        struct
        {
            local int i = 0;
            for (i = 0; i < Header.ClutMapEntryCount; i++)
            {
                FSeekWithRelocation(Header.ClutMapOffset + (i * 0x0C));
                struct
                {
                    int a;
                    int ClutBufferOffset <format=hex, fgcolor=cRed>;
                    int c;
                } ClutEntry;
            }
        } ClutInfos;
    }
} TextureSet3;

if (ReadUInt(0) == 0x54585333 || ReadUInt(0) == 0x33535854)
{
    FSeek(0);
    TextureSet3 TextureSet;
}

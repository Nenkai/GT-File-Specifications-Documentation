//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: PDIPFS/GT.VOL Table of Contents
//   Authors: Nenkai#9075
//   Version: 
//   Purpose: BTree for file structure
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

BigEndian();
BitfieldDisablePadding();

typedef struct (int size)
{
    local int i = 0;
    for (i; i < size; i++)
        int KeyOffset : 12 <format=hex, fgcolor=cYellow>;

} BTreeKeyOffsets <optimize=false>;

typedef struct (int size)
{
    local int i = 0;

    for (i; i < size; i++)
    {
        struct 
        {
            byte HasKey : 1;
            int KeyCount : 11 <fgcolor=0x00AA00>;
            BTreeKeyOffsets KeyOffsets(KeyCount);
            int NextPageOffset : 12 <format=hex, fgcolor=0x00AAFF>;
        } BTreePage <read=Str("%d keys", KeyCount)>;
        
        FSeek(startof(BTreePage) + BTreePage.NextPageOffset);
    }

} BTreePages;

typedef struct
{
    local int basePos = FTell();
    
    byte NumIndexer <fgcolor=cGreen>;
    int IndexPagesOffset : 24 <format=hex, fgcolor=cRed>;
    short PageCount <fgcolor=cGreen>;

    BTreePages Pages(PageCount);
    
    if (NumIndexer > 0)
    {
        FSeek(basePos + IndexPagesOffset);
        local int i = 0;
        
        for (i; i < NumIndexer; i++)
        {
            struct
            {
                int IndexCount : 12;
                BTreeKeyOffsets Index(IndexCount);
                int NextPageOffset : 12 <format=hex>;
            } Indexer <bgcolor=cBlue>;
            
            FSeek(startof(Indexer) + Indexer.NextPageOffset);
        }
    }
} BTree;

struct TOC
{
    char Magic[4];
    int FileNameTreeOffset <format=hex, fgcolor=cRed>;
    int FileExtTreeOffset <format=hex, fgcolor=cRed>;
    int FileInfoTreeOffset <format=hex, fgcolor=cRed>;
    int FileEntryTreeCount <fgcolor=cGreen>;
    uint FileEntryTreeOffsets[FileEntryTreeCount] <comment="Per folder", format=hex, fgcolor=cRed>;
    
    FSeek(FileNameTreeOffset);
    BTree FileNamesBTree;

    FSeek(FileExtTreeOffset);
    BTree ExtensionsBTree;

    FSeek(FileInfoTreeOffset);
    BTree FileInfosBTree;

    local int i = 0;
    struct
    {
        for (i = 0; i < FileEntryTreeCount; i++)
        {
            FSeek(FileEntryTreeOffsets[i]);
            BTree FileEntries;
        }
    } FileEntryBTrees;
} toc;
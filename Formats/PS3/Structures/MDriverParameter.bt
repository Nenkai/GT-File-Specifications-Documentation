//------------------------------------------------
//--- 010 Editor v10.0.2 Binary Template
//
//      File: MDriverParameter structure for GT6
//   Authors: Nenkai#9075
//   Version: 
//   Purpose: Used to transmit driver parameters
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

BigEndian();
BitfieldDisablePadding();

typedef enum <byte> { NONE = -1, PLAYER, AI, GPS = 3 } DriverType;
typedef enum <byte> { NORMAL, LEADING, OVAL, OVALNASCAR } SpecialAIType;

typedef struct
{
    local int basePos = FTell();

    uint MDriverParameterVersion;
    uint MDriverParameterSize <format=hex>;
    byte port : 4;
    DriverType type : 4;
    byte residence_id : 6;
    byte isGhost : 1;
    byte display_driving_line : 1;

    char playerName[MDriverParameterVersion >= 110 ? 0x20 : 0x40];


    if (MDriverParameterVersion >= 109)
        char online_id[0x12];
    char regionName[0x04];

    struct DriverSettings
    {
        ubyte gtbehavior_version;
        byte manual;
        byte assist_tcs;
        byte assist_asm;
        byte steering_assist_type;
        byte unk;
        byte active_steering;
        byte active_brake_level;
        byte physics_pro;
        byte competition_flags;
        byte pad_yaw_gain;
        byte assist_4was;
        byte unk;
        byte RTAUnadjustable;
    } settings;
    
    byte cornering_skill;
    byte accelerating_skill;
    // these two are assumptions
    byte ai_pit_decision_10_vitality_before_race : 4;
    byte ai_pit_decision_10_tire_before_race : 4;
    byte braking_skill;
    SpecialAIType special_ai_type;
    byte starting_skill;
    byte ai_reaction_level : 3;
    byte unk6 : 4;
    byte disable_bspec_skill : 1;

    struct GrowthParameter
    {
        byte growable;
        byte spec_id;
        byte fatigue;
        byte lv;
        int experience;
        short win_count;
        short race_count;
        short days;
        byte dec_master_rate;
        byte unk;
        short stamina;
        byte mentality;
        byte condition;
        byte temper;
        byte flexibility;
        byte skill_base_breaking;
        byte skill_base_cornering;
        byte skill_base_shift_up;
        byte skill_base_cornerout;
        byte skill_base_line_trace;
        byte skill_base_steer_reaction;
        byte skill_heat_offset;
        byte unk;
        short unk;
        byte bonus_skill_b;
        byte bonus_skill_c;
        byte bonus_skill_s;
        byte bonus_skill_o;
    } growth_parameter;

    if (MDriverParameterVersion < 113)
    {
        if (MDriverParameterVersion >= 110)
        {
            short head_code;
            short body_code;
            short head_color_code;
            short body_color_code;
            byte unk8 : 2;
            byte unk9 : 1;
            byte unk10 : 5;
            byte unk;
            short unk;

            uint unk;
            uint unk;
            uint unk;
            uint unk;
            uint unk;

            short head_code2;
            short body_code2;
            short head_color_code2;
            short body_color_code2;
            byte unk8_2 : 2;
            byte unk9_2 : 1;
            byte unk10_2 : 5;
            byte unk_2;
            short unk_2;

            uint unk_2;
            uint unk_2;
            uint unk_2;
            uint unk_2;
            uint unk_2;
        }
        else if (MDriverParameterVersion <= 106)
        {
            byte unk : 6;
            byte unk : 6;
            byte unk : 6;
            byte unk : 6;
            byte unk : 1;
            byte unk : 1;
            byte unk : 6;
        }
    }

    FSeek(basePos + MDriverParameterSize);
} MDriverParameter;
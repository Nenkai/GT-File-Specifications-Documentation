//------------------------------------------------
//--- 010 Editor v10.0.2 Binary Template
//
//      File: Autodrive (AD)
//   Authors: Nenkai#9075
//   Version: 
//   Purpose: Responsible for AI Autodriving Paths and other stuff
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

LittleEndian();

typedef struct
{
    int AttackInfoCount <fgcolor=cGreen>;
    byte _empty_[0x3C] <fgcolor=cDkGray>;

    if (AttackInfoCount > 0)
    {
        struct
        {
            int unkBool;
            float X;
            float Z;
            float Y;
            short UnkIndex1;
            short UnkIndex2;
            float PitInKeyV;
            float DistanceToCorner;

            float X2;
            float Y2;
            float Angle;
            byte _pad_[0x18];
        } AttackInfo[AttackInfoCount] <bgcolor=cDkYellow, optimize=false>;
    }

} AutoDriveInfo;

typedef struct
{
    local int baseADLNPos = FTell();

    struct
    {
        char magic[4] <fgcolor=cPurple>;
        int RelocPtr <format=hex, fgcolor=cGray>;
        int _empty_;
        uint ADLNDataSize <format=hex, fgcolor=cYellow>; // Does not include padding
        uint unkCount;
        uint EntryCount <format=hex, fgcolor=cGreen, comment="Max 8">;
        uint DataOffset <format=hex, fgcolor=cRed>;
        byte _reserved_[20] <fgcolor=cDkGray>;
    } EnemyLineHeader <bgcolor=cDkPurple>;
    
    FSeek(baseADLNPos + EnemyLineHeader.DataOffset);
    uint EntriesOffset[EnemyLineHeader.EntryCount] <format=hex, fgcolor=cRed>;

    local int i = 0;
    for (i = 0; i < EnemyLineHeader.EntryCount; i++)
    {
        FSeek(baseADLNPos + EntriesOffset[i]);

        if (i == 1)
            AutoDriveInfo info <comment="Left Lane">;
        else if (i == 2)
            AutoDriveInfo info <comment="Right Lane">;
        else if (i == 4)
            AutoDriveInfo info <comment="Restricted Area/Pit?">;
        else if (i == 5)
            AutoDriveInfo info <comment="Learning Section">;
        else if (i == 6)
            AutoDriveInfo info <comment="Default Lane?">;
        else
            AutoDriveInfo info;
    }
} EnemyLine;

struct TrackAutoDrive
{
    // Base Header, 0x80
    struct
    {
        uint RelocPtr <format=hex, fgcolor=cGray>;
        uint ADNLHeaderOffset <format=hex, fgcolor=cRed>;
        uint unkTree1Offset <format=hex, fgcolor=cRed>;
        uint unkTree2Offset <format=hex, fgcolor=cRed>;
        uint unkTree3Offset <format=hex, fgcolor=cRed>;
        uint unkTree4Offset <format=hex, fgcolor=cRed>;
        byte _pad_[ADNLHeaderOffset - FTell()] <fgcolor=cDkGray>;
    } Header <bgcolor=cPurple>;

    FSeek(Header.ADNLHeaderOffset);
    EnemyLine EnemyLineData; 

} trackAutoDrive;

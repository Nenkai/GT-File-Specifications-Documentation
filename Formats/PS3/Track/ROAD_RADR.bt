//------------------------------------------------
//--- 010 Editor v12.0 Binary Template
//
//      File: EnemyLine::TraceEdge
//   Authors: Nenkai
//   Version: 
//   Purpose: Not know
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

BitfieldDisablePadding();
BigEndian();

void Align(uint alignment)
{
     local int pos = FTell();
     local uint mask = ~(alignment - 1);
     local int newPos = (pos + (alignment - 1)) & mask;
     FSeek(newPos);
}

typedef struct
{
    float X;
    float Y;
    float Z;
} Vec3;

typedef enum <byte>
{
    Int8 = 1,
    Int16 = 2,
    Int24 = 3,
} eFieldTypeDefiniton;

typedef struct 
{
    int EntryCount;
    byte unkBool;
    byte _pad_;
    byte CompressedVertSize <fgcolor=cGreen>;

    BitfieldRightToLeft();
    eFieldTypeDefiniton def1 : 2;
    eFieldTypeDefiniton def2 : 2;
    eFieldTypeDefiniton def3 : 2;
    eFieldTypeDefiniton def4 : 2;
    BitfieldLeftToRight();

    float UncompressScale;
    Vec3 boundsMin;
    Vec3 boundsMax;
    int offset <format=hex, fgcolor=cRed>;
    FSkip(0x08);
    int VCoordsOffset <format=hex, fgcolor=cRed>;

    FSeek(offset);

    struct
    {
        if (def1 == Int8)
            byte value1;
        else if (def1 == Int16)
            short value1;
        else if (def1 == Int24)
            int value1 : 24;

        if (def2 == Int8)
            byte value2;
        else if (def2 == Int16)
            short value2;
        else if (def2 == Int24)
            int value2 : 24;

        if (def3 == Int8)
            byte value3;
        else if (def3 == Int16)
            short value3;
        else if (def3 == Int24)
            int value3 : 24;

        if (def4 == Int8)
            byte value4;
        else if (def4 == Int16)
            short value4;
        else if (def4 == Int24)
            int value4 : 24;
    } CompressedVert[EntryCount] <comment="Each value should be translated to a float, scaled with the Scale", optimize=false>;

    FSeek(VCoordsOffset);
    float VCoords[EntryCount] <fgcolor=cLtBlue>;
    
    Align(0x10);
} UnkSearchMap <bgcolor=cDkYellow, optimize=false, comment="0x10 Alignment">;

struct ROAD
{
    struct Header
    {
        char Magic[4] <comment="Must match">;
        int RelocPtr <format=hex>;
        int RelocSize <format=hex>;
        FSkip(4);
        uint Version;
        uint HeaderSize <bgcolor=cGreen>;
        int unkCount <fgcolor=cGreen>;
        int unkOffset <format=hex, fgcolor=cRed>;
        int unkCount2 <fgcolor=cGreen>;
        int unkOffset2 <format=hex, fgcolor=cRed>;
        Align(0x40);

        int offsets[header.unkCount] <format=hex, fgcolor=cRed>;
        Align(0x10);

        int offsets2[header.unkCount2] <format=hex, fgcolor=cRed>;
        Align(0x10);
    } header <bgcolor=cPurple, comment="0x40 Alignment">;

    UnkSearchMap defs[header.unkCount];
    UnkSearchMap defaults[header.unkCount2];
} road;

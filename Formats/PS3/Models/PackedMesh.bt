//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

BitfieldDisablePadding();

void AlignToNextByte()
{
    local int currentShift = BitfieldGetCurrentShift();
    if (currentShift > 0)
       FSeek(FTell());
}

int Align(int pos, int alignment) {
    local int amount = (-pos % alignment + alignment) % alignment;

    return pos + amount;
}

typedef struct
{
    // This is a bit stream read by SPU.
    
    /* Debugging process (GT6 1.00 was used):
    * Setup and compile RPCS3 with memory breakpoints enabled
    * Setup RPCS3 & GT6 with fsroot (preferably)
    * Setup WinDbg to use command line arguments, make sure the source paths to RPCS3 are also present
       Set access violations as second chance, make sure Settings -> Debugging Settings -> Default Source Paths has the paths to RPCS3's source
    * Find ModelSet3::map in eboot
    * Interpreter PPU & SPU in RPCS3, start game, break on ModelSet3::map's address
    * Start garage, breakpoint should hit. Search for modelset bytes using Memory Viewer in RPCS3, if not found Run, repeat till found in log
	    NOTE: thread is ksF3, the last one with that name
    * Once log shows a result, copy address
    * In WinDbg, run command ba r<size> <x><address> - replace <size> with byte size like 4, <x> with 3 (normally) so that you have "ba r4 342C337A0" as example
    * In RPCS3, remove breakpoint, and run.
    
    You should get a hit in WinDbg somewhere around spu_thread::do_dma_transfer
    Copy the address of the dst register, set a break there, then run
    You should land in an instruction. Make sure you use source level view; step out until you're out of the instruction, and try to get the LS and add SPU->PC to this
    You should now have the address to the instruction that did the last instruction, try to match it in Ghidra/IDA against the Spu Job binaries
    
    PC of the WRCH that transfers the PackedInfoDescriptors: 0x783C (0x383C in SmoothMesh, GT6 1.00)
    PC of the LQD+SHUFB that actually loads the first 8 bytes of the PackedInfoDescriptors: 0x76D8 (which is 0x36D8 in SmoothMesh, GT6 1.00)
    
    For GT6 1.00, the way I debugged this after I got the offset was:
    - Set breakpoint to PDICellSpursKernel0 at 0x76D8 in the home menu, then go into the garage
    - leave it a bit, wait for it to break
    - once it break, you should be landing more or less in the relevant code
    
    After that you can also probably dump SPURS SPU modules from RPCS3 debug pane by hitting Alt+S.
    NOTE: The first bitstream that will be loaded is character/mf07, PackedMesh[4]
    
    Open that in Ghidra with the SPU module, I used elad335's PR fork
    https://github.com/elad335/GhidraSPU/tree/patch-2
    
    I will *try* to store the relevant elf file in a way that you can download it,
    otherwise for the function itself, it may need fixing, there's a big switch table which I used FindPs3JumpableTargets.py & SwitchOverride.java scripts to fix
    the module stores the current stream BIT offset (not byte) at sp + 0x90
    You can use RPCS3's memory viewer, and use that value, divide it by 8 (size of one byte), and add it to 0xE8000000.
    (0xE8000000 is the local storage offset for the current spu thread. You can see it above the register list in RPCS3.)
    
    Also Ghidra likes to try and open each switch block as their own function but that's wrong, make sure you are decompiling FUN_000071E8
    */

    typedef enum
    {
        SmoothMesh_End = 0,
        SmoothMesh_Opcode1 = 1,
        SmoothMesh_Opcode2 = 2,
        SmoothMesh_Opcode3 = 3,
        SmoothMesh_Opcode4 = 4,
        SmoothMesh_UseBuffer = 5,
        SmoothMesh_Opcode6 = 6,
        SmoothMesh_PushLayout = 7,
        SmoothMesh_Opcode8 = 8,
        SmoothMesh_Opcode9 = 9,
        SmoothMesh_Opcode10 = 10,
        SmoothMesh_Opcode11 = 11,
        SmoothMesh_Opcode12 = 12,
        SmoothMesh_Opcode13 = 13,
        SmoothMesh_Opcode14 = 14,
        SmoothMesh_Opcode15 = 15,
        SmoothMesh_Opcode16 = 16,
        SmoothMesh_Opcode17 = 17,
        SmoothMesh_Opcode18 = 18,
        SmoothMesh_Opcode19 = 19,
        SmoothMesh_Opcode20 = 20,
        SmoothMesh_Opcode21 = 21,
        SmoothMesh_Opcode22 = 22,
        SmoothMesh_Opcode23 = 23,
    } SmoothMeshOpcode;
    
    local int currentLayoutIndex = 1; // Accurate to SPU code
    local int currentLayoutIndexForOpcode7 = 0; // Accurate to SPU code
    local int layoutIndices[2]; // Accurate to SPU code
    local int lastIndex = -1; // To emulate opcode 7
    local int lastElem21_bit1 = 0; // To emulate opcode 21
    
    local int stop = false;
    while (!stop)
    {
        struct
        {
            SmoothMeshOpcode DataType : 5; // Confirmed
            switch (DataType)
            {
                case SmoothMesh_End: // OK!
                    stop = true;
                    break;
                    
                case 1: // OK!
                    int NumTrianglesMaybe : 12;
                    break;
                    
                case 2: // OK!
                    int NumEntries : 12;
                    break;
                    
                case SmoothMesh_UseBuffer: // 5 - OK!
                    int unk : 12;
                    int VertexGroupCount : 4;
                    int FaceGroupCount : 4;
                    
                    local int k = 0;
                    for (k = 0; k < VertexGroupCount; k++)
                    {
                        struct
                        {
                            int VertStart : 16;
                            int NumVerts : 10;
                        } VertGroup;
                    }
                    
                    for (k = 0; k < FaceGroupCount; k++)
                    {
                        struct
                        {
                            int FaceIdxStart : 16;
                            int NumIndices : 10;
                        } FaceGroup;
                    }
                    break;
                    
                case 6: // OK!
                    break;
                    
                case SmoothMesh_PushLayout: // 7 - OK!
                    // This opcode essentially loads a bit layout (?) from UnkData[]
                    // Which is then used by opcode 22 (at least)
                    int UnkDataIndex : 12;
                    
                    // So the first two declarations actually set the layout for Opcode 22
                    // The others are unknown
                    
                    // We need to emulate some behavior here.
                    // Basically, when opcode 5 is called, it won't immediately set a value to the storage
                    // Only the next one will be applied
                    // Basically this opcode queues until next opcode 7?
                    if (lastIndex != -1)
                    {
                        // Emulate and set previous
                        layoutIndices[currentLayoutIndexForOpcode7 ^ 1] = lastIndex;
                    }
                    
                    lastIndex = UnkDataIndex;
                    currentLayoutIndexForOpcode7 ^= 1; // Toggle
                    break;
                               
                case 8: // OK!
                    break;
                    
                case 9: // OK!
                    // sp + 0x140 toggle? which might be used for opcode 10 and 11?
                    int NumEntries : 6;
                    if (NumEntries)
                    {
                        struct
                        {
                            int Unk1 : 12;
                            int Unk2 : 5;
                        } Entry[NumEntries] <optimize=false>;
                    }
                    break;
                    
                case 10: // OK!
                    int NumEntries : 8;
                    int unk : 12;
                    
                    struct
                    {
                        int Unk1 : 5;
                        int VertexIndexCount : 10;
                    } Entry[NumEntries+1] <optimize=false>; // 1 extra
                    
                    break;
                
                case 11: // OK!
                    int Unk : 10;
                    int Unk2 : 12;
                    break;
                    
                case 12: // OK!
                    int Unk : 20;
                    
                    // Num ints for something?
                    // [97a8] shli r116, r100 (this), 4
                    // ...
                    // [97d8] wrch MFC_Size, r116
                    int Unk2 : 9;
                    break;
                    
                case 14: // OK!
                    int VertexIndexStart : 12;
                    int VertexIndexCount : 12;
                    break;
                    
                case 15: // OK!
                    // 1 float + 13 bits + 12 bits + extra commands
                    float Unk1 : 32;

                    // This is used to skip over a set number of commands, not sure how it triggers
                    int Unk2 : 13;
                    int NumCmdBitsToSkip : 12 <format=hex>;
                    struct
                    {
                        local int k = 0;
                        for (k = 0; k < NumCmdBitsToSkip; k++)
                            int bit : 1;
                    } SubCommands;
                    
                    break;
                    
                case 16: // OK!
                    break;
                    
                case 17: // OK!
                    int type17_a : 2;
                    break;
                    
                case 21: // OK!
                    int NumEntries : 6;
                    int UnkBit1 : 1; // This is used for opcode 22 and 23, the latter especially determines a bit size
                    int HasUnkExtraData : 1;
                    lastElem21_bit1 = UnkBit1;
                    
                    if (HasUnkExtraData)
                    {
                        AlignToNextByte(); // Intended
                        
                        struct
                        {
                            // This is correct, 320 bits per entry
                            byte bits[320 / 8];
                        } Entry[NumEntries + 1]; // This is correct, there's always an extra
                    }
                    break;
                    
                case 22: // OK!
                    int IsSwitchLayout : 1;
                    int EntryNum : 8;
                    
                    // The switch happens before the data. Accurate to SPU code
                    if (IsSwitchLayout)
                        currentLayoutIndex ^= 1;

                    // spu debugging: mf07 - PackedMesh[4] - Opcode_[8] = 0x1e0 * 0x19?
                    // spu debugging: mf07 - PackedMesh[4] - Opcode_[15] = 0x140 * 0x1c (0x8c0)?
                    
                    // (0xC * 4) * 0xA = 0x1E0 - is 0xA packed face bit size? yes it is
                    // (0x8 * 4) * 0xA = 0x140
                    
                    // 0x0C/0x08 comes from UnkOffset_0x1C from the main header
                    // 0x0C is UnkData[0] byte at 0x01
                    // 0x08 is UnkData[3] byte at 0x01
                    
                    // the UnkData selected depends on opcode 7, at least the ones that are pushed for use
                    local int lay = layoutIndices[currentLayoutIndex];
                    local int countFromLayout = UnkData0x1C.Unk[lay].unk2;
                    local int mainEntryNum = Align(EntryNum + 1, 4) / 4;

                    local int l = 0;
                    struct
                    {
                        // Not sure if it's really supposed to be grouped by 4, but the game does multiply by 4 so idk.
                        struct
                        {
                            local int k = 0;
                            for (l = 0; l < countFromLayout * 4; l++)
                                int FaceIndex : PackedFaceIndexBitSize <optimize=false>;
                        } IndexGroup;
                    } MainEntries[mainEntryNum] <optimize=false>;
                    break;
                    
                case 23: // OK!
                    // This probably must be preceded by opcode 21 and 22
                    
                    int NumEntries : 6;
                    
                    // spu debugging: mf07 - PackedMesh[4] - Opcode_[7] = 0x10 * 0x19
                    // mf07 - PackedMesh[1] - Opcode_[8] = 0x10 * 3
                    // mf07 - PackedMesh[1] - Opcode_[12] = 0x0C * 3
                    
                    // address is from SPURS dumped module
                    // [0x85f8] il r57, 0x10 (put 0x10 into r57)
                    // ..
                    // [0x8600] il r55, 0x0c (put 0x0c into r57)
                    // ..
                    // [0x8608] selb r50, r51, r51, r97
                    // [0x860c] selb r81, r57, r55, r97
                    //                ^ num bits
                    
                    // Either 0x10 or 0x0C. it checks if bit1 from previous opcode 21 is true. 
                    // if it is, 0x10, otherwise, 0x0C
 
                    struct
                    {
                        int bits : lastElem21_bit1 ? 0x10 : 0x0C;
                    } Entries[NumEntries + 1] <optimize=false>;
                    break;
                    
                default:
                    Printf("Unsupported SmoothMesh opcode %d, bailing\n", DataType);
                    stop = true;
                    break;
                    
            }
        } Opcode_ <optimize=false, read=Str("Type %s", (EnumToString(DataType) == "" ? Str("%d", DataType) : Str("%s (%d)", EnumToString(DataType), DataType)))>;
    }
} PackedFaceDescriptors;

#include "../../Shared/ModelVM.bt"
        
typedef struct
{
    // All of this is largely handled by the SPU jobs
    // Don't expect PPU reads on these
    int PackedVertexDataOffset <format=hex, fgcolor=cRed>;
    int UnkOffset0x04 <format=hex, fgcolor=cRed>;
    int UnkOffset0x08 <format=hex, fgcolor=cRed>;
    int NonPackedVertDataOffset <format=hex, fgcolor=cRed>;
    int UnkOffset0x10 <format=hex, fgcolor=cRed>;
    int PackedFacesOffset <format=hex, fgcolor=cRed>;
    int PackedFaceDescriptorsOffset <format=hex, fgcolor=cRed>;
    int unk;
    short unk;
    short FlexVertCount;
    short unk;
    short NonPackedFlexVertCount;
    short StrideCountOf0x10 <comment="0x10 each">;
    short PackedFacesQuadwordSize <comment="0x10 each">;
    short PackedFaceDescriptorQuadwordSize <format=hex, comment="0x10 each">;
    byte PackedFaceIndexBitSize;
    byte Pad;

    FSeek(startof(ModelSetHeader) + PackedFacesOffset);
    union
    {
        byte PackedFaceBytes[0x10 * PackedFacesQuadwordSize];
        struct
        {
            local int j = 0;
            local int estimatedFaceCount = ((PackedFacesQuadwordSize * 0x10) * 8) // num quadwords * bits per byte
                                                / PackedFaceIndexBitSize;
            for (j = 0; j < estimatedFaceCount; j++)
                int faceIdx : PackedFaceIndexBitSize;
        } FaceIndices;
    } PackedFacesUnion <comment="Face Indices", bgcolor=cYellow>;

    FSeek(startof(ModelSetHeader) + PackedFaceDescriptorsOffset);
    union
    {
        // GT61.00 -> mf07 -> FlexFormat[4] 
        // - 0xC360 to 0xC381
        // - 0xC381 to 0xC384
        // - 0xC384 to 0xC38A
        
        byte PackedFaceDescriptorBytes[0x10 * PackedFaceDescriptorQuadwordSize];
        PackedFaceDescriptors FaceDescriptors;
    } PackedFacesDescriptorUnion <bgcolor=cDkYellow>;

    FSeek(startof(this) + 0x30);
} SmoothMeshData;

typedef struct
{
    short FlexDeclarationIndex;
    short ElementBitLayoutDefinitionIndex;
    short Field_0x04;
    byte SmoothMeshParamCount;
    byte Count_0x07;
    int UnkOffset <format=hex, fgcolor=cRed>;
    float Field_0x0C;
    int DataOffset <format=hex, fgcolor=cRed>; // combine with countofunk
    int BBoxOffset <format=hex, fgcolor=cRed>;
    float unk;
    float unk;
    short unk;
    short unk;
    short unk;
    short unk;
    short unk;
    short unk;
    int pad;
    
    FSeek(startof(ModelSetHeader) + UnkOffset);
    struct
    {
        struct
        {
            int Field_0x00;
            int Field_0x04;
        } Unk_0x08[Count_0x07] <bgcolor=cLtBlue>;
    } Unks_0x08[SmoothMeshParamCount] <optimize=false>;
    
    local int i = 0;
    if (DataOffset != 0)
    {
        for (i = 0; i < SmoothMeshParamCount; i++)
        {
            FSeek(startof(ModelSetHeader) + DataOffset + (i * 0x30));
            SmoothMeshData SmoothMeshSPUData;
        }
    }
    
    FSeek(startof(ModelSetHeader) + BBoxOffset);
    struct
    {
        Vec3 BBox[8] <bgcolor=cBlue>;
    } BBoxes[SmoothMeshParamCount];
    
    FSeek(startof(this) + 0x30);
} PackedMesh;

typedef struct
{
    int TotalBitCount;
    ubyte XBitCount;
    ubyte YBitCount;
    ubyte ZBitCount;
    ubyte WBitCount;
    ubyte XBitEnd;
    ubyte YBitEnd;
    ubyte ZBitEnd;
    ubyte WBitEnd;
    short unk;
    short unk;
    float ScaleX;
    float ScaleY;
    float ScaleZ;
    float ScaleW;
    float OffsetX;
    float OffsetY;
    float OffsetZ;
    float OffsetW;
} ElementBitLayoutDefinition;

typedef struct
{
    byte NameID;
    byte FlexOffset;
    byte ElementCount;
    CELL_GCM_VERTEX_TYPE Type;
} FlexElementDef;

typedef struct
{
    byte ElementCount;
    byte ElementCount2;
    byte Unk;
    byte Stride;
    int unk;
    int ElementDefsOffset;
    int ElementNamesArrayOffset <format=hex, fgcolor=cRed>;

    FSeek(startof(ModelSetHeader) + ElementDefsOffset);
    FlexElementDef elementDefs1[ElementCount];
    
    if (ElementCount2)
        FlexElementDef elementDefs2[ElementCount2];

    FSeek(startof(ModelSetHeader) + ElementNamesArrayOffset);
    struct
    {
        int NamesOffsets[ElementCount + ElementCount2] <format=hex, fgcolor=cRed>;
    
        local int j = 0;
        for (j = 0; j < ElementCount + ElementCount2; j++)
        {
            FSeek(startof(ModelSetHeader) + NamesOffsets[j]);
            String Name;
        }
    } ElementNames;

    FSeek(FileSize());
} FlexStructDeclaration;

typedef struct
{
    struct
    {
        char Magic[4];
        uint Version <format=hex>;
        int RelocSize <format=hex>;
        int RelocPtr;
        ushort FormatCount_0x18 <fgcolor=cGreen>;
        ushort UnkCount_0x1C <fgcolor=cGreen>;
        ushort ElementBitLayoutDefinitionArrayCount_0x20 <fgcolor=cGreen>;
        ushort StructDeclarationCount_0x24 <fgcolor=cGreen>;
        int FormatsOffset_0x18 <format=hex, fgcolor=cRed>;
        int UnkOffset_0x1C <format=hex, fgcolor=cRed>;
        int ElementBitLayoutDefinitionArraysOffset_0x20 <format=hex, fgcolor=cRed>;
        int StructDeclarationsOffset_0x24 <format=hex, fgcolor=cRed>;
        int UnkOffset_0x28;
        int Unk;
        int UnkOffset_0x30 <format=hex, fgcolor=cRed>;

    } PackedMeshHeader <bgcolor=cPurple>;
    
    local int i = 0;
    
    // We need this first. Formats require it
    if (PackedMeshHeader.UnkCount_0x1C)
    {
        FSeek(startof(ModelSetHeader) + PackedMeshHeader.UnkOffset_0x1C);
        struct
        {
            for (i = 0; i < PackedMeshHeader.UnkCount_0x1C; i++)
            {
                FSeek(startof(ModelSetHeader) + PackedMeshHeader.UnkOffset_0x1C + (i * 0x08));
                struct
                {
                    ubyte unk;
                    ubyte unk2;
                    ushort TotalDataSize <format=hex>;
                    uint DataOffset <fgcolor=cRed, format=hex>;
                } Unk <bgcolor=cBlack>;
            }
        } UnkData0x1C;
    }
    
    if (PackedMeshHeader.FormatCount_0x18)
    {
        FSeek(startof(ModelSetHeader) + PackedMeshHeader.FormatsOffset_0x18);
        struct
        {
            for (i = 0; i < PackedMeshHeader.FormatCount_0x18; i++)
            {
                FSeek(startof(ModelSetHeader) + PackedMeshHeader.FormatsOffset_0x18 + (i * 0x30));
                PackedMesh PackedMesh_;
            }
        } PackedMeshes;
    }

    if (PackedMeshHeader.ElementBitLayoutDefinitionArrayCount_0x20)
    {
        FSeek(startof(ModelSetHeader) + PackedMeshHeader.ElementBitLayoutDefinitionArraysOffset_0x20);
        struct
        {
            for (i = 0; i < PackedMeshHeader.ElementBitLayoutDefinitionArrayCount_0x20; i++)
            {
                FSeek(startof(ModelSetHeader) + PackedMeshHeader.ElementBitLayoutDefinitionArraysOffset_0x20 + (i * 0x08));
                struct
                {
                    int Length;
                    int EntriesOffset <format=hex, fgcolor=cRed>;
        
                    FSeek(startof(ModelSetHeader) + EntriesOffset + (i * 0x10));
                    ElementBitLayoutDefinition ElemBitLayoutDef[Length];
        
                } ElementBitLayoutDefinitionArray;
            }
        } ElementBitLayoutDefinitions;
    }
    
    if (PackedMeshHeader.StructDeclarationCount_0x24)
    {
        FSeek(startof(ModelSetHeader) + PackedMeshHeader.StructDeclarationsOffset_0x24);
        struct
        {
            for (i = 0; i < PackedMeshHeader.StructDeclarationCount_0x24; i++)
            {
                FSeek(startof(ModelSetHeader) + PackedMeshHeader.StructDeclarationsOffset_0x24 + (i * 0x10));
                FlexStructDeclaration FlexStructDeclaration_;
            }
        } FlexStructDeclarations;
    }
    
} PMSH <comment="Replaces FVF stuff">;
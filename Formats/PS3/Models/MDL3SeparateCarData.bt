//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
typedef struct
{
    byte compressed : 1;
    int CompressedChunkSize : 31 <format=hex>;
    int DecompressedChunkSize : 32 <format=hex>;
} StreamChunk;

typedef struct
{
    int64 Offset <format=hex>;
    short ChunkInfoCount1 <fgcolor=cGreen>;
    short ChunkInfoCount2 <fgcolor=cGreen>;
    int ChunkInfosOffset <format=hex, fgcolor=cRed>;
    short unk;
    short unk;

    if (ChunkInfoCount1 + ChunkInfoCount2 != 0)
    {
        FSeek(startof(ModelSetHeader) + ChunkInfosOffset);
        StreamChunk Chunks[ChunkInfoCount1 + ChunkInfoCount2] <optimize=false>;
    }
} StreamChunks;

typedef struct
{
    int NameOffset <format=hex, fgcolor=cRed>;
    int StreamChunkCount <fgcolor=cGreen>;
    int StreamChunkOffset <format=hex, fgcolor=cRed>;

    FSeek(startof(ModelSetHeader) + NameOffset);
    string Name;

    FSeek(startof(ModelSetHeader) + StreamChunkOffset);
    StreamChunks ChunkInfos;
} SeparateCarDataInfo <read=Name>;

typedef struct
{
    int InfoCount <fgcolor=cGreen>;
    short a;
    short b;
    int InfoOffset <format=hex, fgcolor=cRed>;

    local int i = 0;
    for (i = 0; i < InfoCount; i++)
    {
        FSeek(startof(ModelSetHeader) + InfoOffset + (i * 0x0C));
        SeparateCarDataInfo Info;
    }
} SeparateCarData;
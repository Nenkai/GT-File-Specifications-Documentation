//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// This defines the Model structure
// The payload is used to define and initialize all the meshes for each model in the set
// For the name of each model, refer to ModelKeys

typedef struct
{
    local int counter = 0;

    while (true)
    {
        struct
        {
            ubyte opcode <fgcolor=cLtRed>;

            switch (opcode)
            {
                case 0: // End
                    break; 

                case 2: // Does not exist in GT6
                    struct
                    {
                        short ModelInfoIndex; // Must be under (ushort)mdl->0x10. Used for indexing. (mdl->0x30) + idx * 0x30 
                    } Opcode2;
                    break;

                case 3:
                    struct
                    {
                        /*     
                        ppiVar4 = *(int ***)(*(int *)(*(int *)(mdl + 0x38) + index * 0x30 + 0x2c) + 0x30);
                            or
                        ppiVar4 = (int **)(*(int *)(mdl + 0xa8) + index * 0x20);
                        */
                        byte unkMaybeMeshIndex;
                    } Opcode3;
                    break;

                case 4: // Similar to 0x3C opcode
                    struct
                    {
                        short unkMaybeMeshIndex; // Does same addressing as opcode 3
                    } Opcode4;
                    break;
                case 5:
                    struct
                    {
                        short unk <comment="Diff stuff happens if >10000 or == 10001 or 10002">;
                        byte BranchCount;

                        short Offsets[BranchCount] <format=hex>;

                        
                    } Opcode5;
                    break;

                case 6:
                    struct
                    {
                        byte unk;
                    } Opcode6;
                    break;

                case 7:
                    struct
                    {
                        short unk;
                    } Opcode7;
                    break;

                case 8:
                    struct
                    {
                        float unk;
                        float unk;
                        float unk;
                        float unk;
                        byte flags;
						
						if ((flags & 0x80) == 0)
						{
						
						}
						else
						{
							if ((flags & 0x40) != 0x00)
							{
								float Unk7;
							}

							if ((flags & 0x20) != 0x00)
							{
								short Unk8;
							}
			
							if ((flags & 0x10) != 0x00)
							{
								byte Unk9;
							}
						}
			
						float singles[flags & 0x0F];
						
						byte count2;
						short unks[count2];
                    } Opcode8;
                    break;
                case 9:
                    // this is what it does: *param_5 = opcodePtr + *dataPtr + 2;
                    struct
                    {
                        byte len;
                    } Opcode9_JumpMaybe;
                    break;

               case 10:
                    // Same but short
                    struct
                    {
                        short JumpOffset;
                    } OpcodeA_JumpMaybe;
                    break;

                case 0x0D:
                case 0x0E:
                case 0x0F:
                    break;

                case 0x10:
                case 0x11:
                    byte data[0x40];
                    break;

                case 0x12:
                    struct
                    {
                        float unk;
                        float unk;
                        float unk;
                    } Opcode12;
                    break;

                case 0x13:
                    struct
                    {
                        float unk;
                        float unk;
                        float unk;
                    } Opcode13;
                    break;
                case 0x14:
                    struct
                    {
                        float unk;
                        float unk;
                        float unk;
                        float unk;
                    } Opcode14;
                    break;

                case 0x15:
                    struct
                    {
                        float unk <format=hex>;
                    } Opcode15;
                    break;

                case 0x16:
                    struct
                    {
                        uint color <format=hex>;
                    } Opcode16;
                    break;

                case 0x17:
                    struct
                    {
                        float unk <format=hex>;
                    } Opcode17;
                    break;

                case 0x18:
                    break;

                case 0x19: // GT6
                    break;
                case 0x1A:
                    struct
                    {
                        byte unk;
                    } Opcode1A;
                    break;

                case 0x1B:
                case 0x1C:
                    break;

                case 0x1D:
                    struct
                    {
                        byte unk;
                        byte bitValues;
                    } Opcode1D;
                    break;

                case 0x22:
                    struct
                    {
                        byte bits;
                    } OpCode22;
                    break;
                case 0x23:
                case 0x24:
                    break;

                case 0x25:
                    struct
                    {
                        int unk;
                        int unk2;
                    } Opcode25;
                    break;

                case 0x26:
                case 0x27:
                case 0x28:
                case 0x29:
                case 0x2A:
                    break;

                case 0x2B:
                    struct
                    {
                        float unk <format=hex>;
                    } Opcode2B;
                    break;

                case 0x2C:
                    break;

                case 0x2D:
                    struct
                    {
                        short unk;
                    } Opcode2D;
                    break;

                case 0x2E:
                    struct
                    {
                        short unk;
                    } Opcode2E;
                    break;

                case 0x2F:
                    struct
                    {
                        short unk;
                    } Opcode2F;
                    break;

                case 0x33:
                    struct
                    {
                        short unk;
                    } Opcode33;
                    break;

                case 0x34:
                    struct
                    {
                        short unk;
                    } Opcode34;
                    break;

                case 0x35:
                    struct
                    {
                        short unk;
                    } Opcode35;
                    break;

                case 0x36:
                    struct
                    {
                        short unk;
                        byte unkCount;
                        short unkShorts[unkCount];
                    } Opcode36;
                    break;

                case 0x37:
                    struct
                    {
                        float unk;
                        float unk;
                        float unk;
                        float unk;
                    } Opcode37;
                    break;

                case 0x38: // GT PSP seems to not use the data
                    struct
                    {
                        float unk;
                        float unk;
                        float unk;
                        float unk;
                    } Opcode38;
                    break;

                case 0x39:
                    struct
                    {
                        short unk;
                        short unk;
                        short unk;
                        short unk;
                    } Opcode37;
                    break;

                case 0x3A: // GT PSP seems to not use the data, again
                    struct
                    {
                        short unk;
                        short unk;
                        short unk;
                        short unk;
                    } Opcode3A;
                    break;

                case 0x3B:
                    struct
                    {
                        byte MeshID; // Does same addressing as opcode 3
                        byte Unk2; // maybe not used?
                    } Opcode3B;
                    break;

                case 0x3C:
                    struct
                    {
                        short unkIndex; // Does same addressing as opcode 3, this is a short however
                        short unk; // maybe not used?
                    } Opcode3C;
                    break;

                case 0x3D:
                    break;

                case 0x3E: // GT PSP does not use data
                    struct
                    {
                        byte unk;
                        byte unk;
                    } Opcode3E;
                    break;

                case 0x41:
                    struct
                    {
                        /*
                            bVar1 = *dataPtr;
                            *param_5 = opcodePtr + 2;
                            bVar15 = opcodePtr[2];
                            *param_5 = opcodePtr + 3;
                            FUN_08b57eb8(bVar15 + 0x400,(bVar1 & 0xf) + 0x200,(bVar1 >> 4) + 0x200);
                        */
                        byte unk : 4;
                        byte unk : 4;
                        byte b;
                        byte bb;
                    } Opcode41;
                    break;

                case 0x42:
                    struct
                    {
                        byte unk;
                        byte unk;
                        byte unk;
                    } Opcode42;
                    break;

                case 0x43:
                    struct
                    {
                        int color <format=hex>;
                    } Opcode43;
                    break;

                case 0x44:
                    struct
                    {
                        float unkvec1_1;
                        float unkvec1_2;
                        float unkvec1_3;

                        float unkvec2_1;
                        float unkvec2_2;
                        float unkvec2_3;
                    } Opcode0x44;
                    break;

                case 0x45:
                    struct
                    {
                        byte PGLUTextureInfoIndex;
                    } Opcode0x45;
                    break;

                case 0x46: // GT6
                case 0x47:
                    break;
                case 0x48:
                    struct
                    {
                        // All these three are converted to float and multiplied by 0.003921569
                        ubyte R;
                        ubyte G;
                        ubyte B;
                    } Opcode0x48;
                    break;

                case 0x4A:
                    struct
                    {
                        byte MeshCount;
                        short MeshIDs[MeshCount];
                        byte unk;
                    } Opcode0x4A;
                default:
                    Printf("Unrecognized opcode %d\n", opcode);
                    break;
            }
        } Command <optimize=false, bgcolor=cBlack>;

        if (Command[counter].opcode == 0)
            break;
        counter++;
    }
} Commands;

typedef struct
{
    float Unk;
    Vec3 Origin;
    byte Unk;
    byte Unk;
    ushort BoundsCount <fgcolor=cGreen>;
    int BoundsOffset <format=hex, fgcolor=cRed>;
    int CommandsOffset <format=hex, fgcolor=cRed, comment="Unknown, mem breakpoint doesnt work, may be SPU related">;
    int CommandsLength <format=hex, fgcolor=cPurple>;

    struct
    {
        // callVM() is at 08e4f30 in GT6 EU 1.22 BCES01893
        int InitInstance_VMInstructionPointer <comment="Used in callVM() if not -1, Same as PS2/GT4 call VM code">;
        int OnUpdate_VMInstructionPointer <comment="Used in callVM() if not -1 - Same as PS2/GT4 call VM code">;
        int Unk_VMInstructionPointer <comment="Used ushort at ModelSet3 header at 0x0E has 0x4000">;
    } VMPointers;

    short Unk;
    short UnkBitFlags <format=hex>;
   
    FSeek(BasePos + BoundsOffset);
    //Vec3 Bounds[BoundsCount];

    FSeek(BasePos + CommandsOffset);
    Commands commands;

    /* All of this is LE
      The payloads in PS3 are sent directly to SPUs
      It is futile to attempt debugging this with PPU breakpoints or hardware breakpoints
      All of this was gathered from GT PSP Instead at 0x8c42084 (UCES01245, 1.01.4647452 GT PSP)
      MDL3 mapping happens at 0x8af92d4 there, by the way
    */

    
    SetEndian();
    local int currentEndpos = FTell();
    local int endPos = BasePos + CommandsOffset + CommandsLength + 1;
    if (currentEndpos != endPos);
    {
        Printf("Payload parsed entirely %d = %d\n", currentEndpos, endPos);
        return;
    }
} Model <optimize=false>;
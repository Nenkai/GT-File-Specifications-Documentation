//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// This defines the Model structure
// The payload is used to define and initialize all the meshes for each model in the set
// For the name of each model, refer to ModelKeys

typedef enum <ubyte>
{
    PGLUCallShapeByte = 3,
    PGLUCallShapeUShort = 4,
    LODRenderSwitch = 5,
    JumpByte = 9,
    JumpShort = 10,
    CallVM_Ptr2 = 44,
    PGLUCallShape2Byte = 59,
    PGLUCallShape2UShort = 60,
} PGLCommand;

typedef struct
{
    local int counter = 0;

    while (true)
    {
        struct
        {
            PGLCommand opcode <fgcolor=cLtRed>;

            switch (opcode)
            {
                case 0: // End
                    break; 

                case 2: // Does not exist in GT6
                    struct
                    {
                        short ModelInfoIndex; // Must be under (ushort)mdl->0x10. Used for indexing. (mdl->0x30) + idx * 0x30 
                    } Opcode2;
                    break;

                case PGLUCallShapeByte: // 3
                    struct
                    {
                        /*     
                        ppiVar4 = *(int ***)(*(int *)(*(int *)(mdl + 0x38) + index * 0x30 + 0x2c) + 0x30);
                            or
                        ppiVar4 = (int **)(*(int *)(mdl + 0xa8) + index * 0x20);
                        */
                        byte ShapeIndex;
                    } PGLUCallShapeByte;
                    break;

                case PGLUCallShapeUShort: // 4
                    struct
                    {
                        ushort ShapeIndex;
                    } PGLUCallShapeUShort;
                    break;
                case LODRenderSwitch: // 5
                    struct
                    {
                        short unk <comment="Diff stuff happens if >10000 or == 10001 or 10002">;
                        byte BranchCount;

                        short Offsets[BranchCount] <format=hex>;

                        
                    } LODRenderSwitch;
                    break;

                case 6:
                    struct
                    {
                        byte unk;
                    } Opcode6;
                    break;

                case 7:
                    struct
                    {
                        short unk;
                    } Opcode7;
                    break;

                case 8:
                    struct
                    {
                        float unk;
                        float unk;
                        float unk;
                        float unk;
                        byte flags;
						
						if ((flags & 0x80) == 0)
						{
						    
						}
						else
						{
							if ((flags & 0x40) != 0x00)
							{
								float Unk7;
							}

							if ((flags & 0x20) != 0x00)
							{
								short Unk8;
							}
			
							if ((flags & 0x10) != 0x00)
							{
								byte Unk9;
							}
                            
                            float singles[flags & 0x0F];
                            byte unk;
						}

						short unk2[flags & 0x0F];
						 
                    } Opcode8;
                    break;
                case JumpByte: // 9
                    // this is what it does: *param_5 = opcodePtr + *dataPtr + 2;
                    struct
                    {
                        byte len;
                    } Opcode9_JumpMaybe;
                    break;

               case JumpShort: // 10
                    // Same but short
                    struct
                    {
                        short JumpOffset;
                    } OpcodeA_JumpMaybe;
                    break;

                case 13:
                case 14:
                case 15:
                    break;

                case 16:
                case 17:
                    byte data[0x40];
                    break;

                case 18:
                    struct
                    {
                        float unk;
                        float unk;
                        float unk;
                    } Opcode12;
                    break;

                case 19:
                    struct
                    {
                        float unk;
                        float unk;
                        float unk;
                    } Opcode13;
                    break;
                case 20:
                    struct
                    {
                        float unk;
                        float unk;
                        float unk;
                        float unk;
                    } Opcode14;
                    break;

                case 21:
                    struct
                    {
                        float unk <format=hex>;
                    } Opcode15;
                    break;

                case 22:
                    struct
                    {
                        uint color <format=hex>;
                    } Opcode16;
                    break;

                case 23:
                    struct
                    {
                        float unk <format=hex>;
                    } Opcode17;
                    break;

                case 24:
                    break;

                case 25: // GT6
                    break;
                case 26:
                    struct
                    {
                        byte unk;
                    } Opcode1A;
                    break;

                case 27:
                case 28:
                    break;

                case 29:
                    struct
                    {
                        byte unk;
                        byte bitValues;
                    } Opcode1D;
                    break;

                case 34:
                    struct
                    {
                        byte bits;
                    } OpCode22;
                    break;
                case 35:
                case 36:
                    break;

                case 37:
                    struct
                    {
                        int unk;
                        int unk2;
                    } Opcode25;
                    break;

                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                    break;

                case 43:
                    struct
                    {
                        float unk <format=hex>;
                    } Opcode2B;
                    break;

                case CallVM_Ptr2: // 44
                    break;

                case 45:
                    struct
                    {
                        short unk;
                    } Opcode2D;
                    break;

                case 46:
                    struct
                    {
                        short unk;
                    } Opcode2E;
                    break;

                case 47:
                    struct
                    {
                        short unk;
                    } Opcode2F;
                    break;

                case 51:
                    struct
                    {
                        short unk;
                    } Opcode33;
                    break;

                case 52:
                    struct
                    {
                        short unk;
                    } Opcode34;
                    break;

                case 53:
                    struct
                    {
                        short unk;
                    } Opcode35;
                    break;

                case 54:
                    struct
                    {
                        short unk;
                        byte unkCount;
                        short unkShorts[unkCount];
                    } Opcode36;
                    break;

                case 55:
                    struct
                    {
                        float unk;
                        float unk;
                        float unk;
                        float unk;
                    } Opcode37;
                    break;

                case 56: // GT PSP seems to not use the data
                    struct
                    {
                        float unk;
                        float unk;
                        float unk;
                        float unk;
                    } Opcode38;
                    break;

                case 57:
                    struct
                    {
                        short unk;
                        short unk;
                        short unk;
                        short unk;
                    } Opcode37;
                    break;

                case 58: // GT PSP seems to not use the data, again
                    struct
                    {
                        short unk;
                        short unk;
                        short unk;
                        short unk;
                    } Opcode3A;
                    break;

                case PGLUCallShape2Byte: // 59
                    struct
                    {
                        byte ShapeIndex;
                        byte Unk2; // maybe not used?
                    } Opcode3B;
                    break;

                case PGLUCallShape2UShort: // 60
                    struct
                    {
                        short ShapeIndex;
                        short unk; // maybe not used?
                    } Opcode3C;
                    break;

                case 61:
                    break;

                case 62: // GT PSP does not use data
                    struct
                    {
                        byte unk;
                        byte unk;
                    } Opcode3E;
                    break;

                case 65:
                    struct
                    {
                        /*
                            bVar1 = *dataPtr;
                            *param_5 = opcodePtr + 2;
                            bVar15 = opcodePtr[2];
                            *param_5 = opcodePtr + 3;
                            FUN_08b57eb8(bVar15 + 0x400,(bVar1 & 0xf) + 0x200,(bVar1 >> 4) + 0x200);
                        */
                        byte unk : 4;
                        byte unk : 4;
                        byte b;
                        byte bb;
                    } Opcode41;
                    break;

                case 66:
                    struct
                    {
                        byte unk;
                        byte unk;
                        byte unk;
                    } Opcode42;
                    break;

                case 67:
                    struct
                    {
                        int color <format=hex>;
                    } Opcode43;
                    break;

                case 68:
                    struct
                    {
                        float unkvec1_1;
                        float unkvec1_2;
                        float unkvec1_3;

                        float unkvec2_1;
                        float unkvec2_2;
                        float unkvec2_3;
                    } Opcode0x44;
                    break;

                case 69:
                    struct
                    {
                        byte PGLUTextureInfoIndex;
                    } Opcode0x45;
                    break;

                case 70: // GT6
                case 71:
                    break;
                case 72:
                    struct
                    {
                        // All these three are converted to float and multiplied by 0.003921569
                        ubyte R;
                        ubyte G;
                        ubyte B;
                    } Opcode0x48;
                    break;

                case 74:
                    struct
                    {
                        byte MeshCount;
                        short MeshIDs[MeshCount];
                        byte unk;
                    } Opcode0x4A;
                default:
                    Printf("Unrecognized opcode %d\n", opcode);
                    break;
            }
        } Command <optimize=false, bgcolor=cBlack, read=(EnumToString(opcode) == "" ? opcode : EnumToString(opcode))>;

        if (Command[counter].opcode == 0)
            break;
        counter++;
    }
} Commands;

typedef struct
{
    float Unk;
    Vec3 Origin;
    byte Unk;
    byte Unk;
    ushort BoundsCount <fgcolor=cGreen>;
    int BoundsOffset <format=hex, fgcolor=cRed>;
    int CommandsOffset <format=hex, fgcolor=cRed, comment="Unknown, mem breakpoint doesnt work, may be SPU related">;
    int CommandsLength <format=hex, fgcolor=cPurple>;

    struct
    {
        // callVM() is at 08e4f30 in GT6 EU 1.22 BCES01893
        int InitInstance_VMInstructionPointer <comment="Used in callVM() if not -1, Same as PS2/GT4 call VM code">;
        int OnUpdate_VMInstructionPointer <comment="Used in callVM() if not -1 - Same as PS2/GT4 call VM code">;
        int Unk_VMInstructionPointer <comment="Used ushort at ModelSet3 header at 0x0E has 0x4000">;
    } VMPointers;

    short Unk;
    short UnkBitFlags <format=hex>;
   
    FSeek(startof(ModelSetHeader) + BoundsOffset);
    //Vec3 Bounds[BoundsCount];

    FSeek(startof(ModelSetHeader) + CommandsOffset);
    Commands commands;

    /* All of this is LE
      The payloads in PS3 are sent directly to SPUs
      It is futile to attempt debugging this with PPU breakpoints or hardware breakpoints
      All of this was gathered from GT PSP Instead at 0x8c42084 (UCES01245, 1.01.4647452 GT PSP)
      MDL3 mapping happens at 0x8af92d4 there, by the way
    */

    
    SetEndian();
    local int currentEndpos = FTell();
    local int endPos = startof(ModelSetHeader) + CommandsOffset + CommandsLength + 1;
    if (currentEndpos != endPos);
    {
        Printf("Payload parsed entirely %d = %d\n", currentEndpos, endPos);
        return;
    }
} Model <optimize=false>;
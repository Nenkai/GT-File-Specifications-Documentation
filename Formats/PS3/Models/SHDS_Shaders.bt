//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "RSXShaders.bt"

typedef struct
{
    int NameOffset <format=hex, fgcolor=cRed>;
    int ShaderID <comment="This is addressed by FVFs on top of the name search">;
    short ProgramID;
    short Shader0x24_or_0x2CEntry_ID;

    //Printf("%d\n", UnkID);
    FSeek(startof(ModelSetHeader) + NameOffset);
    string Name;
} ShaderDefinition <read=Name>;

typedef struct
{
    int NameOffset <format=hex, fgcolor=cRed>;
    short unk <comment="Not seen in use">;
    SrcReg unk2 <comment="Used for PMSH struct field entries, might be a bit offset?">;
    int c;
    int d;

    FSeek(startof(ModelSetHeader) + NameOffset);
    string Name;

    FSeek(FileSize());
} Entry0x20_0x14 <read=Name, comment="Referenced by each FVF field when searching, search happens by name">;

local int maxx = -1;

typedef struct
{
    int NameOffset <format=hex, fgcolor=cRed>;
    short field_0x04;
    short field_0x06;
    int field_0x08;
    int field_0x0C;

    FSeek(startof(ModelSetHeader) + NameOffset);
    string Name;

    FSeek(FileSize());
} ShaderConstSource <read=Name>;

typedef struct
{
    int RSXVertexProgramOffset <format=hex, fgcolor=cRed, comment="ucode">;
    int RSXVertexProgramSize <format=hex>;
    short Count_0x10 <fgcolor=cGreen>;
    short Count_0x14 <fgcolor=cGreen>;
    short Count_0x18 <fgcolor=cGreen>;
    short empty;
    int UnkOffset_0x10 <format=hex, fgcolor=cRed>;
    int UnkOffset_0x14 <format=hex, fgcolor=cRed>; 
    int UnkOffset_0x18 <format=hex, fgcolor=cRed>;
    int UnkOffset_0x1C <format=hex, fgcolor=cRed>;
    int unk9;
    int unk10;

    FSeek(startof(ModelSetHeader) + RSXVertexProgramOffset);
    RSXVertexProgram vertexProgram;

    local int j = 0;
    for (j = 0; j < Count_0x14; j++)
    {
        FSeek(startof(ModelSetHeader) + UnkOffset_0x14 + (j * 0x10));
        Entry0x20_0x14 entry_0x14;
    }

    for (j = 0; j < Count_0x18; j++)
    {
        FSeek(startof(ModelSetHeader) + UnkOffset_0x18 + (j * 0x10));
        ShaderConstSource constSource;
    }

} ShaderProgram;

typedef struct
{
    int UnkCgData0ffset <format=hex, fgcolor=cRed, comment="Some offset in the main shader header already point to it">;
    int UnkCgSize;
    short UnkCount_0x10;
    byte UnkCount_0x38;
    byte UnkCount_0x14;
    short UnkCount_0x18;
    short unk;
    int UnkOffset_0x10 <format=hex, fgcolor=cRed>;
    int UnkOffset_0x14 <format=hex, fgcolor=cRed>;
    int UnkOffset_0x18 <format=hex, fgcolor=cRed>;
    int UnkOffset_0x1C <format=hex, fgcolor=cRed>;
    int unk_[6];
    int UnkOffset_0x38 <format=hex, fgcolor=cRed>;
    int field_0x3C;
    int field_0x40;
    int UnkOffset_0x44;

    local int j = 0;
    for (j = 0; j < UnkCount_0x10; j++)
    {
        FSeek(startof(ModelSetHeader) + UnkOffset_0x10 + (j * 0x10));
        Entry0x20_0x14 Entry_0x10;
    }

    for (j = 0; j < UnkCount_0x14; j++)
    {
        FSeek(startof(ModelSetHeader) + UnkOffset_0x14 + (j * 0x10));
        ShaderConstSource Entry_0x14;
    }

    for (j = 0; j < UnkCount_0x18; j++)
    {
        FSeek(startof(ModelSetHeader) + UnkOffset_0x18 + (j * 0x10));
        ShaderConstSource Entry_0x18;
    }

    for (j = 0; j < UnkCount_0x38; j++)
    {
        FSeek(startof(ModelSetHeader) + UnkOffset_0x38 + (j * 0x10));
        ShaderConstSource Entry_0x38;
    }

    FSeek(FileSize());
} ShadersProgram_0x2C;

typedef struct
{

    int NameOffset <format=hex, fgcolor=cRed>;
    int ShaderID <comment="Cross referenced with definitions">;
    int c;
    int UnkOffset_0x0C <format=hex, fgcolor=cRed>;
    int e;
    int f;
    int g;
    int h;
    int j;
    int k;

    FSeek(startof(ModelSetHeader) + NameOffset);
    string Name <comment="Used for searching">;

    FSeek(FileSize());
} Entry0x3C <read=Name, comment="Refered to by Material Data 0x14 Entry by both Name and ID">;

typedef struct
{

    int UnkOffset_0x00 <format=hex, fgcolor=cRed>;
    int ProgramOffset_0x04 <format=hex, fgcolor=cRed>;
    int ProgramSize_0x04 <format=hex>;
    int unk <format=hex, fgcolor=cRed>;
    int unk;
    int unk;
    int unk;
    int unk;

    FSeek(FileSize());
} Entry0x40 <comment="Referenced by 0x78's entries (entry->0x00 (short)) in model set">;

typedef struct SHDS
{
    struct SHDSHeader
    {
        char Magic[4];
        int _empty_;
        int RelocPtr;
        int _empty;
        int Offset0x10;
        short Empty;
        short ShaderDefinitionCount <fgcolor=cGreen>;
        short ShaderProgramCount <fgcolor=cGreen>;
        short Count0x24_2c <fgcolor=cGreen>;
        uint ShaderDefinitionsOffset_0x1C <format=hex, fgcolor=cRed, comment="0x0C Stride, also used in MDL3 itself">;
        uint ShaderProgramsOffset_0x20 <format=hex, fgcolor=cRed, comment="0x28 Stride">;
        uint Offset0x24 <format=hex, fgcolor=cRed, comment="0x28 Stride">;
        int RuntimeOffset;
        int Offset0x2C <format=hex, fgcolor=cRed, comment="0x48 Stride">;
        short Count0x38 <fgcolor=cGreen>;
        short Count0x3C <fgcolor=cGreen>;
        short Count0x40 <fgcolor=cGreen>;
        short pad;
        uint Offset0x38 <format=hex, fgcolor=cRed, comment="0x10 Stride">;
        uint Offset0x3C <format=hex, fgcolor=cRed, comment="0x4 Stride">;
        uint Offset0x40 <format=hex, fgcolor=cRed, comment="0x20 Stride">;
    } ShaderSetHeader <bgcolor=cPurple>;

    local int i = 0;
    if (ShaderSetHeader.ShaderDefinitionCount > 0)
    {
        struct
        {
            for (i = 0; i < ShaderSetHeader.ShaderDefinitionCount; i++) 
            {
                FSeek(startof(ModelSetHeader) + ShaderSetHeader.ShaderDefinitionsOffset_0x1C + (i * 0x0C));
                ShaderDefinition def;
            }
        } ShaderDefinitions;
    }

    if (ShaderSetHeader.ShaderProgramCount > 0)
    {
        struct
        {
            
            for (i = 0; i < ShaderSetHeader.ShaderProgramCount; i++) 
            {
                FSeek(startof(ModelSetHeader) + ShaderSetHeader.ShaderProgramsOffset_0x20 + (i * 0x28));
                ShaderProgram Program_;
            }
        } ShaderPrograms;
    }

    if (ShaderSetHeader.Count0x24_2c > 0)
    {
        struct
        {
            
            for (i = 0; i < ShaderSetHeader.Count0x24_2c; i++) 
            {
                FSeek(startof(ModelSetHeader) + ShaderSetHeader.Offset0x2C + (i * 0x48));
                ShadersProgram_0x2C prog;
            }
        } UnkPrograms;
    }

    if (ShaderSetHeader.Count0x3C > 0)
    {
        struct
        {
            for (i = 0; i < ShaderSetHeader.Count0x3C; i++) 
            {
                FSeek(startof(ModelSetHeader) + ShaderSetHeader.Offset0x3C + (i * 4));
                int offset <format=hex, fgcolor=cRed>;

                FSeek(startof(ModelSetHeader) + offset);
                Entry0x3C entry;
            }
        } Entries0x3C;
    }

    if (ShaderSetHeader.Count0x40 > 0)
    {
        struct
        {
            
            for (i = 0; i < ShaderSetHeader.Count0x40; i++) 
            {
                FSeek(startof(ModelSetHeader) + ShaderSetHeader.Offset0x40 + (i * 0x20));
                Entry0x40 entry;
            }
        } Entries0x40;
    }
} ShaderSet;
//------------------------------------------------
//--- 010 Editor v10.0.2 Binary Template
//
//      File: Gran Turismo 5 Model Header
//   Authors: Nenkai#9075
//   Version: 0.1
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct
{
    string str;
} String;
typedef struct
{
    float X;
    float Y;
    float Z;
} Vec3 <fgcolor=cLtBlue>;

void SetEndian()
{
    if (Header.Magic == "3LDM")
        LittleEndian();
    else
        BigEndian();
}

local int max = 0;


typedef struct
{
    short A;
    short B;
    short C;
} Tri;

#include "MDL3Model.bt"
#include "MDL3ModelKeys.bt"
#include "MDL3Mesh.bt"
#include "MDL3MeshKeys.bt"
#include "MDL3MaterialMap.bt"
#include "MDL3FVFDefinitions.bt"
#include "MDL3VM.bt"
#include "MDL3ShapeStreaming.bt"
#include "MDL3SeparateCarData.bt"
#include "SHDS_Shaders.bt"
#include "PackedMesh.bt"
#include "../../Shared/ModelVM.bt"

typedef struct
{
    int DataOffset <format=hex, fgcolor=cRed>;
    FSeek(BasePos + DataOffset);
    
    struct
    {
        uint KeyNameOffset <format=hex, fgcolor=cRed>;
        ushort Unk;
        ushort Unk2;

        if (KeyNameOffset != 0)
        {
            FSeek(BasePos + KeyNameOffset);
            string Name;
        }
    } Key;
} KeyDef;

typedef struct
{
    short Count1;
    short Count2;
    int empty[3];
    int UnkOffset <format=hex, fgcolor=cRed>;
} Unk0x74;


struct MDL3
{   

    local int BasePos = FTell();
    struct
    {
        char Magic[4];
        SetEndian();

        int Unk <fgcolor=cGreen>;
        int RelocPtr;
        short VersionMajor;
        short RuntimeFlags <comment="Set at runtime, ignore">;

       ushort ModelCount <fgcolor=cGreen>;
       ushort ModelKeyCount <fgcolor=cGreen>;
       ushort MeshCount <fgcolor=cGreen>;
       ushort MeshKeyCount <fgcolor=cGreen>;
       ushort FVFCount <fgcolor=cGreen>;
       ushort BonesCount <fgcolor=cGreen>;
       ushort SizeFor0x68;
       ushort HostMethodCount <fgcolor=cGreen>;
       ushort VMStackSizeMaybe <comment="this * 4">;
       ushort Count0x5C <fgcolor=cGreen>;
       ushort Unk;
       ushort Count0x78 <fgcolor=cGreen>;
       ushort Count0xA4 <fgcolor=cGreen>;
       ushort Count0x54 <fgcolor=cGreen, comment="Can be safely wiped? No changes (c053x GT6)">;
       ushort Count0x88 <fgcolor=cGreen>;
       ushort Unk;
       uint ModelsOffset <format=hex, fgcolor=cRed, comment="0x30 Stride">; // Figured (except a short value)
       uint ModelKeysOffset <format=hex, fgcolor=cRed, comment="0x08 Stride">; // Figured
       uint MeshesOffset <format=hex, fgcolor=cRed, comment="0x30 Stride">;
       uint MeshKeysOffset <format=hex, fgcolor=cRed, comment="0x08 Stride">;
       uint FVFOffset <format=hex, fgcolor=cRed, comment="0x78 Stride">;
       uint MaterialsOffset <format=hex, fgcolor=cRed, comment="Always 1 entry, 0x18 Stride">;
       uint TextureSetOffset <format=hex, fgcolor=cRed, comment="Alone">;
       uint ShadersOffset <format=hex, fgcolor=cRed, comment="Own component">;
       uint BonesOffset <format=hex, fgcolor=cRed, comment="0x48 Stride">;
       uint UnkKeyMap0x54 <format=hex, fgcolor=cRed, comment="0x4 Stride">;
       uint HostMethodsOffset <format=hex, fgcolor=cRed, comment="0x8 Stride">;
       uint Offset0x5C <format=hex, fgcolor=cRed, comment="0x8 Stride">;
       uint VMCommandsOpcodesLength <format=hex, fgcolor=cGreen>;
       uint VMCommandsOffset <format=hex, fgcolor=cRed, comment="Possibly own thing, opcodes for animations">;
       uint VMInstanceOffset <format=hex, fgcolor=cRed, comment="Possibly own thing">;
       uint RelocSize <format=hex>;
       uint PossiblyEmpty;
       uint RuntimeValue <comment="Set to 0 after mapping">;
       uint Offset0x78 <format=hex, fgcolor=cRed, comment="0x14 Stride">;
       uint PossiblyEmpty;
       uint PossiblyEmpty;
       ushort UnkIndex <comment="Set to -1 at runtime if Version > 4">;
       ushort UnkIndex <comment="Set to -1 at runtime if Version > 4">;
       uint Offset0x88 <format=hex, fgcolor=cRed, comment="0x28 Stride, points to a map already discovered in materials">;
       short Unk0x8C;
       ushort ImageMetadataKeyMapCount <fgcolor=cGreen>;
       uint ImageMetadataKeyMapOffset <format=hex, fgcolor=cRed, comment="0x8 Stride">;
       uint PossiblyEmpty;
       ushort WingDataCount <comment="If VersionMajor < 7">;
       ushort WingKeyCount;
       uint WingDataOffset <format=hex, fgcolor=cRed, comment="If VersionMajor < 7, 0x80 Stride">;
       uint WingKeysOffset <format=hex, fgcolor=cRed, comment="0x8 Stride">;
       uint Offset0xA4 <format=hex, fgcolor=cRed, comment="0x4 Stride">;
       uint PossiblyEmpty;
       uint ShapeStreamingMapOffset <format=hex, fgcolor=cRed, comment="If VersionMajor > 1, always 1 entry, Stride 0x20">;
       uint Offset0xB0 <format=hex, fgcolor=cRed, comment="If VersionMajor > 1, Stride 0x40">;
       uint Unk <comment="Needs checking">;
       uint Offset0xB8 <format=hex, fgcolor=cRed, comment="If VersionMajor > 2, Own thing">;
       uint VMContextOffset <format=hex, fgcolor=cRed, comment="If VersionMajor > 5, always 1 entry, Stride 0x20">;
       uint Offset0xC0 <format=hex, fgcolor=cRed, comment="If VersionMajor > 5, always 1 entry, Stride 0x20">;
       ushort Count0xC0 <fgcolor=cGreen, comment="If VersionMajor > 5">;
       ushort PossiblyEmpty;
       short Unk;
       short PMSHKeyCount <fgcolor=cGreen, comment="If VersionMajor > 8">;
       uint PMSHKeysOffset <format=hex, fgcolor=cRed, comment="If VersionMajor > 8">;
       uint PMSHOffset <format=hex, fgcolor=cRed, comment="Own Thing, If VersionMajor > 8">;
       int unk;
       int empty;
       uint CarBodyStreamOffset <format=hex, fgcolor=cRed, comment="Own Thing, If VersionMajor > 13">;
        
    } Header <bgcolor=cPurple>;

    FSeek(BasePos);
    if (Header.ModelCount > 0)
    {
        struct
        {
            local int i = 0;
            for (i = 0; i < Header.ModelCount; i++)
            {
                FSeek(BasePos + Header.ModelsOffset + (i * 0x30));
                Model model;
            }
        } Models <comment="Defines each model in the model set, refer to ModelKeys for the name of each model">;
    }

    if (Header.ModelKeysOffset != 0)
    {
        FSeek(BasePos + Header.ModelKeysOffset);
        ModelKeys keys <comment="Holds the names of each model. Each entry is alphabetically ordered for bsearch">;
    }

    if (Header.MeshesOffset)
    {
        FSeek(BasePos + Header.MeshesOffset);
        struct
        {
            local int j = 0;
            for (j = 0; j < Header.MeshCount; j++)
            {
                FSeek(BasePos + Header.MeshesOffset + (j * 0x30));
                Mesh mesh;
            }
        } Meshes;
    }

    if (Header.MeshKeysOffset != 0)
    {
        FSeek(BasePos + Header.MeshKeysOffset);
        MeshKeys meshKeys <comment="Holds the names of each mesh. Each entry is alphabetically ordered for bsearch">;
    }


    if (Header.FVFCount > 0)
    {
        local int i = 0;
        struct FVFDefinitionMap
        {
            for (i = 0; i < Header.FVFCount; i++)
            {
                FSeek(BasePos + Header.FVFOffset + (i * 0x78));
                FVFDefinition Def;

                FSeek(FTell());
            }
            
        } FVFDefMap <comment="Defines flexible vertices for the meshes">;
    }

    if (Header.MaterialsOffset != 0)
    {
        FSeek(BasePos + Header.MaterialsOffset);
        MaterialMap Materials;
    }


    if (Header.TextureSetOffset != 0)
    {
        FSeek(BasePos + Header.TextureSetOffset);
        TextureSet3 TextureSet;
    }

    if (Header.ShadersOffset != 0) 
    {
        FSeek(BasePos + Header.ShadersOffset);
        Shaders shaders;
    }

    if (Header.Count0x54 > 0)
    {
        FSeek(BasePos + Header.UnkKeyMap0x54);
        KeyDef def <comment="Seemingly not used">;
    }

    if (Header.HostMethodCount > 0)
    {
        VMRegisterVals var;
    }
    
    if (Header.VMCommandsOpcodesLength > 0)
    {
        FSeek(BasePos + Header.VMCommandsOffset);
        VMCommands commands <bgcolor=cBlack>;
    }

    if (Header.Offset0x78 > 0)
    { 
         FSeek(BasePos + Header.Offset0x78);
         struct 
         { 
             short UnkA;
             short UnkB;
             int empty;
             int empty;
             int empty;
             int EmptyStorageOffset <format=hex>;
         } Unk0x78Entry[Header.Count0x78];
    }

    if (Header.ImageMetadataKeyMapCount > 0)
    {
        struct
        {
            for (i = 0; i < Header.ImageMetadataKeyMapCount; i++)
            {
                FSeek(BasePos + Header.ImageMetadataKeyMapOffset + (i * 0x08));
                ImageMetadataKey key;
            }
        } ImageKeyMap <comment="We already go through those in materials">;
    }

    if (Header.ShapeStreamingMapOffset > 0)
    {
        FSeek(BasePos + Header.ShapeStreamingMapOffset);
        ShapeStreaming ShapeStreamingMap;
    }

    if (Header.Offset0xB8 != 0)
    {
        FSeek(BasePos + Header.Offset0xB8);
        VMRelated v;
    }

    if (Header.VersionMajor > 5 && Header.VMContextOffset > 0)
    {
        FSeek(BasePos + Header.VMContextOffset);
        VMContext vmContext;
    }

    if (Header.VersionMajor > 8 && Header.PMSHOffset != 0)
    {
        FSeek(BasePos + Header.PMSHOffset);
        PMSH pmsh;
    }

    if (Header.WingDataCount > 0)
    {
        FSeek(BasePos + Header.WingDataOffset);
        struct
        {
            int a;
            short PreviousWingPartID;
            short ChildWingPartID;
            short NextWingPartID;
            short e;
            short f;
            short g;
            float Min1;
            float Min2;
            float Min3;
            float Max1;
            float Max2;
            float Max3;
            float AngleMin1;
            float AngleMin2;
            float AngleMin3;
            float AngleMax1;
            float AngleMax2;
            float AngleMax3;
            float Pitch;
            float Yaw;
            float Roll;
            float a;
            float X;
            float Y;
            float Z;
            float WholePitch;
            float WholeYaw;
            float WholeRoll;
            short UnkUnusedID1;
            short BoneID;
            int UnkUnusedID2;
            int UnkUnusedID3;
            int UnkUnusedID4;
            int unk;
            int unk;
        } WingData[Header.WingDataCount];
    }

    if (Header.VersionMajor > 13 && Header.CarBodyStreamOffset != 0)
    {
        FSeek(BasePos + Header.CarBodyStreamOffset);
        SeparateCarData StreamData;
    }

    /*
    int count;
    short a;
    short b;
    int offset;

    FSeek(offset);
    int name;
    */
} mdl3;
//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
typedef struct
{
    float X;
    float Y;
    float Z;
} MeshVec3;

typedef struct
{
    uint Offset0x00 <format=hex, fgcolor=cRed, comment="0x08 Stride">;
    uint Offset0x04 <format=hex, fgcolor=cRed, comment="0x10 Stride">;
    uint Offset0x08 <format=hex, fgcolor=cRed, comment="0x04 Stride">;
    uint Offset0x0C <format=hex, fgcolor=cRed, comment="0x30 Stride">;
    uint Offset0x10 <format=hex, fgcolor=cRed, comment="Own Thing">;
    uint Unk[3];
    byte Count0x00 <fgcolor=cGreen>;
    byte Unk;
    byte Count0x04_0x0C <fgcolor=cGreen>;
    byte Count0x08 <fgcolor=cGreen>;
    uint Offset0x24 <format=hex, fgcolor=cRed, comment="Own Thing">;
    uint Offset0x28 <format=hex, fgcolor=cRed, comment="Own Thing">;
    
    FSeek(startof(this) + 0x2C);
} MeshUnk0x2C_0x04_0x04_0x08;

typedef struct
{
    int _empty_;
    byte unk[3];
    byte Count <fgcolor=cGreen, comment="Count for both">;
    int Offset0x08 <format=hex, fgcolor=cRed>;
    int Offset0x0C <format=hex, fgcolor=cRed>;

    FSeek(Offset0x08);
    int EntryOffsets0x08[Count] <format=hex, fgcolor=cRed>;

    local int w = 0;
    for (w = 0; w < Count; w++)
    {
        FSeek(BasePos + EntryOffsets0x08[w]);
        MeshUnk0x2C_0x04_0x04_0x08 entry;
    }
    
    FSeek(startof(this) + 0x10);
} MeshUnk0x2C_0x04_0x04;

typedef struct
{
    ushort Count0x04 <fgcolor=cGreen>;
    ushort Unk;
    uint Offset0x04 <format=hex, fgcolor=cRed>;
    uint Offset0x08 <format=hex, fgcolor=cRed>;
    int _pad_;

    if (Count0x04 > 0)
    {
        FSeek(BasePos + Offset0x04);
        MeshUnk0x2C_0x04_0x04 unk;
    }

    FSeek(startof(this) + 0x10);
} MeshUnk0x2C_0x04;

typedef struct
{
    int UnkEmpty[12];
    int UnkOff <format=hex, fgcolor=cRed>;
    int PMSHFormatIndex <fgcolor=cYellow>;
    
    if (UnkOff != 0)
    {
        FSeek(BasePos + UnkOff);
        int Offset0x00 <format=hex, fgcolor=cRed, comment="0x10 Stride, always 1">;
        int Offset0x04 <format=hex, fgcolor=cRed, comment="0x10 Stride, always 1">;
        int RelocPtr;
        short UnkBits : 4;
        short UnkBits : 12;

        FSeek(BasePos + Offset0x04);
        MeshUnk0x2C_0x04 unk0x04;
    }

    FSeek(startof(this) + 0x30);
} MeshPMSHRef;

typedef struct
{
    ushort Flags <format=hex, comment="0x80 = No verts?, Removing 0x01 causes massive vertex fuckery">;
    short FVFIndex <fgcolor=cYellow, comment="-1 if not used">;
    short MaterialIndex <fgcolor=cYellow, comment="Index to first array in Materials">;
    byte unk;
    byte unk;
    uint VertCount <fgcolor=cGreen>;
    uint VerticesOffset <format=hex, fgcolor=cRed>;
    uint Unk;
    uint TriLength <fgcolor=cGreen>;
    uint TriOffset <format=hex, fgcolor=cRed, comment="Giving an offset in shapestream course: nothing happens">;
    uint Unk;
    if (ModelSetHeader.VersionMajor < 10)
    {
        ushort Unk <comment="version < 10">;
        short UnkIndex <comment="version < 10">;   
    }
    else
    {
        uint UnkOffset <format=hex, fgcolor=cRed, comment="Confirmed offset, version >= 10">;
    }
    ushort Unk;
    ushort TriCount <fgcolor=cGreen>;
    uint BoundaryBoxOffset <format=hex, fgcolor=cRed>;
    uint PMSHRefOffset <format=hex, fgcolor=cRed, comment="Confirmed offset">;

    /*
    local int vertexLen = mdl3.FVFDefMap.Def[FVFIndex].DataLength;

    local int cPos = FTell();
    FSeek(BasePos + VerticesOffset);
    byte VerticesData[vertexLen * VertCount] <bgcolor=cBlue>;
    FSeek(cPos);

    FSeek(BasePos + TriOffset);
    short Indices[TriCount * 3] <bgcolor=cGray>;
    FSeek(cPos);*/

    if (PMSHRefOffset != 0)
    {
        FSeek(startof(ModelSetHeader) + PMSHRefOffset);
        MeshPMSHRef PackedMeshRef;
    }
    
    FSeek(startof(this) + 0x30);
} Mesh <bgcolor=cGreen, comment="Mapped at FUN_008e7dac">;
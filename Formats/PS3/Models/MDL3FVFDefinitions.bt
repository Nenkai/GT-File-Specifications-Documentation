//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct
{
    int FieldNameOffset <format=hex, fgcolor=cRed, comment="Ordered for binary search">;
    byte StartOffset <format=hex, fgcolor=cRed>;
    byte Count <format=hex, fgcolor=cGreen>;
    CELL_GCM_VERTEX_TYPE DataType;
    byte UnkIndex;
    
    FSeek(startof(ModelSetHeader) + FieldNameOffset);
    string FieldName;
} FVFElementDefinition <read=FieldName>;

typedef struct
{
    int ArrayDataOffset;
    int ArrayLength;
    int ArrayDataSize;
    byte ArrayVertexSize;
    byte ArrayVertexDefaultSize <comment="Maybe?">;
    short pad;
} FVFFieldArrayDefinition <bgcolor=cDkGreen>;

typedef struct
{
    local int basePos = FTell();

    int FVFNameOffset <format=hex, fgcolor=cRed>;
    int ShaderRelatedIndex;
    int FieldDefsOffset <format=hex, fgcolor=cRed>;
    short RuntimeIndex <comment="Set to -1 At runtime">;
    short Pad;
    int Unk;
    int Offset0x14 <format=hex, fgcolor=cRed>;
    byte FieldCount <fgcolor=cGreen>;
    byte DataLength <format=hex>;
    short RuntimeField;
    byte _runtime_data_[0x58];
    int FVFArraysOffset <format=hex, fgcolor=cRed, comment="Own Thing, Possibly Unused (debug?) - No changes when all wiped to 0">;

    local int j = 0;
    for (j = 0; j < FieldCount; j++)
    {
        FSeek(startof(ModelSetHeader) + FieldDefsOffset + (j * 0x08));
        FVFElementDefinition FieldDef;
    }
    
    FSeek(startof(ModelSetHeader) + FVFArraysOffset);
    FVFFieldArrayDefinition ArrayDefinition;

    FSeek(startof(ModelSetHeader) + FVFNameOffset);
    string FVFName <comment="Used directly to search in Shaders">;


} FlexibleVertexDefinition <read=FVFName>;
//------------------------------------------------
//--- 010 Editor v10.0.2 Binary Template
//
//      File: Gran Turismo PS2 - Model Set
//   Authors: Nenkai#9075
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

BitfieldDisablePadding();

#include "../PS2ModelCommon.bt"
#include "../../Shared/ModelSetupCommands.bt"
#include "../../Shared/ModelVM.bt"
#include "../Tex1_TextureSet1.bt"

typedef struct
{
    local int firstByte = ReadByte();
    if (firstByte & 0x80)
    {
        if (firstByte & 0x40)
        {
            byte values[4];
        }
        else
        {
            byte values[2];
        }
    }
    else
    {
        byte value;
    }
} _7bitInt <optimize=false>;
typedef struct
{
    byte nextSize;

    /* 800000 = Unk
     * 800001 = Model Namen or "useOldLOD" for MultiSkinModel
     * 800002 = Brake Offset as float
    */
    int ID : 24 <format=hex>;
        
    if (nextSize == 0xFF || ID == 0)
    {
        stop = true;
        return;
    }   

    local int dataLen = nextSize * 4;
    byte data[nextSize * sizeof(int)];
} ExtensionData <optimize=false>;

typedef struct
{
    while (true)
    {
        ExtensionData ext;
        if (stop)
            break;
    }

} ExtensionMap;

typedef struct
{
    int NamePtr <format=hex, fgcolor=cRed>;
    short DwordSize;
    short InstanceStorageIndex;
    
    FSeek(BasePos + NamePtr);
    string Name;
    
    FSeek(FileSize());
} RegisterInfo <comment=Name>;

uint AlignValue(uint x, uint alignment)
{
      local uint mask = ~(alignment - 1);
      return (x + (alignment - 1)) & mask;
}

typedef struct 
{
    byte unk;
    byte BoundCount;
    byte unk;
    byte unk;
    int BoundsOffset <format=hex, fgcolor=cRed>;
    float Unk;
    Vector3 Origin;
    int SetupOpcodesOffset <format=hex>;
    int VMInitBytecodeOffset;
    int VMUpdateBytecodeOffset;
    int VMUnkCallbackBytecodeOffset;

    FSeek(BasePos + BoundsOffset);
    Vector3 Bounds[BoundCount];
    FSeek(BasePos + SetupOpcodesOffset);
    PGLCommands Commands;
    
} Model;


typedef struct
{   

    local int BasePos = FTell();
    struct
    {
        
        char Magic[4];
        int RelocatorDataOffset <format=hex>;
        int RelocatorDataSize <format=hex>;
        int RelocationBase;
        int FileSize <format=hex>;
        byte Unk;
        enum <byte> { ExternalInstance = 0, InstanceAt0x7C = 1 } InstanceFlags <format=hex>;

        short ModelCount;
        short ShapeCount;
        short MaterialCount;
        short TexSetCount <comment="Per color">;
        short ColorCount;
        short InstanceOutRegisterDwordSize <comment="Used for creating the instance register storage">;
        short InstanceUnkRegisterDwordSize;
        short HostMethodInfoCount;
        short ExternalInfoCount;
        short OutRegisterInfoCount;
    
        FSeek(BasePos + 0x2a);
        short modelSetSymbols;
        byte NumColors;
        byte CurrentColorIndex;
        short bindMatrixCount;
        
        FSeek(BasePos + 0x36);
        short InstanceSize <format=hex, comment="under 0 = bundled instance size, above = external instance size (to be allocated)">;
        int ModelsOffset <format=hex>; // Strides of 0x28, count at 0x16
        int ShapesOffset <format=hex>; // Strides of 0x4 - offsets
        int MaterialsOffset <format=hex, fgcolor=cRed>;
        int TexSetTableOffset <format=hex, fgcolor=cRed>;
        int bindMatrixMapOffset <format=hex, fgcolor=cRed>;
        int HostMethodInfoOffset <format=hex, fgcolor=cRed>; // strides of 0x08
    
        FSeek(BasePos + 0x50);
        int ExternalInfoOffset <format=hex, fgcolor=cRed>;
        int OutRegisterInfoOffset <format=hex, fgcolor=cRed>;
        int modelSetSymbolsOffset <format=hex, fgcolor=cRed>; // 0x08 toc - offset then index?
        int VMBytecodeOffset <format=hex, fgcolor=cRed>;
        int VariationMaterialsOffset <format=hex, fgcolor=cRed>;
    
        FSeek(BasePos + 0x68);
        int ExtensionDataOffset <format=hex, fgcolor=cRed>;
    } Header;

    FSeek(BasePos + Header.MaterialsOffset);
    if (Header.MaterialCount > 0 && Header.MaterialsOffset != 0)
    {
        struct
        {
            FSeek(BasePos + Header.MaterialsOffset);
            PGLUmaterial material[Header.MaterialCount];
        } Materials;
    }
    
    FSeek(BasePos + Header.MaterialsOffset);
    if (Header.MaterialCount > 0 && Header.VariationMaterialsOffset != 0)
    {
        struct
        {
            FSeek(BasePos + Header.VariationMaterialsOffset);
            PGLUmaterial material[Header.MaterialCount];
        } VariationMaterials;
    }
    
    FSeek(BasePos + Header.ShapesOffset);
    struct
    {
        int ShapesOffset[Header.ShapeCount] <format=hex, fgcolor=cRed>;

        local int i = 0;
        for (i = 0; i < Header.ShapeCount; i++)
        {
            FSeek(BasePos + ShapesOffset[i]);
            pgluShape shape;   
        }
    } Shapes;
    
    FSeek(BasePos + Header.ModelsOffset);
    struct
    {
        local int i = 0;
        for (i = 0; i < Header.ModelCount; i++)
        {
            FSeek(BasePos + Header.ModelsOffset + (i * 0x28));
            Model model;   
        }
    } Models;

    if (Header.ExtensionDataOffset > 0)
    {
        FSeek(BasePos + Header.ExtensionDataOffset);
        ExtensionMap extensionMap;
    }
    
    FSeek(BasePos + Header.TexSetTableOffset);
    struct
    {
        int TexSetColorsOffset[Header.ColorCount] <format=hex, fgcolor=cRed>;
        
        local int i = 0;
        for (i = 0; i < Header.ColorCount; i++)
        {
            struct
            {
                FSeek(BasePos + TexSetColorsOffset[i]);
                int TexSetOffsets[Header.TexSetCount] <format=hex, fgcolor=cRed>;
                
                local int j = 0;
                for (j = 0; j < Header.TexSetCount; j++)
                {
                    FSeek(BasePos + TexSetOffsets[j]);
                    TextureSet1 TexSet;   
                }
            } TexSetTable;
        }
    } TexSetColors;

    if (Header.HostMethodInfoCount > 0)
    {
        struct
        {
            local int i = 0;
            for (i = 0; i < Header.HostMethodInfoCount; i++)
            {
                FSeek(BasePos + Header.HostMethodInfoOffset + (i * 0x08));
                RegisterInfo HostMethodInfo;
            }
            
            FSeek(FileSize()); // Fix bug
        } HostMethodInfos;
    }
    
    if (Header.OutRegisterInfoOffset > 0)
    {
        struct
        {
            local int i = 0;
            for (i = 0; i < Header.OutRegisterInfoCount; i++)
            {
                FSeek(BasePos + Header.OutRegisterInfoOffset + (i * 0x08));
                RegisterInfo OutRegisterInfo;
            }
            
            FSeek(FileSize()); // Fix bug
        } OutRegisterInfos;
    }
    
    if (Header.VMBytecodeOffset > 0)
    {
        FSeek(BasePos + Header.VMBytecodeOffset);
        VMCommands VMBytecode;
    }
    
    FSeek(BasePos + Header.RelocatorDataOffset);
    struct
    {
        int OffsetToUserData;
        uint SymbolsPtr <comment="This is not read">;
        _7bitInt OffsetType; // 0 = SetRelocationBase, 1 = update1/byte, 2 = update2/short, 3 = update4/int
        _7bitInt SymbolIndex;
        _7bitInt TotalNumberOfOffsetsToRelocate;
        _7bitInt StartOffsetForGroup;

        local int stop = false;
        while (!stop)
        {
            struct
            {
                ubyte CountAndFlag <format=hex>;
                if (CountAndFlag == 0)
                {
                    stop = true;
                    break;
                }

                if (CountAndFlag >= 0x80) // Array, all in a row
                {
                    // Array, all in a row
                    local int i = 0;
                    local int OffsetCount = CountAndFlag - 0x80;
                    _7bitInt OffsetsToUpdateNext[OffsetCount - 1];
                    break;
                }
                else // Array with provided offsets
                {
                    _7bitInt NextOffsets[CountAndFlag + 1];
                    break;
                }
            } RelocateOffsetGroup;
            
        }

        // Child offsets
        
        FSeek(Header.RelocatorDataOffset + OffsetToUserData);
        int SymbolCount1 <comment="Debug or stripped">;

        int SymbolCount2 <comment="Debug or stripped">;
        if (SymbolCount1 && SymbolCount2)
        {
            // readUserChunks(i, count1, count2) - stripped in release
            ushort unkCount;

            // Masked strings are xorred by 0xAA
            // string uint masked_symbols_string_offsets[unkCount]
        }
        
        FSeek(FileSize());
    } RelocatorData;
} ModelSet2 <optimize=false>;

if (ReadInt(0) == 0x534C444D)
    ModelSet2 ModelSet;
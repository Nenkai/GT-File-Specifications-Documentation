//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: GT4 Sq Sequence Table (Ssqt)
//   Authors: Nenkai
//   Version: 
//   Purpose: Music sequences - maps almost directly to midi sequences
//  Category: 
// File Mask: .sqt
//  ID Bytes: 53 73 71 74
//   History: 
//------------------------------------------------

BitfieldDisablePadding();

struct DeltaTime
{
    local uint total = 0;
    char t0;
    total += t0 & 0x7f;
    if (!(t0 & 0x80))
        break;

    total <<= 7;
    char t1;
    total += t1 & 0x7f;
    if (!(t1 & 0x80))
        break;

    total <<= 7;
    char t2;
    total += t2 & 0x7f;
    if (!(t2 & 0x80))
        break;

    total <<= 7;
    char t3;
    total += t3 & 0x7f;
    if (!(t3 & 0x80))
        break;
};

local char lastStatus = 0;
local int end = false;

typedef struct
{
    ubyte m_status <format=hex>;
    if (m_status & 0x80)
        lastStatus = m_status;
    else
        FSeek(FTell()-1);
    
    local char m_channel = lastStatus & 0xf;
    if ((lastStatus & 0xf0) == 0x80)
    {
        struct 
        {
            char m_note;
            //char m_velocity;
        } note_off_event;
    }
    else if ((lastStatus & 0xf0) == 0x90) 
    {
        struct 
        {
            char m_note;
            char m_velocity;
        } note_on_event;
    }
    else if ((lastStatus & 0xf0) == 0xA0) 
    {
        struct 
        {
            char m_note;
            char m_pressure;
        } note_pressure_event;
    }
    else if ((lastStatus & 0xf0) == 0xB0) 
    {
        struct 
        {
            char m_controller;
            char m_value;
        } controller_event;
    }
    else if ((lastStatus & 0xf0) == 0xC0) 
    {
        struct 
        {
            char m_program;
        } program_event;
    }
    else if ((lastStatus & 0xf0) == 0xD0) 
    {
        struct 
        {
            char m_pressure;
        } channel_pressure_event;
    }
    else if ((lastStatus & 0xf0) == 0xE0) 
    {
        struct 
        {
            char m_lsb;
        } pitch_bend_event;
    }
    else if (lastStatus == -1) 
    {
        struct 
        {
            enum <char> 
            {
                META_SEQUENCE_NUM = 0,
                META_TEXT = 1,
                META_COPYRIGHT = 2,
                META_SEQUENCE_NAME = 3,
                META_INSTRUMENT_NAME = 4,
                META_LYRIC = 5,
                META_MARKER = 6,
                META_CUE_POINT = 7,
                META_PROGRAM_NAME = 8,
                META_DEVICE_NAME = 9,
                META_MIDI_CHANNEL_PREFIX = 0x20,
                META_MIDI_PORT = 0x21,
                META_END_OF_TRACK = 0x2f,
                META_TEMPO = 0x51,
                META_SMPTE_OFFSET = 0x54,
                META_TIME_SIGNATURE = 0x58,
                META_KEY_SIGNATURE = 0x59,
                META_SEQUENCER_EVENT = 0x7f
            } m_type;
            DeltaTime m_length;
            if (m_type == META_END_OF_TRACK)
            {
                end = true;
                return;
            }
            else if (m_type == META_TEMPO)
            {
                BigEndian();
                uint m_usecPerQuarterNote : 24;
                LittleEndian();
                local uint m_bpm = 60000000 / m_usecPerQuarterNote;
            }
            else
            {
                // Any other common midi messages are not supported
                char m_data[m_length.total];
            }
        } meta_event;
    }
    else if ((lastStatus & 0xf0) == 0xF0) 
    {
        struct 
        {
            DeltaTime m_length;
            char m_message[m_length.total];
        } sysex_event;
    }
    
    if (end)
        return;
        
    DeltaTime delta;
} MidiMessage <comment=MidiMessageToString>;

string MidiMessageToString(MidiMessage& msg)
{
    string str;
    SPrintf(str, "[%02X] ", msg.m_status);
    
    if (msg.m_status == 0xFF)
    {
        str += "Meta Event: " + EnumToString(msg.meta_event.m_type); 
    }
    
    if ((msg.m_status & 0x80) == 0)
        str += "*";
    else if ((msg.m_status & 0xF0) == 0x80)
    {
        str += "Note Off";
    }
    else if ((msg.m_status & 0xF0) == 0x90)
    {
        str += "Note On";
    }
    else if ((msg.m_status & 0xF0) == 0xB0)
    {
        str += "Controller Event";
    }
    else if ((msg.m_status & 0xF0) == 0xC0)
    {
        str += "Program Event";
    }
    else if ((msg.m_status & 0xF0) == 0xE0)
    {
        str += "Pitch Bend Event";
    }
    

    return str;   
}

typedef struct
{
    uint Magic <format=hex>;
    uint TicksPerBeat_PPQN;
    
    local int i = 0;
    while (true)
    {
        MidiMessage message;
        if (message.m_status == 0xFF && message.meta_event.m_type == META_END_OF_TRACK)
            break;
    }
} Sequence;

struct
{
    uint Magic <format=hex>;
    uint NumSequences;
    uint SequenceOffsets[NumSequences + 1] <format=hex, fgcolor=cRed>;
    
    local int i = 0;
    for (i = 0; i < NumSequences + 1; i++)
    {
        FSeek(SequenceOffsets[i]);
        Sequence sequence;
    }
} SoundSequenceTable;
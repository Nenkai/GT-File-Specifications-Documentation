//------------------------------------------------
//--- 010 Editor v10.0.2 Binary Template
//
//      File: PGLUTexSet
//   Authors: Nenkai#9075
//   Version: 
//   Purpose: Texture Set for PS2 PDI Games
//  Category: Game Sprites
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------


BitfieldDisablePadding();

string PrintBufferSize(int64 val)
{
    string s;
    SPrintf(s, "Same as tbp/cbp, gets remapped at runtime - offset: 0x%x (0x%x * 64)", val * 64, val);
    return s;
}

typedef enum <byte>
{
    SCE_GS_NEAREST = 0,
    SCE_GS_LINEAR = 1,
    SCE_GS_NEAREST_MIPMAP_NEAREST = 2,
    SCE_GS_NEAREST_MIPMAP_LINEAR = 3,
    SCE_GS_LINEAR_MIPMAP_NEAREST = 4,
    SCE_GS_LINEAR_MIPMAP_LINEAR = 5,
} SCE_GS_MAG;

typedef enum <byte> 
{ 
    SCE_GS_PSMCT32 = 0, // RGBA32, uses 32-bit per pixel.
    SCE_GS_PSMCT24 = 1, // RGB24, uses 24-bit per pixel with the upper 8 bit unused.
    SCE_GS_PSMCT16 = 2, // RGBA16 unsigned, pack two pixels in 32-bit in little endian order.
    SCE_GS_PSMCT16S = 10, // RGBA16 signed, pack two pixels in 32-bit in little endian order.
    SCE_GS_PSMT8 = 19, // 8-bit indexed, packing 4 pixels per 32-bit.
    SCE_GS_PSMT4 = 20, // 4-bit indexed, packing 8 pixels per 32-bit.
    SCE_GS_PSMT8H = 27, // 8-bit indexed, but the upper 24-bit are unused.
    SCE_GS_PSMT4HL = 36, // 4-bit indexed, but the upper 24-bit are unused.
    SCE_GS_PSMT4HH = 44,
    SCE_GS_PSMZ32 = 48,  // 32-bit Z buffer
    SCE_GS_PSMZ24 = 49, // 24-bit Z buffer with the upper 8-bit unused
    SCE_GS_PSMZ16 = 50, // 16-bit unsigned Z buffer, pack two pixels in 32-bit in little endian order.
    SCE_GS_PSMZ16S = 58, // 16-bit signed Z buffer, pack two pixels in 32-bit in little endian order.
} SCE_GS_PSM;

typedef enum <byte>
{
    SCE_GS_REPEAT = 0,
    SCE_GS_CLAMP = 1,
    SCE_GS_REGION_CLAMP = 2,
    SCE_GS_REGION_REPEAT = 3,
} SCE_GS_CLAMP_PARAMS;


typedef struct
{
    struct
    {
        int64 TBP0_TextureBasePointer  : 14 <format=hex, comment="address / 64 (words aka 4) - this is the block offset to the texture">;
        int64 TBW_TextureBufferWidth : 6 <format=hex, comment="Texel Unit Width / 64 (words aka 4)">;
        SCE_GS_PSM PSM_TexturePixelStorageFormat : 6 <comment="Texture pixel storage format">;
        int64 TW_TextureWidth : 4 <comment="Texture width - Actual size will be 2^w and 2^h">;
        int64 TH_TextureHeight : 4 <comment="Texture height - Actual size will be 2^w and 2^h">;
        int64 TCC_TextureColorComponent : 1 <comment="Texture color component, 0 = RGB, 1 = RGBA">;
        int64 TFX_TextureFunction : 2 <comment="Texture function">;
        int64 CBP_CLUTBufferBasePointer : 14 <format=hex, comment="Base address of CLUT data (actual address will be cbp x 64)">;
        SCE_GS_PSM CPSM_ClutPixelStorageFormat : 4 <comment="Format in which CLUT entries are saved">;
        enum <byte> { CSM1, CSM2 } CSM_ClutStorageMode : 1 <comment="CLUT storage mode">;
        int64 CSA_ClutEntryOffset : 5 <comment="CLUT entry offset - CSA = Offset / 16, In CSM2, CSA must be 0">;
        // 0 = Temporary buffer contents not changed
        // 1 = Load performed to CSA position of buffer
        // 2 = Load is performed to CSA position of buffer and CBP is copied to CBP0. (*2)
        // 3 = Load is performed to CSA position of buffer and CBP is copied to CBP1. (*2)
        // 4 = If CBP0 != CBP, load is performed and CBP is copied to CBP0. (*2)
        // 5 = If CBP1 != CBP, load is performed and CBP is copied to CBP1. (*2)
        int64 CLD_ClutBufferLoadControl : 3 <comment="Check template comment">;
    } sceGsTex0;

    struct
    {
        int64 LCM_LODCalculationMethod : 1 <comment="0 = (LOD = (log2(1/|Q|)<<L+K), 1 = Fixed value (LOD = K)">;
        int64 pad01 : 1;
        int64 MXL_MaximumMIPLevel : 3 <comment="0-6">;
        SCE_GS_MAG MMAG : 1 <comment="Filter when Texture is Expanded (LOD < 0) - Max LINEAR">;
        SCE_GS_MAG MMIN : 3 <comment="Filter when Texture is Reduced (LOD >= 0)">;
    
        // 0 = Value specified by MIPTBP1 and MIPTBP2 is used
        // 1 = Base address of TBP1 - TBP3 is automatically set
        int64 MTBA_unknown : 1 <comment="Base Address specification of Mipmap Texture of Level 1 or more">;
        int64 pad10 : 9;
        int64 L : 2 <comment="LOD Parameter Value L">;
        int64 pad21 : 11;
        int64 K : 12 <comment="LOD Parameter Value K">;
        int64 pad44 :20;
    } sceGsTex1;

    struct sceGsMiptbp1
    {
        unsigned long TBP1:14;
        unsigned long TBW1:6;
        unsigned long TBP2:14;
        unsigned long TBW2:6;
        unsigned long TBP3:14;
        unsigned long TBW3:6;
        unsigned long pad60:4;
    } MipTable1;
    
    struct sceGsMiptbp2
    {
        unsigned long TBP4:14;
        unsigned long TBW4:6;
        unsigned long TBP5:14;
        unsigned long TBW5:6;
        unsigned long TBP6:14;
        unsigned long TBW6:6;
        unsigned long pad60:4;
    } MipTable2;

    struct 
    {
        SCE_GS_CLAMP_PARAMS WMS_WrapModeS:2 <comment="Wrap Mode in Horizontal (S) Direction">;
        SCE_GS_CLAMP_PARAMS WMT_VrapModeT:2 <comment="Wrap Mode in Horizontal (T) Direction">;
        unsigned long MINU:10 <comment="Clamp U Direction - Lower Limit">;
        unsigned long MAXU:10 <comment="Clamp U Direction - Upper Limit">;
        unsigned long MINV:10 <comment="Clamp Y Direction - Lower Limit">;
        unsigned long MAXV:10 <comment="Clamp Y Direction - Upper Limit">;
        unsigned long pad44:20;
    } sceGsClamp;

} PGLUTexture <optimize=false>;

typedef struct
{
    int FileDataOffset <format=hex, fgcolor=cRed>;
    
    struct
    {
        short BlockOffset <format=hex, comment=PrintBufferSize>;
        byte BufferWidth <comment="Same as TBW">;
        SCE_GS_PSM PixelFormat;
   } Params;

   short Width;
   short Height;

} TransferInfo <optimize=false, comment="Declares a buffer for textures or palettes to use">;

// GS's Users Manual - Page 161 to 170 are useful for understanding blocks and pages
typedef struct TextureSet1
{
    local int BasePos = FTell();
    struct
    {
        char Magic[4];
        int RelocPtr;
        int unkptr;
        int FileSize <format=hex>;
    
        short BaseTBPOffset <comment="Remapped at runtime, multiplied by 64 for absolute">;
        short TotalBlockSize <format=hex, comment="Total blocks taken by all textures">;
        short PGLUTextureCount <fgcolor=cGreen>;
        short TransferCount <fgcolor=cGreen>;
        int PGLUTextureMapOffset <format=hex, fgcolor=cRed>;
        int TransferInfosOffset  <format=hex, fgcolor=cRed>;
        int unkOffset3 <format=hex, fgcolor=cRed>;
        int clutAnimationOffset <format=hex, fgcolor=cRed>; // TODO - havent seen any texture that uses that yet
        int unkOffset4 <format=hex, fgcolor=cRed>;
    } Header <size=0x30 , bgcolor=cPurple>;

    PGLUTexture textures[Header.PGLUTextureCount];
    TransferInfo Transfers[Header.TransferCount];
}; 

local int LastTexSetOffset;

    
typedef struct Images
{
    char Magic[4];
    int RelocPtr;
    int TextureCount;
    int TextureDataOffset;

    LastTexSetOffset = TextureDataOffset;

    struct
    {
        char Name[0x3C];
        int TexSetIndex;        

        local int texSetSize = ReadInt(LastTexSetOffset + 0x0C);
        local int lastPos = FTell();
        FSeek(LastTexSetOffset);
        TextureSet1 TexSet;

        LastTexSetOffset += texSetSize;
        FSeek(lastPos);
    } TextureName[TextureCount] <optimize=false>;
};

// GT3 'imgs'
if (ReadInt(0x00) == 0x53474D49)
    Images imgs;
else if (ReadInt(0x00) == 0x31786554)
   TextureSet1 tex1; 